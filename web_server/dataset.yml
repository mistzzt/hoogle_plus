- name: applyNtimes
  query: 'f: (a -> a) -> x: a -> n: Int -> a'
  candidate: \f x n -> head (replicate n (f x))
  sorted_examples:
  - inputs:
    - (const 5)
    - '3'
    - '-2'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '7'
    - '7'
    output: '49'
  - inputs:
    - (\x -> x + 1)
    - '3'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '0'
    - '1'
    output: '1'
  - inputs:
    - (const 5)
    - '4'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '0'
    - '-1'
    output: 'bottom'
  - inputs:
    - (id)
    - '8'
    - '1'
    output: '8'
  - inputs:
    - (const 5)
    - '0'
    - '3'
    output: '5'
  - inputs:
    - (id)
    - '8'
    - '-2'
    output: 'bottom'
  - inputs:
    - (id)
    - '5'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '0'
    - '-2'
    output: 'bottom'
  control_examples:
  - inputs:
    - (const 5)
    - '4'
    - '-2'
    output: 'bottom'
  - inputs:
    - (id)
    - '6'
    - '10'
    output: '6'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '8'
    output: '9'
  - inputs:
    - (id)
    - '7'
    - '3'
    output: '7'
  - inputs:
    - (\x -> x + 1)
    - '3'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '10'
    - '0'
    output: 'bottom'
  - inputs:
    - (id)
    - '8'
    - '1'
    output: '8'
  - inputs:
    - (\x -> x * x)
    - '7'
    - '7'
    output: '49'
  - inputs:
    - (\x -> x + 1)
    - '-1'
    - '4'
    output: '0'
  - inputs:
    - (id)
    - '4'
    - '-1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '0'
    - '-1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '2'
    - '6'
    output: '4'
  - inputs:
    - (const 5)
    - '-2'
    - '5'
    output: '5'
  - inputs:
    - (id)
    - '8'
    - '-2'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '0'
    - '1'
    output: '1'
  - inputs:
    - (const 5)
    - '3'
    - '-2'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '4'
    - '0'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '-1'
    - '-2'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '2'
    - '7'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '9'
    - '8'
    output: '81'
  - inputs:
    - (const 5)
    - '-1'
    - '2'
    output: '5'
  - inputs:
    - (const 5)
    - '9'
    - '1'
    output: '5'
- name: applyNtimes
  query: 'f: (a -> a) -> x: a -> n: Int -> a'
  candidate: \f x n -> f (f ((repeat x) !! n))
  sorted_examples:
  - inputs:
    - (\x -> x * x)
    - '8'
    - '7'
    output: '4096'
  - inputs:
    - (\x -> x + 1)
    - '10'
    - '0'
    output: '12'
  - inputs:
    - (const 5)
    - '-2'
    - '-2'
    output: '5'
  - inputs:
    - (id)
    - '7'
    - '-1'
    output: 'bottom'
  - inputs:
    - (id)
    - '8'
    - '0'
    output: '8'
  - inputs:
    - (const 5)
    - '6'
    - '4'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '-1'
    - '4'
    output: '1'
  - inputs:
    - (\x -> x * x)
    - '10'
    - '0'
    output: '10000'
  - inputs:
    - (\x -> x * x)
    - '6'
    - '-1'
    output: 'bottom'
  - inputs:
    - (id)
    - '-2'
    - '8'
    output: '-2'
  control_examples:
  - inputs:
    - (\x -> x * x)
    - '4'
    - '6'
    output: '256'
  - inputs:
    - (\x -> x + 1)
    - '-1'
    - '4'
    output: '1'
  - inputs:
    - (\x -> x + 1)
    - '6'
    - '3'
    output: '8'
  - inputs:
    - (const 5)
    - '4'
    - '-1'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '7'
    - '7'
    output: '9'
  - inputs:
    - (\x -> x * x)
    - '10'
    - '0'
    output: '10000'
  - inputs:
    - (\x -> x * x)
    - '2'
    - '6'
    output: '16'
  - inputs:
    - (\x -> x * x)
    - '3'
    - '10'
    output: '81'
  - inputs:
    - (\x -> x + 1)
    - '1'
    - '2'
    output: '3'
  - inputs:
    - (\x -> x * x)
    - '6'
    - '6'
    output: '1296'
  - inputs:
    - (id)
    - '3'
    - '9'
    output: '3'
  - inputs:
    - (id)
    - '4'
    - '-1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '8'
    - '7'
    output: '4096'
  - inputs:
    - (id)
    - '4'
    - '-1'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '5'
    - '3'
    output: '5'
  - inputs:
    - (const 5)
    - '4'
    - '-2'
    output: '5'
  - inputs:
    - (const 5)
    - '0'
    - '6'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '10'
    - '0'
    output: '10000'
  - inputs:
    - (\x -> x + 1)
    - '0'
    - '10'
    output: '2'
  - inputs:
    - (const 5)
    - '9'
    - '0'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '1'
    - '0'
    output: '3'
  - inputs:
    - (\x -> x + 1)
    - '9'
    - '7'
    output: '11'
- name: applyNtimes
  query: 'f: (a -> a) -> x: a -> n: Int -> a'
  candidate: \f x n -> f (head (init (replicate n x)))
  sorted_examples:
  - inputs:
    - (\x -> x * x)
    - '2'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '4'
    output: '9'
  - inputs:
    - (id)
    - '8'
    - '1'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '9'
    - '-1'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '1'
    - '0'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '4'
    - '-2'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '9'
    - '1'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '0'
    - '4'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '0'
    - '1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '9'
    - '-2'
    output: 'bottom'
  - inputs:
    - (id)
    - '0'
    - '-2'
    output: 'bottom'
  - inputs:
    - (id)
    - '1'
    - '3'
    output: '1'
  - inputs:
    - (\x -> x * x)
    - '8'
    - '7'
    output: '64'
  - inputs:
    - (id)
    - '6'
    - '0'
    output: 'bottom'
  control_examples:
  - inputs:
    - (\x -> x * x)
    - '8'
    - '3'
    output: '64'
  - inputs:
    - (\x -> x + 1)
    - '1'
    - '0'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '10'
    - '3'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '1'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '4'
    output: '9'
  - inputs:
    - (\x -> x + 1)
    - '3'
    - '1'
    output: 'bottom'
  - inputs:
    - (id)
    - '8'
    - '1'
    output: 'bottom'
  - inputs:
    - (id)
    - '3'
    - '6'
    output: '3'
  - inputs:
    - (\x -> x * x)
    - '9'
    - '1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '10'
    - '3'
    output: '100'
  - inputs:
    - (id)
    - '6'
    - '0'
    output: 'bottom'
  - inputs:
    - (id)
    - '0'
    - '-2'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '3'
    - '10'
    output: '9'
  - inputs:
    - (id)
    - '0'
    - '1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '3'
    - '1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '8'
    - '7'
    output: '64'
  - inputs:
    - (const 5)
    - '7'
    - '6'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '2'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '0'
    - '1'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '7'
    - '8'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '-1'
    - '6'
    output: '1'
  - inputs:
    - (id)
    - '1'
    - '3'
    output: '1'
- name: applyNtimes
  query: 'f: (a -> a) -> x: a -> n: Int -> a'
  candidate: \f x n -> f (head (drop n (repeat x)))
  sorted_examples:
  - inputs:
    - (\x -> x * x)
    - '10'
    - '0'
    output: '100'
  - inputs:
    - (id)
    - '0'
    - '1'
    output: '0'
  - inputs:
    - (\x -> x + 1)
    - '3'
    - '-1'
    output: '4'
  - inputs:
    - (id)
    - '-2'
    - '-1'
    output: '-2'
  - inputs:
    - (const 5)
    - '4'
    - '0'
    output: '5'
  - inputs:
    - (const 5)
    - '0'
    - '4'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '6'
    - '3'
    output: '7'
  - inputs:
    - (id)
    - '-1'
    - '0'
    output: '-1'
  - inputs:
    - (\x -> x * x)
    - '0'
    - '-1'
    output: '0'
  - inputs:
    - (const 5)
    - '7'
    - '-2'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '3'
    - '0'
    output: '4'
  - inputs:
    - (\x -> x * x)
    - '3'
    - '1'
    output: '9'
  control_examples:
  - inputs:
    - (\x -> x * x)
    - '-1'
    - '-1'
    output: '1'
  - inputs:
    - (const 5)
    - '0'
    - '8'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '10'
    - '1'
    output: '11'
  - inputs:
    - (\x -> x + 1)
    - '3'
    - '0'
    output: '4'
  - inputs:
    - (id)
    - '3'
    - '8'
    output: '3'
  - inputs:
    - (\x -> x * x)
    - '4'
    - '-2'
    output: '16'
  - inputs:
    - (id)
    - '1'
    - '4'
    output: '1'
  - inputs:
    - (\x -> x * x)
    - '5'
    - '1'
    output: '25'
  - inputs:
    - (\x -> x * x)
    - '10'
    - '0'
    output: '100'
  - inputs:
    - (const 5)
    - '4'
    - '0'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '3'
    - '1'
    output: '9'
  - inputs:
    - (id)
    - '0'
    - '1'
    output: '0'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '9'
    output: '9'
  - inputs:
    - (\x -> x * x)
    - '0'
    - '-1'
    output: '0'
  - inputs:
    - (\x -> x + 1)
    - '6'
    - '3'
    output: '7'
  - inputs:
    - (\x -> x + 1)
    - '-1'
    - '3'
    output: '0'
  - inputs:
    - (id)
    - '-1'
    - '0'
    output: '-1'
  - inputs:
    - (\x -> x * x)
    - '2'
    - '0'
    output: '4'
  - inputs:
    - (const 5)
    - '7'
    - '-2'
    output: '5'
  - inputs:
    - (id)
    - '-2'
    - '-1'
    output: '-2'
  - inputs:
    - (\x -> x * x)
    - '0'
    - '-1'
    output: '0'
  - inputs:
    - (\x -> x * x)
    - '1'
    - '-2'
    output: '1'
- name: applyNtimes
  query: 'f: (a -> a) -> x: a -> n: Int -> a'
  candidate: \f x n -> (iterate f x) !! n
  sorted_examples:
  - inputs:
    - (\x -> x * x)
    - '7'
    - '7'
    output: '603000588348353537'
  - inputs:
    - (id)
    - '1'
    - '-2'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '2'
    - '0'
    output: '2'
  - inputs:
    - (\x -> x + 1)
    - '-2'
    - '-1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '2'
    - '0'
    output: '2'
  - inputs:
    - (\x -> x * x)
    - '4'
    - '-1'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '10'
    - '0'
    output: '10'
  - inputs:
    - (id)
    - '7'
    - '1'
    output: '7'
  - inputs:
    - (const 5)
    - '7'
    - '-2'
    output: 'bottom'
  - inputs:
    - (id)
    - '0'
    - '0'
    output: '0'
  - inputs:
    - (const 5)
    - '0'
    - '8'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '6'
    output: '14'
  control_examples:
  - inputs:
    - (\x -> x * x)
    - '-1'
    - '7'
    output: '1'
  - inputs:
    - (\x -> x * x)
    - '6'
    - '6'
    output: '0'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '4'
    output: '12'
  - inputs:
    - (\x -> x * x)
    - '1'
    - '7'
    output: '1'
  - inputs:
    - (\x -> x + 1)
    - '10'
    - '0'
    output: '10'
  - inputs:
    - (\x -> x * x)
    - '2'
    - '8'
    output: '0'
  - inputs:
    - (\x -> x * x)
    - '7'
    - '7'
    output: '603000588348353537'
  - inputs:
    - (\x -> x * x)
    - '10'
    - '0'
    output: '10'
  - inputs:
    - (\x -> x + 1)
    - '10'
    - '-1'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '7'
    - '-2'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '9'
    output: '17'
  - inputs:
    - (\x -> x + 1)
    - '2'
    - '2'
    output: '4'
  - inputs:
    - (\x -> x + 1)
    - '4'
    - '3'
    output: '7'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '6'
    output: '14'
  - inputs:
    - (\x -> x * x)
    - '9'
    - '2'
    output: '6561'
  - inputs:
    - (id)
    - '0'
    - '0'
    output: '0'
  - inputs:
    - (id)
    - '2'
    - '9'
    output: '2'
  - inputs:
    - (const 5)
    - '7'
    - '-2'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '0'
    - '4'
    output: '4'
  - inputs:
    - (const 5)
    - '-1'
    - '8'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '2'
    - '0'
    output: '2'
  - inputs:
    - (\x -> x * x)
    - '4'
    - '3'
    output: '65536'
- name: applyNtimes
  query: 'f: (a -> a) -> x: a -> n: Int -> a'
  candidate: \f x n -> f (head (replicate n x))
  sorted_examples:
  - inputs:
    - (\x -> x + 1)
    - '4'
    - '0'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '-1'
    - '-2'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '2'
    - '2'
    output: '3'
  - inputs:
    - (\x -> x * x)
    - '4'
    - '-2'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '9'
    - '1'
    output: '81'
  - inputs:
    - (const 5)
    - '4'
    - '2'
    output: '5'
  - inputs:
    - (id)
    - '3'
    - '0'
    output: 'bottom'
  - inputs:
    - (id)
    - '9'
    - '1'
    output: '9'
  - inputs:
    - (const 5)
    - '6'
    - '0'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '5'
    - '-2'
    output: 'bottom'
  - inputs:
    - (id)
    - '2'
    - '-2'
    output: 'bottom'
  control_examples:
  - inputs:
    - (const 5)
    - '-1'
    - '-2'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '9'
    - '1'
    output: '81'
  - inputs:
    - (id)
    - '0'
    - '0'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '6'
    - '8'
    output: '5'
  - inputs:
    - (const 5)
    - '8'
    - '2'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '4'
    - '-2'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '4'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x * x)
    - '4'
    - '6'
    output: '16'
  - inputs:
    - (id)
    - '9'
    - '10'
    output: '9'
  - inputs:
    - (\x -> x * x)
    - '10'
    - '3'
    output: '100'
  - inputs:
    - (\x -> x + 1)
    - '1'
    - '2'
    output: '2'
  - inputs:
    - (const 5)
    - '3'
    - '-2'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '4'
    - '-2'
    output: 'bottom'
  - inputs:
    - (id)
    - '3'
    - '0'
    output: 'bottom'
  - inputs:
    - (id)
    - '-1'
    - '0'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '-2'
    - '7'
    output: '-1'
  - inputs:
    - (id)
    - '9'
    - '1'
    output: '9'
  - inputs:
    - (const 5)
    - '4'
    - '-2'
    output: '5'
  - inputs:
    - (id)
    - '-2'
    - '4'
    output: '-2'
  - inputs:
    - (\x -> x + 1)
    - '2'
    - '2'
    output: '3'
  - inputs:
    - (\x -> x + 1)
    - '9'
    - '7'
    output: '10'
  - inputs:
    - (\x -> x + 1)
    - '3'
    - '1'
    output: '4'
- name: applyNtimes
  query: 'f: (a -> a) -> x: a -> n: Int -> a'
  candidate: \f x n -> f ((repeat x) !! n)
  sorted_examples:
  - inputs:
    - (\x -> x + 1)
    - '4'
    - '0'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '-1'
    - '-1'
    output: 'bottom'
  - inputs:
    - (const 5)
    - '3'
    - '-2'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '8'
    - '2'
    output: '64'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '6'
    output: '9'
  - inputs:
    - (id)
    - '6'
    - '-2'
    output: 'bottom'
  - inputs:
    - (id)
    - '3'
    - '0'
    output: '3'
  - inputs:
    - (id)
    - '7'
    - '1'
    output: '7'
  - inputs:
    - (const 5)
    - '2'
    - '0'
    output: '5'
  - inputs:
    - (const 5)
    - '10'
    - '3'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '-2'
    output: 'bottom'
  control_examples:
  - inputs:
    - (\x -> x * x)
    - '7'
    - '5'
    output: '49'
  - inputs:
    - (id)
    - '3'
    - '0'
    output: '3'
  - inputs:
    - (const 5)
    - '6'
    - '4'
    output: '5'
  - inputs:
    - (const 5)
    - '2'
    - '4'
    output: '5'
  - inputs:
    - (const 5)
    - '7'
    - '4'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '4'
    - '0'
    output: '5'
  - inputs:
    - (\x -> x * x)
    - '0'
    - '9'
    output: '0'
  - inputs:
    - (const 5)
    - '5'
    - '10'
    output: '5'
  - inputs:
    - (id)
    - '7'
    - '1'
    output: '7'
  - inputs:
    - (\x -> x * x)
    - '-1'
    - '-1'
    output: 'bottom'
  - inputs:
    - (\x -> x + 1)
    - '9'
    - '7'
    output: '10'
  - inputs:
    - (\x -> x + 1)
    - '8'
    - '6'
    output: '9'
  - inputs:
    - (id)
    - '1'
    - '-1'
    output: 'bottom'
  - inputs:
    - (id)
    - '-2'
    - '10'
    output: '-2'
  - inputs:
    - (\x -> x + 1)
    - '7'
    - '7'
    output: '8'
  - inputs:
    - (\x -> x + 1)
    - '4'
    - '3'
    output: '5'
  - inputs:
    - (id)
    - '6'
    - '0'
    output: '6'
  - inputs:
    - (const 5)
    - '3'
    - '-2'
    output: '5'
  - inputs:
    - (\x -> x + 1)
    - '5'
    - '7'
    output: '6'
  - inputs:
    - (\x -> x + 1)
    - '3'
    - '0'
    output: '4'
  - inputs:
    - (\x -> x + 1)
    - '1'
    - '0'
    output: '2'
  - inputs:
    - (\x -> x * x)
    - '1'
    - '-2'
    output: 'bottom'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> repeat (xs !! n)
  sorted_examples:
  - inputs:
    - '8'
    - '[8]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[9,7]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      _'
  - inputs:
    - '9'
    - '[0,4,4,10,-2,0]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[4,6,5,-2,-1,9]'
    output: '[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      _'
  - inputs:
    - '2'
    - '[7,1,4]'
    output: '[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
      _'
  - inputs:
    - '-2'
    - '[1,3,4]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[1,-2,6,0]'
    output: '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      _'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[-2,-1,3,2]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[-2,4]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[5,6,0,10,1,6]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[2,0,6,-2]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      _'
  - inputs:
    - '8'
    - '[3,7]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[3,9,6]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[9]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      _'
  - inputs:
    - '10'
    - '[7,8,-1,9,-1]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[]'
    output: 'bottom'
  control_examples:
  - inputs:
    - '0'
    - '[9]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      _'
  - inputs:
    - '1'
    - '[4,6,5,-2,-1,9]'
    output: '[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
      _'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[9,7]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      _'
  - inputs:
    - '6'
    - '[9]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[4]'
    output: 'bottom'
  - inputs:
    - '2'
    - '[7,1,4]'
    output: '[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
      4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
      _'
  - inputs:
    - '7'
    - '[7]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[0,4,4,10,-2,0]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[5,10,0]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[8]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[-2]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[3,9,6]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[1,4,1]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[3,7]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[1,7,10]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
      8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
      _'
  - inputs:
    - '5'
    - '[7,4,4]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[]'
    output: 'bottom'
  - inputs:
    - '2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[0]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[2,0,6,-2]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      _'
  - inputs:
    - '-2'
    - '[2,9]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[-2,4]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[6]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[7,8,-1,9,-1]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[0,7,10]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[1,-2,6,0]'
    output: '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      _'
  - inputs:
    - '-2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[]'
    output: 'bottom'
  - inputs:
    - '6'
    - '[3]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[1]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> take n (tail xs)
  sorted_examples:
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[9,4,9,2,4]'
    output: '[4, 9, 2, 4]'
  - inputs:
    - '-2'
    - '[5,10,6,7,2,1]'
    output: '[]'
  - inputs:
    - '10'
    - '[-1,0]'
    output: '[0]'
  - inputs:
    - '0'
    - '[3,-1,0]'
    output: '[]'
  - inputs:
    - '2'
    - '[4,2,5,7,4,-2]'
    output: '[2, 5]'
  - inputs:
    - '5'
    - '[6,9,10,-1]'
    output: '[9, 10, -1]'
  - inputs:
    - '3'
    - '[8]'
    output: '[]'
  - inputs:
    - '6'
    - '[1,1,4,10,1,3]'
    output: '[1, 4, 10, 1, 3]'
  - inputs:
    - '-1'
    - '[7,4,6,-2]'
    output: '[]'
  - inputs:
    - '1'
    - '[-1,5,10,-2,-1]'
    output: '[5]'
  - inputs:
    - '7'
    - '[]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[0,9,2]'
    output: '[9, 2]'
  - inputs:
    - '-1'
    - '[6,1]'
    output: '[]'
  - inputs:
    - '-2'
    - '[-2,5,-1,10,8]'
    output: '[]'
  - inputs:
    - '3'
    - '[10,8,1,8,6]'
    output: '[8, 1, 8]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[7,0]'
    output: '[]'
  - inputs:
    - '-2'
    - '[4,-1,9]'
    output: '[]'
  - inputs:
    - '0'
    - '[10]'
    output: '[]'
  control_examples:
  - inputs:
    - '0'
    - '[3,-1,0]'
    output: '[]'
  - inputs:
    - '9'
    - '[3]'
    output: '[]'
  - inputs:
    - '4'
    - '[]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[10,8,1,8,6]'
    output: '[8, 1, 8]'
  - inputs:
    - '9'
    - '[-1]'
    output: '[]'
  - inputs:
    - '4'
    - '[-1,6]'
    output: '[6]'
  - inputs:
    - '8'
    - '[]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[6,1]'
    output: '[]'
  - inputs:
    - '7'
    - '[10,7,10]'
    output: '[7, 10]'
  - inputs:
    - '8'
    - '[2]'
    output: '[]'
  - inputs:
    - '0'
    - '[10]'
    output: '[]'
  - inputs:
    - '9'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[5,8]'
    output: '[8]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[5]'
    output: '[]'
  - inputs:
    - '5'
    - '[]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[-1]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '5'
    - '[7]'
    output: '[]'
  - inputs:
    - '8'
    - '[0]'
    output: '[]'
  - inputs:
    - '10'
    - '[9]'
    output: '[]'
  - inputs:
    - '5'
    - '[3]'
    output: '[]'
  - inputs:
    - '0'
    - '[7,0]'
    output: '[]'
  - inputs:
    - '10'
    - '[0,2]'
    output: '[2]'
  - inputs:
    - '10'
    - '[]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[8]'
    output: '[]'
  - inputs:
    - '5'
    - '[0,9,2]'
    output: '[9, 2]'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[5,10,6,7,2,1]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[-1,10,0]'
    output: '[10, 0]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[4,-1,9]'
    output: '[]'
  - inputs:
    - '8'
    - '[9,4,9,2,4]'
    output: '[4, 9, 2, 4]'
  - inputs:
    - '10'
    - '[-1,0]'
    output: '[0]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> reverse (take n xs)
  sorted_examples:
  - inputs:
    - '8'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[2,2,1,7,9,3]'
    output: '[3, 9, 7, 1, 2, 2]'
  - inputs:
    - '0'
    - '[4,1,3,2,9]'
    output: '[]'
  - inputs:
    - '3'
    - '[8,4,-2]'
    output: '[-2, 4, 8]'
  - inputs:
    - '-1'
    - '[-2,5,9]'
    output: '[]'
  - inputs:
    - '2'
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '3'
    - '[10,1,10,0,6]'
    output: '[10, 1, 10]'
  - inputs:
    - '6'
    - '[0,3,4,3,1]'
    output: '[1, 3, 4, 3, 0]'
  - inputs:
    - '9'
    - '[1,9,-1,6]'
    output: '[6, -1, 9, 1]'
  - inputs:
    - '-1'
    - '[8]'
    output: '[]'
  - inputs:
    - '1'
    - '[1,3,-2,3,-2]'
    output: '[1]'
  - inputs:
    - '2'
    - '[4,-1,5,9]'
    output: '[-1, 4]'
  - inputs:
    - '10'
    - '[9,2]'
    output: '[2, 9]'
  - inputs:
    - '2'
    - '[-1,-2,7]'
    output: '[-2, -1]'
  - inputs:
    - '1'
    - '[7,7]'
    output: '[7]'
  - inputs:
    - '-2'
    - '[-2,6,3,5]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '5'
    - '[4,-1,7,9,6,2]'
    output: '[6, 9, 7, -1, 4]'
  - inputs:
    - '-2'
    - '[1,2]'
    output: '[]'
  control_examples:
  - inputs:
    - '8'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[8,3]'
    output: '[3, 8]'
  - inputs:
    - '3'
    - '[0,4,3,4,8]'
    output: '[3, 4, 0]'
  - inputs:
    - '9'
    - '[2,2,1,7,9,3]'
    output: '[3, 9, 7, 1, 2, 2]'
  - inputs:
    - '9'
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '8'
    - '[5]'
    output: '[5]'
  - inputs:
    - '2'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,7]'
    output: '[7]'
  - inputs:
    - '8'
    - '[10,5,9]'
    output: '[9, 5, 10]'
  - inputs:
    - '10'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[-2,5]'
    output: '[5, -2]'
  - inputs:
    - '8'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[1,3,-2,3,-2]'
    output: '[1]'
  - inputs:
    - '6'
    - '[9]'
    output: '[9]'
  - inputs:
    - '-2'
    - '[5,7,2]'
    output: '[]'
  - inputs:
    - '6'
    - '[0,3,4,3,1]'
    output: '[1, 3, 4, 3, 0]'
  - inputs:
    - '10'
    - '[2]'
    output: '[2]'
  - inputs:
    - '-2'
    - '[4,1,2,0]'
    output: '[]'
  - inputs:
    - '9'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[1,9,-1,6]'
    output: '[6, -1, 9, 1]'
  - inputs:
    - '10'
    - '[1]'
    output: '[1]'
  - inputs:
    - '10'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[1,2]'
    output: '[]'
  - inputs:
    - '2'
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '8'
    - '[4,0,-1]'
    output: '[-1, 0, 4]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[9,2]'
    output: '[2, 9]'
  - inputs:
    - '3'
    - '[7,7,-1,6,-1]'
    output: '[-1, 7, 7]'
  - inputs:
    - '2'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[0,7,-1]'
    output: '[-1, 7, 0]'
  - inputs:
    - '3'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[8,0,9]'
    output: '[9, 0, 8]'
  - inputs:
    - '5'
    - '[]'
    output: '[]'
  - inputs:
    - '3'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[8]'
    output: '[]'
  - inputs:
    - '4'
    - '[0]'
    output: '[0]'
  - inputs:
    - '3'
    - '[8,4,-2]'
    output: '[-2, 4, 8]'
  - inputs:
    - '3'
    - '[10,1,10,0,6]'
    output: '[10, 1, 10]'
  - inputs:
    - '7'
    - '[0,-2,-2]'
    output: '[-2, -2, 0]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> concat (replicate n xs)
  sorted_examples:
  - inputs:
    - '-2'
    - '[6,2,1]'
    output: '[]'
  - inputs:
    - '9'
    - '[1,9,-1,6]'
    output: '[1, 9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6, 1,
      9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6]'
  - inputs:
    - '7'
    - '[1]'
    output: '[1, 1, 1, 1, 1, 1, 1]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '2'
    - '[10,5,6,2]'
    output: '[10, 5, 6, 2, 10, 5, 6, 2]'
  - inputs:
    - '1'
    - '[5]'
    output: '[5]'
  - inputs:
    - '1'
    - '[10,9,3]'
    output: '[10, 9, 3]'
  - inputs:
    - '10'
    - '[9]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]'
  - inputs:
    - '3'
    - '[2]'
    output: '[2, 2, 2]'
  - inputs:
    - '3'
    - '[2,10,5]'
    output: '[2, 10, 5, 2, 10, 5, 2, 10, 5]'
  - inputs:
    - '-2'
    - '[10,2,3,5,3,8]'
    output: '[]'
  - inputs:
    - '3'
    - '[-2,6,9,2,5,0]'
    output: '[-2, 6, 9, 2, 5, 0, -2, 6, 9, 2, 5, 0, -2, 6, 9, 2, 5, 0]'
  - inputs:
    - '2'
    - '[8,1,6]'
    output: '[8, 1, 6, 8, 1, 6]'
  - inputs:
    - '5'
    - '[9]'
    output: '[9, 9, 9, 9, 9]'
  - inputs:
    - '0'
    - '[6,8,8,0]'
    output: '[]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '2'
    - '[8]'
    output: '[8, 8]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[-2,10]'
    output: '[]'
  - inputs:
    - '9'
    - '[-2,2,3]'
    output: '[-2, 2, 3, -2, 2, 3, -2, 2, 3, -2, 2, 3, -2, 2, 3, -2, 2, 3, -2, 2, 3,
      -2, 2, 3, -2, 2, 3]'
  - inputs:
    - '9'
    - '[7,7]'
    output: '[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '0'
    - '[2,7,3]'
    output: '[]'
  - inputs:
    - '3'
    - '[7,3]'
    output: '[7, 3, 7, 3, 7, 3]'
  - inputs:
    - '8'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '3'
    - '[0,4,3,4,8]'
    output: '[0, 4, 3, 4, 8, 0, 4, 3, 4, 8, 0, 4, 3, 4, 8]'
  - inputs:
    - '6'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3]'
  control_examples:
  - inputs:
    - '5'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  - inputs:
    - '3'
    - '[0,6,-1,0,6]'
    output: '[0, 6, -1, 0, 6, 0, 6, -1, 0, 6, 0, 6, -1, 0, 6]'
  - inputs:
    - '9'
    - '[1,9,-1,6]'
    output: '[1, 9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6, 1,
      9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6, 1, 9, -1, 6]'
  - inputs:
    - '3'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[1]'
    output: '[1, 1, 1, 1, 1, 1, 1]'
  - inputs:
    - '6'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3]'
  - inputs:
    - '1'
    - '[5]'
    output: '[5]'
  - inputs:
    - '3'
    - '[7,6,-1,-1,3]'
    output: '[7, 6, -1, -1, 3, 7, 6, -1, -1, 3, 7, 6, -1, -1, 3]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '5'
    - '[2,9,-1,0]'
    output: '[2, 9, -1, 0, 2, 9, -1, 0, 2, 9, -1, 0, 2, 9, -1, 0, 2, 9, -1, 0]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[7]'
    output: '[7, 7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '3'
    - '[-2,6,9,2,5,0]'
    output: '[-2, 6, 9, 2, 5, 0, -2, 6, 9, 2, 5, 0, -2, 6, 9, 2, 5, 0]'
  - inputs:
    - '3'
    - '[0,4,3,4,8]'
    output: '[0, 4, 3, 4, 8, 0, 4, 3, 4, 8, 0, 4, 3, 4, 8]'
  - inputs:
    - '-2'
    - '[6,2,1]'
    output: '[]'
  - inputs:
    - '4'
    - '[2,7,6,3,5]'
    output: '[2, 7, 6, 3, 5, 2, 7, 6, 3, 5, 2, 7, 6, 3, 5, 2, 7, 6, 3, 5]'
  - inputs:
    - '2'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[2,7,3]'
    output: '[]'
  - inputs:
    - '10'
    - '[-2,8,10,-1,1]'
    output: '[-2, 8, 10, -1, 1, -2, 8, 10, -1, 1, -2, 8, 10, -1, 1, -2, 8, 10, -1,
      1, -2, 8, 10, -1, 1, -2, 8, 10, -1, 1, -2, 8, 10, -1, 1, -2, 8, 10, -1, 1, -2,
      8, 10, -1, 1, -2, 8, 10, -1, _'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '5'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '5'
    - '[9]'
    output: '[9, 9, 9, 9, 9]'
  - inputs:
    - '10'
    - '[-2,4]'
    output: '[-2, 4, -2, 4, -2, 4, -2, 4, -2, 4, -2, 4, -2, 4, -2, 4, -2, 4, -2, 4]'
  - inputs:
    - '9'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[10,2,3,5,3,8]'
    output: '[]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '3'
    - '[7,3]'
    output: '[7, 3, 7, 3, 7, 3]'
  - inputs:
    - '9'
    - '[7,7]'
    output: '[7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[10,9,3]'
    output: '[10, 9, 3]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[0,6]'
    output: '[0, 6, 0, 6, 0, 6, 0, 6, 0, 6, 0, 6]'
  - inputs:
    - '10'
    - '[9]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]'
  - inputs:
    - '4'
    - '[]'
    output: '[]'
  - inputs:
    - '2'
    - '[3,2,6,2,7,3]'
    output: '[3, 2, 6, 2, 7, 3, 3, 2, 6, 2, 7, 3]'
  - inputs:
    - '3'
    - '[2,10,5]'
    output: '[2, 10, 5, 2, 10, 5, 2, 10, 5]'
  - inputs:
    - '-1'
    - '[-2,10]'
    output: '[]'
  - inputs:
    - '2'
    - '[]'
    output: '[]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> take n xs
  sorted_examples:
  - inputs:
    - '-2'
    - '[2,1,2,-2]'
    output: '[]'
  - inputs:
    - '4'
    - '[0,3,3,-1,6,-2]'
    output: '[0, 3, 3, -1]'
  - inputs:
    - '2'
    - '[]'
    output: '[]'
  - inputs:
    - '2'
    - '[5,7,7]'
    output: '[5, 7]'
  - inputs:
    - '-1'
    - '[3]'
    output: '[]'
  - inputs:
    - '6'
    - '[0,3,4,3,1]'
    output: '[0, 3, 4, 3, 1]'
  - inputs:
    - '2'
    - '[6,9,9,0,0,6]'
    output: '[6, 9]'
  - inputs:
    - '0'
    - '[10,-2]'
    output: '[]'
  - inputs:
    - '6'
    - '[8,10,9,6,0,-1]'
    output: '[8, 10, 9, 6, 0, -1]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '6'
    - '[5,0,4,9]'
    output: '[5, 0, 4, 9]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '2'
    - '[6,2,9,3,3]'
    output: '[6, 2]'
  - inputs:
    - '9'
    - '[2,9,10]'
    output: '[2, 9, 10]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[0,4]'
    output: '[0, 4]'
  - inputs:
    - '4'
    - '[-2,6,10,4,3]'
    output: '[-2, 6, 10, 4]'
  control_examples:
  - inputs:
    - '2'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[0,3,4,3,1]'
    output: '[0, 3, 4, 3, 1]'
  - inputs:
    - '2'
    - '[5,8]'
    output: '[5, 8]'
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[2]'
    output: '[2]'
  - inputs:
    - '5'
    - '[5,8]'
    output: '[5, 8]'
  - inputs:
    - '4'
    - '[4,6,10]'
    output: '[4, 6, 10]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[3,5]'
    output: '[3, 5]'
  - inputs:
    - '5'
    - '[9,10]'
    output: '[9, 10]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[2,9,10]'
    output: '[2, 9, 10]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[-1,1,1]'
    output: '[-1, 1, 1]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  - inputs:
    - '5'
    - '[1,-1]'
    output: '[1, -1]'
  - inputs:
    - '6'
    - '[8,7]'
    output: '[8, 7]'
  - inputs:
    - '2'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[-2,2]'
    output: '[]'
  - inputs:
    - '4'
    - '[-2,6,10,4,3]'
    output: '[-2, 6, 10, 4]'
  - inputs:
    - '3'
    - '[5,-1,10,6]'
    output: '[5, -1, 10]'
  - inputs:
    - '10'
    - '[10,6]'
    output: '[10, 6]'
  - inputs:
    - '9'
    - '[2,2,1,7,9,3]'
    output: '[2, 2, 1, 7, 9, 3]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '-2'
    - '[2,1,2,-2]'
    output: '[]'
  - inputs:
    - '7'
    - '[1]'
    output: '[1]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[2,1]'
    output: '[2, 1]'
  - inputs:
    - '4'
    - '[4,4]'
    output: '[4, 4]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  - inputs:
    - '2'
    - '[6,9,9,0,0,6]'
    output: '[6, 9]'
  - inputs:
    - '5'
    - '[9]'
    output: '[9]'
  - inputs:
    - '-2'
    - '[8,-1]'
    output: '[]'
  - inputs:
    - '6'
    - '[8,10,9,6,0,-1]'
    output: '[8, 10, 9, 6, 0, -1]'
  - inputs:
    - '3'
    - '[]'
    output: '[]'
  - inputs:
    - '3'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[7,6]'
    output: '[7, 6]'
  - inputs:
    - '8'
    - '[9,9,-1]'
    output: '[9, 9, -1]'
  - inputs:
    - '6'
    - '[0,4]'
    output: '[0, 4]'
  - inputs:
    - '3'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[5,3]'
    output: '[5, 3]'
  - inputs:
    - '-1'
    - '[2,8]'
    output: '[]'
  - inputs:
    - '3'
    - '[]'
    output: '[]'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (map x y)
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2,-2]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,0]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,4,5]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,10,0,1]'
    output: '4'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,0]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,10,0,1]'
    output: '4'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,7]'
    output: '2'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (maybeToList (x (head y)))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,4,-2,0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2,9]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,0,7,2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,1,1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,7,0,9]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,7]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,8]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,7,8]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,7,8,-2]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,7,8]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,4,-2,0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,7]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,8,0]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,1,1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,-2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,7,0,9]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,7,8,-2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (mapMaybe x y)
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,1,8,8]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,1,1]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-2,7]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,6]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,-2,1]'
    output: '4'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,4,10]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,1,3]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,6,7,2]'
    output: '4'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-2,7]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,1,1]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (mapMaybe x (init y))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-2,7]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,2]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,5,0]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,-2,8]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-2,7]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,-2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,1,-2]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,-2,7,-2]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,3,-1]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,-2,8]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,4,8]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,9,-2,6]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> concat (group (reverse xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[3,-4,-2,-5,-1]'
    output: '[-1, -5, -2, -4, 3]'
  - inputs:
    - '[0,-2,-1]'
    output: '[-1, -2, 0]'
  - inputs:
    - '[-1,3,1,4,0]'
    output: '[0, 4, 1, 3, -1]'
  - inputs:
    - '[4,4,0,3,-4]'
    output: '[-4, 3, 0, 4, 4]'
  - inputs:
    - '[3,3,-5]'
    output: '[-5, 3, 3]'
  - inputs:
    - '[-4,-3,2,-2,-5,6]'
    output: '[6, -5, -2, 2, -3, -4]'
  - inputs:
    - '[5,-1,5,3,2]'
    output: '[2, 3, 5, -1, 5]'
  - inputs:
    - '[3,-6,6,0]'
    output: '[0, 6, -6, 3]'
  - inputs:
    - '[-2,1]'
    output: '[1, -2]'
  - inputs:
    - '[-3,-2,-3]'
    output: '[-3, -2, -3]'
  - inputs:
    - '[6,1,4,6]'
    output: '[6, 4, 1, 6]'
  - inputs:
    - '[1,1,2]'
    output: '[2, 1, 1]'
  - inputs:
    - '[-4,-3,5]'
    output: '[5, -3, -4]'
  - inputs:
    - '[3]'
    output: '[3]'
  - inputs:
    - '[-3]'
    output: '[-3]'
  - inputs:
    - '[2,-2]'
    output: '[-2, 2]'
  - inputs:
    - '[-1,0]'
    output: '[0, -1]'
  control_examples:
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-3,0,1]'
    output: '[1, 0, -3]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-2,-3,-3]'
    output: '[-3, -3, -2]'
  - inputs:
    - '[-3,-3,-3,-4]'
    output: '[-4, -3, -3, -3]'
  - inputs:
    - '[-2,1]'
    output: '[1, -2]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-4,-3,5]'
    output: '[5, -3, -4]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[2,-2]'
    output: '[-2, 2]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[3]'
    output: '[3]'
  - inputs:
    - '[-2,2]'
    output: '[2, -2]'
  - inputs:
    - '[5,-1,5,3,2]'
    output: '[2, 3, 5, -1, 5]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-3,-2,-3]'
    output: '[-3, -2, -3]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[1,1,2]'
    output: '[2, 1, 1]'
  - inputs:
    - '[4,-3]'
    output: '[-3, 4]'
  - inputs:
    - '[-1,1]'
    output: '[1, -1]'
  - inputs:
    - '[-3]'
    output: '[-3]'
  - inputs:
    - '[-1,3,1,4,0]'
    output: '[0, 4, 1, 3, -1]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1,0]'
    output: '[0, -1]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1,0]'
    output: '[0, -1]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> head (group xs)
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-5,3,6,-1,-4,5]'
    output: '[-5]'
  - inputs:
    - '[5,-2,-1,0,-4]'
    output: '[5]'
  - inputs:
    - '[-2,-1]'
    output: '[-2]'
  - inputs:
    - '[-5,-5,-2,4,-1]'
    output: '[-5, -5]'
  - inputs:
    - '[3,3,2,6,3,-4]'
    output: '[3, 3]'
  - inputs:
    - '[3,0,4]'
    output: '[3]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[1,1]'
    output: '[1, 1]'
  - inputs:
    - '[3,5,1,6,2]'
    output: '[3]'
  - inputs:
    - '[4,4,-3,1,-3,4]'
    output: '[4, 4]'
  - inputs:
    - '[0,-5,6]'
    output: '[0]'
  - inputs:
    - '[3,-1,-4,3,2]'
    output: '[3]'
  - inputs:
    - '[-5,-1,1,-4]'
    output: '[-5]'
  - inputs:
    - '[6,-4,3,-6,-1,4]'
    output: '[6]'
  - inputs:
    - '[2,-4]'
    output: '[2]'
  - inputs:
    - '[-5,-3,-4]'
    output: '[-5]'
  - inputs:
    - '[-2,1,2,1,-6]'
    output: '[-2]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[-3,1,4,-2]'
    output: '[-3]'
  - inputs:
    - '[1,4]'
    output: '[1]'
  - inputs:
    - '[-2,4]'
    output: '[-2]'
  - inputs:
    - '[-3,5,-5]'
    output: '[-3]'
  - inputs:
    - '[0,-2,-1]'
    output: '[0]'
  - inputs:
    - '[-4,0,-1]'
    output: '[-4]'
  - inputs:
    - '[-2,-3,2,0]'
    output: '[-2]'
  - inputs:
    - '[-4,2,-2,-3,4]'
    output: '[-4]'
  - inputs:
    - '[4,-5,-4,-2,-3]'
    output: '[4]'
  control_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-2,4]'
    output: '[-2]'
  - inputs:
    - '[-4,0,-1]'
    output: '[-4]'
  - inputs:
    - '[3,3,2,6,3,-4]'
    output: '[3, 3]'
  - inputs:
    - '[-3,-4]'
    output: '[-3]'
  - inputs:
    - '[-4]'
    output: '[-4]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[4,-5,-4,-2,-3]'
    output: '[4]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[4,4,-3,1,-3,4]'
    output: '[4, 4]'
  - inputs:
    - '[1,1]'
    output: '[1, 1]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '[2,-4]'
    output: '[2]'
  - inputs:
    - '[1,4]'
    output: '[1]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[-5,-3,-4]'
    output: '[-5]'
  - inputs:
    - '[-2,1,2,1,-6]'
    output: '[-2]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-5,-1,1,-4]'
    output: '[-5]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-2,-1]'
    output: '[-2]'
  - inputs:
    - '[-3,5,-5]'
    output: '[-3]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[3,-1,-4,3,2]'
    output: '[3]'
  - inputs:
    - '[-5,3,6,-1,-4,5]'
    output: '[-5]'
  - inputs:
    - '[0,-5,6]'
    output: '[0]'
  - inputs:
    - '[-5,-5,-2,4,-1]'
    output: '[-5, -5]'
  - inputs:
    - '[6,-4,3,-6,-1,4]'
    output: '[6]'
  - inputs:
    - '[0,-2,-1]'
    output: '[0]'
  - inputs:
    - '[1,4,2]'
    output: '[1]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> last (group xs)
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[0,5,-3,-5,-2,-6]'
    output: '[-6]'
  - inputs:
    - '[-3,-2,2]'
    output: '[2]'
  - inputs:
    - '[-3,4,-1]'
    output: '[-1]'
  - inputs:
    - '[0,1,0,3,1]'
    output: '[1]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[1,1]'
    output: '[1, 1]'
  - inputs:
    - '[2,-3,1,0]'
    output: '[0]'
  - inputs:
    - '[-2,6,-2,-1,-3,4]'
    output: '[4]'
  - inputs:
    - '[2,-2,2,-6,0,-1]'
    output: '[-1]'
  - inputs:
    - '[-6,0,-3,4,-3,-1]'
    output: '[-1]'
  - inputs:
    - '[-4,-5,6,-4,4]'
    output: '[4]'
  - inputs:
    - '[-2,-3,-3]'
    output: '[-3, -3]'
  - inputs:
    - '[2,0,-2]'
    output: '[-2]'
  - inputs:
    - '[0,1]'
    output: '[1]'
  - inputs:
    - '[-3,5,-5,-1,-3]'
    output: '[-3]'
  - inputs:
    - '[-2,1,2,1,-6]'
    output: '[-6]'
  - inputs:
    - '[0,0]'
    output: '[0, 0]'
  - inputs:
    - '[3,-3]'
    output: '[-3]'
  - inputs:
    - '[-3,-2,-3]'
    output: '[-3]'
  - inputs:
    - '[0,-3,-3]'
    output: '[-3, -3]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[-2,4]'
    output: '[4]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[2,0]'
    output: '[0]'
  - inputs:
    - '[-2,-1,4,1,5]'
    output: '[5]'
  - inputs:
    - '[3,1,1]'
    output: '[1, 1]'
  - inputs:
    - '[-1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '[1,4]'
    output: '[4]'
  control_examples:
  - inputs:
    - '[1,1]'
    output: '[1, 1]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-3,5,-5,-1,-3]'
    output: '[-3]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-3,-2,-3]'
    output: '[-3]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[-4,-5,6,-4,4]'
    output: '[4]'
  - inputs:
    - '[-2,1,2,1,-6]'
    output: '[-6]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[1,4]'
    output: '[4]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-2,-1,4,1,5]'
    output: '[5]'
  - inputs:
    - '[3,1,1]'
    output: '[1, 1]'
  - inputs:
    - '[-1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[2,0]'
    output: '[0]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[0,-3,-3]'
    output: '[-3, -3]'
  - inputs:
    - '[-3,4,-1]'
    output: '[-1]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[3,-3]'
    output: '[-3]'
  - inputs:
    - '[3]'
    output: '[3]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[3,0,3]'
    output: '[3]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[2,-1]'
    output: '[-1]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[2,-2,2,-6,0,-1]'
    output: '[-1]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> head (group (init xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[6,-1,4,-2,-5,-2]'
    output: '[6]'
  - inputs:
    - '[-4,-5,6,-4,4]'
    output: '[-4]'
  - inputs:
    - '[2,0]'
    output: '[2]'
  - inputs:
    - '[-2,1]'
    output: '[-2]'
  - inputs:
    - '[4,-4,0,-1,6]'
    output: '[4]'
  - inputs:
    - '[0,3,4,-4]'
    output: '[0]'
  - inputs:
    - '[1,1,2]'
    output: '[1, 1]'
  - inputs:
    - '[3,-5,3,0]'
    output: '[3]'
  - inputs:
    - '[-1,-1,-3]'
    output: '[-1, -1]'
  - inputs:
    - '[5,-3,-3]'
    output: '[5]'
  - inputs:
    - '[0,-1]'
    output: '[0]'
  - inputs:
    - '[-1,3,1,1]'
    output: '[-1]'
  - inputs:
    - '[-4,4,4,-5,-2]'
    output: '[-4]'
  - inputs:
    - '[-3,1,-5,6,1,6]'
    output: '[-3]'
  - inputs:
    - '[1,-3,2,6,0,-5]'
    output: '[1]'
  - inputs:
    - '[2,1,-5]'
    output: '[2]'
  - inputs:
    - '[-1,0]'
    output: '[-1]'
  - inputs:
    - '[0]'
    output: 'bottom'
  - inputs:
    - '[2,-1]'
    output: '[2]'
  - inputs:
    - '[-5,6,1,-2,3,-1]'
    output: '[-5]'
  - inputs:
    - '[1]'
    output: 'bottom'
  - inputs:
    - '[-5,-1,1,-1,0]'
    output: '[-5]'
  - inputs:
    - '[-2]'
    output: 'bottom'
  - inputs:
    - '[4,3,1]'
    output: '[4]'
  - inputs:
    - '[-5,5,-4]'
    output: '[-5]'
  - inputs:
    - '[1,2]'
    output: '[1]'
  control_examples:
  - inputs:
    - '[1,-3,2,6,0,-5]'
    output: '[1]'
  - inputs:
    - '[0]'
    output: 'bottom'
  - inputs:
    - '[-1]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[5,-6]'
    output: '[5]'
  - inputs:
    - '[4,3,1]'
    output: '[4]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-4,-5,6,-4,4]'
    output: '[-4]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-5,5,-4]'
    output: '[-5]'
  - inputs:
    - '[2,1,-5]'
    output: '[2]'
  - inputs:
    - '[-3,1,-5,6,1,6]'
    output: '[-3]'
  - inputs:
    - '[1,0]'
    output: '[1]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[2,0]'
    output: '[2]'
  - inputs:
    - '[-1]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-1,0]'
    output: '[-1]'
  - inputs:
    - '[1,2]'
    output: '[1]'
  - inputs:
    - '[5,-3,-3]'
    output: '[5]'
  - inputs:
    - '[-5,6,1,-2,3,-1]'
    output: '[-5]'
  - inputs:
    - '[-4,4,4,-5,-2]'
    output: '[-4]'
  - inputs:
    - '[-1]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[1,1,2]'
    output: '[1, 1]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-2,1]'
    output: '[-2]'
  - inputs:
    - '[4,-4,0,-1,6]'
    output: '[4]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-2]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[1]'
    output: 'bottom'
  - inputs:
    - '[2,-1]'
    output: '[2]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> map head (group xs)
  sorted_examples:
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1,-4,5,-3]'
    output: '[-1, -4, 5, -3]'
  - inputs:
    - '[3,2]'
    output: '[3, 2]'
  - inputs:
    - '[-1,3,1,4,0]'
    output: '[-1, 3, 1, 4, 0]'
  - inputs:
    - '[5,2,-1,4,4]'
    output: '[5, 2, -1, 4]'
  - inputs:
    - '[-4,0,0,-3]'
    output: '[-4, 0, -3]'
  - inputs:
    - '[0,-1]'
    output: '[0, -1]'
  - inputs:
    - '[-6,0,-2,3]'
    output: '[-6, 0, -2, 3]'
  - inputs:
    - '[-1,-1,2,3,3]'
    output: '[-1, 2, 3]'
  - inputs:
    - '[-4,4,1,-3,3]'
    output: '[-4, 4, 1, -3, 3]'
  - inputs:
    - '[3,3,-1,-4]'
    output: '[3, -1, -4]'
  - inputs:
    - '[4,-2,1,2]'
    output: '[4, -2, 1, 2]'
  - inputs:
    - '[3,0,0]'
    output: '[3, 0]'
  - inputs:
    - '[-1,-1,4,-6,-4]'
    output: '[-1, 4, -6, -4]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[-5,-4,-5,-5]'
    output: '[-5, -4, -5]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[-2,1]'
    output: '[-2, 1]'
  - inputs:
    - '[-2,-1]'
    output: '[-2, -1]'
  - inputs:
    - '[-2,-2]'
    output: '[-2]'
  - inputs:
    - '[2,0]'
    output: '[2, 0]'
  - inputs:
    - '[1,1]'
    output: '[1]'
  - inputs:
    - '[0,0,-3]'
    output: '[0, -3]'
  control_examples:
  - inputs:
    - '[2,0]'
    output: '[2, 0]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '[-3,2]'
    output: '[-3, 2]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-2,1]'
    output: '[-2, 1]'
  - inputs:
    - '[3,0,0]'
    output: '[3, 0]'
  - inputs:
    - '[0,0,-3]'
    output: '[0, -3]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-2,-1]'
    output: '[-2, -1]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[-5,-2,4,3]'
    output: '[-5, -2, 4, 3]'
  - inputs:
    - '[2]'
    output: '[2]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1,3,1,4,0]'
    output: '[-1, 3, 1, 4, 0]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1,-1,2,3,3]'
    output: '[-1, 2, 3]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1,-1,4,-6,-4]'
    output: '[-1, 4, -6, -4]'
  - inputs:
    - '[-2,-3,2]'
    output: '[-2, -3, 2]'
  - inputs:
    - '[3,2]'
    output: '[3, 2]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-5,-4,-5,-5]'
    output: '[-5, -4, -5]'
  - inputs:
    - '[]'
    output: '[]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> concat (init (group xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-5,6,1,-2,3,-1]'
    output: '[-5, 6, 1, -2, 3]'
  - inputs:
    - '[-1,3,0,0]'
    output: '[-1, 3]'
  - inputs:
    - '[-6,-5,-1,-2,1]'
    output: '[-6, -5, -1, -2]'
  - inputs:
    - '[5,0,4,-6,-1]'
    output: '[5, 0, 4, -6]'
  - inputs:
    - '[4,4,3]'
    output: '[4, 4]'
  - inputs:
    - '[-3,0,-6,5,6]'
    output: '[-3, 0, -6, 5]'
  - inputs:
    - '[-5,-5,0,5,2]'
    output: '[-5, -5, 0, 5]'
  - inputs:
    - '[4,1,1,1,3]'
    output: '[4, 1, 1, 1]'
  - inputs:
    - '[-5,-5,-2,4,-1]'
    output: '[-5, -5, -2, 4]'
  - inputs:
    - '[1,-4,0,-4,0]'
    output: '[1, -4, 0, -4]'
  - inputs:
    - '[-2,0]'
    output: '[-2]'
  - inputs:
    - '[3,-5,-2,1]'
    output: '[3, -5, -2]'
  - inputs:
    - '[1,1]'
    output: '[]'
  - inputs:
    - '[6,5,6,-4]'
    output: '[6, 5, 6]'
  - inputs:
    - '[0,1]'
    output: '[0]'
  - inputs:
    - '[0,0]'
    output: '[]'
  - inputs:
    - '[-4,4,4,-5,-2]'
    output: '[-4, 4, 4, -5]'
  - inputs:
    - '[-4,-3,1,1,-2]'
    output: '[-4, -3, 1, 1]'
  - inputs:
    - '[-2,3,3]'
    output: '[-2]'
  - inputs:
    - '[-1,5,-6]'
    output: '[-1, 5]'
  - inputs:
    - '[1,-3,0]'
    output: '[1, -3]'
  - inputs:
    - '[3,-4,-2,4,-3]'
    output: '[3, -4, -2, 4]'
  - inputs:
    - '[-6,3,-6,5,-4]'
    output: '[-6, 3, -6, 5]'
  - inputs:
    - '[-1,-1]'
    output: '[]'
  - inputs:
    - '[-4]'
    output: '[]'
  - inputs:
    - '[2,-2]'
    output: '[2]'
  - inputs:
    - '[-6,6]'
    output: '[-6]'
  - inputs:
    - '[1]'
    output: '[]'
  - inputs:
    - '[1,5,5]'
    output: '[1]'
  control_examples:
  - inputs:
    - '[0,1]'
    output: '[0]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[1,-3,0]'
    output: '[1, -3]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-2,0]'
    output: '[-2]'
  - inputs:
    - '[-3,0,-6,5,6]'
    output: '[-3, 0, -6, 5]'
  - inputs:
    - '[-5,-5,-2,4,-1]'
    output: '[-5, -5, -2, 4]'
  - inputs:
    - '[-2,3,3]'
    output: '[-2]'
  - inputs:
    - '[-1,3,0,0]'
    output: '[-1, 3]'
  - inputs:
    - '[3,-5,-2,1]'
    output: '[3, -5, -2]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[1,1]'
    output: '[]'
  - inputs:
    - '[-4,-3,1,1,-2]'
    output: '[-4, -3, 1, 1]'
  - inputs:
    - '[-5,6,1,-2,3,-1]'
    output: '[-5, 6, 1, -2, 3]'
  - inputs:
    - '[-1]'
    output: '[]'
  - inputs:
    - '[-5,-5,0,5,2]'
    output: '[-5, -5, 0, 5]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-6,-5,-1,-2,1]'
    output: '[-6, -5, -1, -2]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-1,5,-6]'
    output: '[-1, 5]'
  - inputs:
    - '[-3,2]'
    output: '[-3]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[-4,4,4,-5,-2]'
    output: '[-4, 4, 4, -5]'
  - inputs:
    - '[-1,-1]'
    output: '[]'
  - inputs:
    - '[6,5,6,-4]'
    output: '[6, 5, 6]'
  - inputs:
    - '[-4]'
    output: '[]'
  - inputs:
    - '[2,-2]'
    output: '[2]'
  - inputs:
    - '[-6,6]'
    output: '[-6]'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[1]'
    output: '[]'
  - inputs:
    - '[3,-4,-2,4,-3]'
    output: '[3, -4, -2, 4]'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (head (init xs))
  sorted_examples:
  - inputs:
    - '8'
    - '[]'
    output: 'bottom'
  - inputs:
    - '4'
    - '[Just 2,Just 9,Nothing,Just -1,Just 1]'
    output: '2'
  - inputs:
    - '4'
    - '[Just 6,Just 0]'
    output: '6'
  - inputs:
    - '4'
    - '[Nothing,Just 1,Nothing,Just 0,Nothing]'
    output: '4'
  - inputs:
    - '0'
    - '[Just 3,Just 4,Just 4,Nothing]'
    output: '3'
  - inputs:
    - '2'
    - '[Just 7,Nothing,Just 9,Just -2,Just -1]'
    output: '7'
  - inputs:
    - '10'
    - '[Just 9,Nothing,Nothing,Just 7]'
    output: '9'
  - inputs:
    - '2'
    - '[Just 0]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[Nothing,Just 8]'
    output: '0'
  - inputs:
    - '2'
    - '[Just 6,Nothing]'
    output: '6'
  - inputs:
    - '-2'
    - '[Just 1,Nothing,Just 6,Just 3]'
    output: '1'
  - inputs:
    - '4'
    - '[Just 2,Just 9,Just -2,Nothing,Just 9]'
    output: '2'
  - inputs:
    - '0'
    - '[Just 10,Just 2,Just 4]'
    output: '10'
  - inputs:
    - '2'
    - '[Just 9,Nothing,Just 6]'
    output: '9'
  - inputs:
    - '2'
    - '[Just 4,Just 8,Nothing]'
    output: '4'
  - inputs:
    - '3'
    - '[Nothing,Just 7,Just 2]'
    output: '3'
  control_examples:
  - inputs:
    - '4'
    - '[Nothing,Just 6,Just 3]'
    output: '4'
  - inputs:
    - '0'
    - '[Just 10,Just 2,Just 4]'
    output: '10'
  - inputs:
    - '5'
    - '[]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '4'
    - '[Just 6,Just 0]'
    output: '6'
  - inputs:
    - '8'
    - '[Just 1,Just 1]'
    output: '1'
  - inputs:
    - '1'
    - '[Just 0]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[Just 8]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[]'
    output: 'bottom'
  - inputs:
    - '4'
    - '[Just 2,Just 9,Just -2,Nothing,Just 9]'
    output: '2'
  - inputs:
    - '10'
    - '[Just -1]'
    output: 'bottom'
  - inputs:
    - '2'
    - '[Just 0]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '4'
    - '[]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[Nothing,Just 7,Just 2]'
    output: '3'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[Just 9,Nothing,Nothing,Just 7]'
    output: '9'
  - inputs:
    - '-1'
    - '[]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[Just 4]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[Just 6]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[Just 0]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[Just 5,Just 10,Just 1,Nothing,Just 1]'
    output: '5'
  - inputs:
    - '4'
    - '[Nothing,Just 1,Nothing,Just 0,Nothing]'
    output: '4'
  - inputs:
    - '4'
    - '[Just 2,Just 9,Nothing,Just -1,Just 1]'
    output: '2'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> bool x x (null xs)
  sorted_examples:
  - inputs:
    - '6'
    - '[Just -1]'
    output: '6'
  - inputs:
    - '7'
    - '[Just 6,Just 1,Just 9,Just 3,Just 8,Just 5]'
    output: '7'
  - inputs:
    - '-2'
    - '[Nothing,Just 1,Nothing,Just 7,Just 3]'
    output: '-2'
  - inputs:
    - '5'
    - '[Nothing,Just 4,Just 3]'
    output: '5'
  - inputs:
    - '0'
    - '[Just -1,Just 4,Just 7,Just 7]'
    output: '0'
  - inputs:
    - '10'
    - '[Nothing,Nothing,Just 2,Just -1,Nothing]'
    output: '10'
  - inputs:
    - '6'
    - '[Just 7,Just 0,Nothing]'
    output: '6'
  - inputs:
    - '1'
    - '[Just 10,Nothing,Just 5]'
    output: '1'
  - inputs:
    - '9'
    - '[Just 8,Nothing,Nothing]'
    output: '9'
  - inputs:
    - '8'
    - '[Just 1,Just 7,Just 2,Nothing]'
    output: '8'
  - inputs:
    - '2'
    - '[]'
    output: '2'
  - inputs:
    - '7'
    - '[Nothing,Just 6]'
    output: '7'
  - inputs:
    - '8'
    - '[Just 2,Just 6,Just 0]'
    output: '8'
  - inputs:
    - '2'
    - '[Nothing]'
    output: '2'
  control_examples:
  - inputs:
    - '-1'
    - '[]'
    output: '-1'
  - inputs:
    - '0'
    - '[]'
    output: '0'
  - inputs:
    - '10'
    - '[Nothing,Nothing,Just 2,Just -1,Nothing]'
    output: '10'
  - inputs:
    - '5'
    - '[Just 8,Nothing,Just 10]'
    output: '5'
  - inputs:
    - '4'
    - '[Just -1]'
    output: '4'
  - inputs:
    - '5'
    - '[]'
    output: '5'
  - inputs:
    - '8'
    - '[Just 6,Just -2]'
    output: '8'
  - inputs:
    - '2'
    - '[]'
    output: '2'
  - inputs:
    - '1'
    - '[Just 10,Nothing,Just 5]'
    output: '1'
  - inputs:
    - '10'
    - '[]'
    output: '10'
  - inputs:
    - '5'
    - '[]'
    output: '5'
  - inputs:
    - '4'
    - '[Just -1]'
    output: '4'
  - inputs:
    - '2'
    - '[]'
    output: '2'
  - inputs:
    - '4'
    - '[Just -2]'
    output: '4'
  - inputs:
    - '7'
    - '[Nothing,Just 6]'
    output: '7'
  - inputs:
    - '6'
    - '[]'
    output: '6'
  - inputs:
    - '2'
    - '[Nothing,Just 0]'
    output: '2'
  - inputs:
    - '2'
    - '[Just 2,Nothing]'
    output: '2'
  - inputs:
    - '6'
    - '[]'
    output: '6'
  - inputs:
    - '6'
    - '[Just 7,Just 0,Nothing]'
    output: '6'
  - inputs:
    - '2'
    - '[]'
    output: '2'
  - inputs:
    - '6'
    - '[Just -1]'
    output: '6'
  - inputs:
    - '2'
    - '[Just 5]'
    output: '2'
  - inputs:
    - '-1'
    - '[]'
    output: '-1'
  - inputs:
    - '8'
    - '[Just 1,Just 7,Just 2,Nothing]'
    output: '8'
  - inputs:
    - '5'
    - '[Nothing,Just 4,Just 3]'
    output: '5'
  - inputs:
    - '4'
    - '[]'
    output: '4'
  - inputs:
    - '8'
    - '[]'
    output: '8'
  - inputs:
    - '6'
    - '[]'
    output: '6'
  - inputs:
    - '-2'
    - '[]'
    output: '-2'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: '\x xs -> last (x : (catMaybes xs))'
  sorted_examples:
  - inputs:
    - '6'
    - '[Nothing,Just 5,Nothing]'
    output: '5'
  - inputs:
    - '9'
    - '[Just 8,Just 8,Just 3,Just 0,Just 8,Just 7]'
    output: '7'
  - inputs:
    - '0'
    - '[Just 5,Just 5,Nothing,Just 1,Just 4]'
    output: '4'
  - inputs:
    - '1'
    - '[Just 10,Just 6,Just 0]'
    output: '0'
  - inputs:
    - '0'
    - '[Just -2,Nothing,Just 7,Just 7,Nothing,Just -1]'
    output: '-1'
  - inputs:
    - '9'
    - '[]'
    output: '9'
  - inputs:
    - '-2'
    - '[Just 9,Nothing,Just 10,Nothing,Just 7,Nothing]'
    output: '7'
  - inputs:
    - '8'
    - '[Nothing,Just -1,Nothing,Nothing,Just -1]'
    output: '-1'
  - inputs:
    - '10'
    - '[Just -2]'
    output: '-2'
  - inputs:
    - '1'
    - '[Just 5,Just 8,Nothing]'
    output: '8'
  - inputs:
    - '4'
    - '[Nothing,Just 6,Just 3]'
    output: '3'
  - inputs:
    - '9'
    - '[Nothing,Nothing,Nothing]'
    output: '9'
  - inputs:
    - '-1'
    - '[Nothing,Nothing,Just 3]'
    output: '3'
  - inputs:
    - '0'
    - '[Just 8,Just -1,Just 10,Just 10]'
    output: '10'
  - inputs:
    - '4'
    - '[Nothing,Just 9]'
    output: '9'
  - inputs:
    - '-2'
    - '[Nothing,Just 3,Nothing,Just 0]'
    output: '0'
  - inputs:
    - '7'
    - '[Nothing,Just -1,Just 4,Nothing,Just 4,Just 7]'
    output: '7'
  - inputs:
    - '3'
    - '[Just 0,Nothing]'
    output: '0'
  control_examples:
  - inputs:
    - '1'
    - '[Just 10,Just 6,Just 0]'
    output: '0'
  - inputs:
    - '7'
    - '[]'
    output: '7'
  - inputs:
    - '0'
    - '[Just 7]'
    output: '7'
  - inputs:
    - '8'
    - '[]'
    output: '8'
  - inputs:
    - '7'
    - '[Nothing,Just -1,Just 4,Nothing,Just 4,Just 7]'
    output: '7'
  - inputs:
    - '-1'
    - '[Nothing,Nothing,Just 3]'
    output: '3'
  - inputs:
    - '0'
    - '[Just 0]'
    output: '0'
  - inputs:
    - '10'
    - '[]'
    output: '10'
  - inputs:
    - '-2'
    - '[Nothing,Just 3,Nothing,Just 0]'
    output: '0'
  - inputs:
    - '2'
    - '[Just 5]'
    output: '5'
  - inputs:
    - '3'
    - '[]'
    output: '3'
  - inputs:
    - '0'
    - '[Just 8,Just -1,Just 10,Just 10]'
    output: '10'
  - inputs:
    - '9'
    - '[]'
    output: '9'
  - inputs:
    - '9'
    - '[]'
    output: '9'
  - inputs:
    - '4'
    - '[Just -2]'
    output: '-2'
  - inputs:
    - '0'
    - '[]'
    output: '0'
  - inputs:
    - '1'
    - '[Just 5,Just 8,Nothing]'
    output: '8'
  - inputs:
    - '6'
    - '[Nothing,Just 5,Nothing]'
    output: '5'
  - inputs:
    - '4'
    - '[Nothing,Just 6,Just 3]'
    output: '3'
  - inputs:
    - '-1'
    - '[Just 9,Just 4,Just 8]'
    output: '8'
  - inputs:
    - '10'
    - '[Just -2]'
    output: '-2'
  - inputs:
    - '3'
    - '[]'
    output: '3'
  - inputs:
    - '6'
    - '[Nothing,Nothing]'
    output: '6'
  - inputs:
    - '4'
    - '[]'
    output: '4'
  - inputs:
    - '4'
    - '[Nothing]'
    output: '4'
  - inputs:
    - '5'
    - '[Just 9]'
    output: '9'
  - inputs:
    - '2'
    - '[]'
    output: '2'
  - inputs:
    - '10'
    - '[]'
    output: '10'
  - inputs:
    - '0'
    - '[]'
    output: '0'
  - inputs:
    - '2'
    - '[]'
    output: '2'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> head (replicate (length xs) x)
  sorted_examples:
  - inputs:
    - '-1'
    - '[Just 9]'
    output: '-1'
  - inputs:
    - '0'
    - '[Just 2,Just 5,Nothing,Just 2,Nothing,Nothing]'
    output: '0'
  - inputs:
    - '1'
    - '[Nothing,Just -2,Just 7,Just 4]'
    output: '1'
  - inputs:
    - '7'
    - '[Just 4,Just -1,Nothing]'
    output: '7'
  - inputs:
    - '8'
    - '[Nothing,Nothing,Nothing]'
    output: '8'
  - inputs:
    - '2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '6'
    - '[Just 8,Just 5,Nothing,Just 4,Just -1]'
    output: '6'
  - inputs:
    - '1'
    - '[Nothing,Just 1,Just -2]'
    output: '1'
  - inputs:
    - '6'
    - '[Nothing,Just 5,Nothing]'
    output: '6'
  - inputs:
    - '6'
    - '[Nothing,Just 7,Nothing,Just -1,Just 5]'
    output: '6'
  - inputs:
    - '0'
    - '[Just -2,Just -1,Just 7,Just -1]'
    output: '0'
  - inputs:
    - '7'
    - '[Just 9,Just 8]'
    output: '7'
  - inputs:
    - '1'
    - '[Just 2,Just -2,Just 6]'
    output: '1'
  - inputs:
    - '-1'
    - '[Nothing,Just 1]'
    output: '-1'
  - inputs:
    - '9'
    - '[Just 4,Nothing]'
    output: '9'
  control_examples:
  - inputs:
    - '6'
    - '[Just 4]'
    output: '6'
  - inputs:
    - '1'
    - '[Just 2,Just -2,Just 6]'
    output: '1'
  - inputs:
    - '3'
    - '[Just 10]'
    output: '3'
  - inputs:
    - '7'
    - '[Just -2,Just 7,Just 10]'
    output: '7'
  - inputs:
    - '10'
    - '[Just 8]'
    output: '10'
  - inputs:
    - '6'
    - '[Just 8,Just 5,Nothing,Just 4,Just -1]'
    output: '6'
  - inputs:
    - '2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '6'
    - '[Nothing,Just 5,Nothing]'
    output: '6'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[]'
    output: 'bottom'
  - inputs:
    - '2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[Just 8,Just 3,Just 6]'
    output: '9'
  - inputs:
    - '9'
    - '[]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[Just 6]'
    output: '10'
  - inputs:
    - '8'
    - '[Just 1,Just 1]'
    output: '8'
  - inputs:
    - '9'
    - '[Just 4,Nothing]'
    output: '9'
  - inputs:
    - '8'
    - '[]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[Just 9]'
    output: '-1'
  - inputs:
    - '2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[Nothing,Just 1,Just -2]'
    output: '1'
  - inputs:
    - '1'
    - '[Nothing,Just -2,Just 7,Just 4]'
    output: '1'
  - inputs:
    - '-2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[Just 9,Just 8]'
    output: '7'
  - inputs:
    - '8'
    - '[]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[Just 10,Just -1]'
    output: '10'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (head (tail xs))
  sorted_examples:
  - inputs:
    - '9'
    - '[Just 8,Nothing]'
    output: '9'
  - inputs:
    - '-2'
    - '[Just 2,Just 10,Just 6,Just 10,Just 6,Just 5]'
    output: '10'
  - inputs:
    - '-1'
    - '[Just 8,Just 1,Just 8,Nothing,Nothing]'
    output: '1'
  - inputs:
    - '-1'
    - '[Just -1,Nothing,Just 1,Nothing,Just -2]'
    output: '-1'
  - inputs:
    - '10'
    - '[Just 3,Just 6,Just -2,Just 8]'
    output: '6'
  - inputs:
    - '0'
    - '[Just 0]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[Nothing]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[Just 9,Just 10,Just -2]'
    output: '10'
  - inputs:
    - '4'
    - '[Nothing,Nothing]'
    output: '4'
  - inputs:
    - '1'
    - '[Just 9,Nothing,Just -1]'
    output: '1'
  - inputs:
    - '6'
    - '[Just 0,Just 1,Just 1,Just 8,Just 1]'
    output: '1'
  - inputs:
    - '6'
    - '[Just 7,Just 0,Nothing]'
    output: '0'
  - inputs:
    - '-1'
    - '[]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[Just 9,Just 8]'
    output: '8'
  - inputs:
    - '9'
    - '[Just 6,Just 0,Nothing,Just 3]'
    output: '0'
  - inputs:
    - '10'
    - '[Just 9,Nothing,Nothing,Just 7]'
    output: '10'
  - inputs:
    - '4'
    - '[Just 2,Just 9,Just -2,Nothing,Just 9]'
    output: '9'
  - inputs:
    - '5'
    - '[Just 4,Just 3,Just 5,Just 5,Nothing]'
    output: '3'
  - inputs:
    - '6'
    - '[Just -2,Nothing,Just 8,Just -1]'
    output: '6'
  control_examples:
  - inputs:
    - '-1'
    - '[Just -1,Nothing,Just 1,Nothing,Just -2]'
    output: '-1'
  - inputs:
    - '9'
    - '[Just 8,Nothing]'
    output: '9'
  - inputs:
    - '7'
    - '[Just 9,Just 8]'
    output: '8'
  - inputs:
    - '7'
    - '[Just 3]'
    output: 'bottom'
  - inputs:
    - '2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[Just 5]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[]'
    output: 'bottom'
  - inputs:
    - '4'
    - '[Just 2,Just 9,Just -2,Nothing,Just 9]'
    output: '9'
  - inputs:
    - '1'
    - '[Just 2,Just -2,Just 6]'
    output: '-2'
  - inputs:
    - '0'
    - '[Just 0]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[Just 9,Nothing,Nothing,Just 7]'
    output: '10'
  - inputs:
    - '10'
    - '[Just 3,Just 6,Just -2,Just 8]'
    output: '6'
  - inputs:
    - '7'
    - '[]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[]'
    output: 'bottom'
  - inputs:
    - '6'
    - '[]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[Just 8,Nothing]'
    output: '0'
  - inputs:
    - '-1'
    - '[Just 8,Just 1,Just 8,Nothing,Nothing]'
    output: '1'
  - inputs:
    - '1'
    - '[Just 9,Just 10,Just -2]'
    output: '10'
  - inputs:
    - '6'
    - '[Just 7,Just 0,Nothing]'
    output: '0'
  - inputs:
    - '10'
    - '[Nothing]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[Just 4,Just 3,Just 5,Just 5,Nothing]'
    output: '3'
  - inputs:
    - '0'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[Just 2]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[Just 2,Just 10,Just 6,Just 10,Just 6,Just 5]'
    output: '10'
  - inputs:
    - '-1'
    - '[Just 2,Just 3,Just 5]'
    output: '3'
  - inputs:
    - '-2'
    - '[Just 3,Just 2,Just 0,Just 3]'
    output: '2'
  - inputs:
    - '-2'
    - '[]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[]'
    output: 'bottom'
  - inputs:
    - '4'
    - '[]'
    output: 'bottom'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> foldl (head []) x xs
  sorted_examples:
  - inputs:
    - '0'
    - '[Just 1,Nothing,Just -1,Nothing,Just 10]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[]'
    output: '8'
  - inputs:
    - '4'
    - '[Nothing,Nothing,Nothing,Just 7,Just 5,Nothing]'
    output: 'bottom'
  - inputs:
    - '2'
    - '[Nothing,Just -2,Just 4,Just 10,Just 1]'
    output: 'bottom'
  - inputs:
    - '6'
    - '[Just -1,Nothing,Just 3]'
    output: 'bottom'
  - inputs:
    - '6'
    - '[Just 9,Just 0,Just 2,Nothing,Just 4,Just 7]'
    output: 'bottom'
  - inputs:
    - '2'
    - '[Just 6,Just -2,Just 7,Nothing]'
    output: 'bottom'
  - inputs:
    - '2'
    - '[Just 7,Nothing,Nothing,Nothing]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[Nothing,Just 1,Just -2]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[Just 8]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[Just 2,Nothing,Just 7,Just 2,Just 8]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[Nothing,Nothing,Just 3]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[Nothing,Nothing,Just 2,Just 6]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[Just 9,Just 0]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[Nothing,Just 6]'
    output: 'bottom'
  - inputs:
    - '7'
    - '[Nothing,Just -1,Just 4,Nothing,Just 4,Just 7]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[Just 10,Just 2,Just 4]'
    output: 'bottom'
  control_examples:
  - inputs:
    - '5'
    - '[Nothing]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[]'
    output: '1'
  - inputs:
    - '9'
    - '[]'
    output: '9'
  - inputs:
    - '7'
    - '[]'
    output: '7'
  - inputs:
    - '7'
    - '[Nothing,Just -1,Just 4,Nothing,Just 4,Just 7]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[Just 5,Nothing,Just 7]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[]'
    output: '8'
  - inputs:
    - '4'
    - '[]'
    output: '4'
  - inputs:
    - '1'
    - '[Just 9,Just 10,Just -2]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[]'
    output: '-2'
  - inputs:
    - '0'
    - '[Just 10,Just 2,Just 4]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[Nothing,Just 1,Just -2]'
    output: 'bottom'
  - inputs:
    - '3'
    - '[Just 0,Just 2,Nothing,Just 6,Just 5]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[Just 9,Just 0]'
    output: 'bottom'
  - inputs:
    - '0'
    - '[Just 1,Nothing,Just -1,Nothing,Just 10]'
    output: 'bottom'
  - inputs:
    - '-1'
    - '[Nothing,Nothing,Just 3]'
    output: 'bottom'
  - inputs:
    - '6'
    - '[Just -1]'
    output: 'bottom'
  - inputs:
    - '8'
    - '[Just -1,Just 0,Just 5,Just -1,Just 2]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[Just 2,Nothing,Just 6]'
    output: 'bottom'
  - inputs:
    - '9'
    - '[]'
    output: '9'
  - inputs:
    - '10'
    - '[Just 7,Just 7,Just 1]'
    output: 'bottom'
  - inputs:
    - '6'
    - '[]'
    output: '6'
  - inputs:
    - '0'
    - '[Just 0,Nothing]'
    output: 'bottom'
  - inputs:
    - '-2'
    - '[]'
    output: '-2'
  - inputs:
    - '7'
    - '[Nothing,Just 6]'
    output: 'bottom'
  - inputs:
    - '10'
    - '[]'
    output: '10'
  - inputs:
    - '6'
    - '[Nothing,Nothing,Nothing,Just 9]'
    output: 'bottom'
  - inputs:
    - '1'
    - '[]'
    output: '1'
  - inputs:
    - '9'
    - '[Just 8]'
    output: 'bottom'
  - inputs:
    - '5'
    - '[Just -1,Just 1,Just 10,Just 10]'
    output: 'bottom'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (listToMaybe (catMaybes xs))
  sorted_examples:
  - inputs:
    - '-1'
    - '[Just 7,Just -1,Nothing]'
    output: '7'
  - inputs:
    - '6'
    - '[Just 7,Nothing,Just 5,Just 1,Just 5,Just -1]'
    output: '7'
  - inputs:
    - '-2'
    - '[Nothing,Just 3,Nothing,Just 0]'
    output: '3'
  - inputs:
    - '1'
    - '[]'
    output: '1'
  - inputs:
    - '2'
    - '[Just 3,Just -2,Just 5,Just 0,Nothing]'
    output: '3'
  - inputs:
    - '6'
    - '[Nothing,Just 9,Just 0,Just 0]'
    output: '9'
  - inputs:
    - '1'
    - '[Nothing,Just -2,Nothing]'
    output: '-2'
  - inputs:
    - '0'
    - '[Nothing,Nothing,Nothing]'
    output: '0'
  - inputs:
    - '5'
    - '[Just 2,Nothing,Nothing,Just 2,Nothing]'
    output: '2'
  - inputs:
    - '6'
    - '[Just 7,Just 4,Just 8,Just 2,Nothing,Just 4]'
    output: '7'
  - inputs:
    - '0'
    - '[Just 1,Nothing,Just -1,Nothing,Just 10]'
    output: '1'
  - inputs:
    - '8'
    - '[Just 1,Just 7,Just 2,Nothing]'
    output: '1'
  - inputs:
    - '0'
    - '[Just 8,Nothing]'
    output: '8'
  - inputs:
    - '6'
    - '[Nothing]'
    output: '6'
  - inputs:
    - '3'
    - '[Just 2,Nothing,Just 3]'
    output: '2'
  - inputs:
    - '5'
    - '[Nothing,Just 4,Just 3]'
    output: '4'
  - inputs:
    - '2'
    - '[Just 0]'
    output: '0'
  - inputs:
    - '5'
    - '[Just 9,Just 0]'
    output: '9'
  - inputs:
    - '0'
    - '[Just 8,Just -1,Just 10,Just 10]'
    output: '8'
  control_examples:
  - inputs:
    - '10'
    - '[]'
    output: '10'
  - inputs:
    - '3'
    - '[Nothing,Just 9]'
    output: '9'
  - inputs:
    - '0'
    - '[Just 8,Nothing]'
    output: '8'
  - inputs:
    - '4'
    - '[]'
    output: '4'
  - inputs:
    - '2'
    - '[Just 8,Nothing]'
    output: '8'
  - inputs:
    - '0'
    - '[Just 1,Nothing,Just -1,Nothing,Just 10]'
    output: '1'
  - inputs:
    - '8'
    - '[]'
    output: '8'
  - inputs:
    - '5'
    - '[Nothing,Just 4,Just 3]'
    output: '4'
  - inputs:
    - '-2'
    - '[Just 8,Just 3,Just 2,Just 4]'
    output: '8'
  - inputs:
    - '6'
    - '[Nothing]'
    output: '6'
  - inputs:
    - '0'
    - '[]'
    output: '0'
  - inputs:
    - '0'
    - '[]'
    output: '0'
  - inputs:
    - '9'
    - '[Nothing,Just 7,Just 1,Just 6]'
    output: '7'
  - inputs:
    - '2'
    - '[]'
    output: '2'
  - inputs:
    - '9'
    - '[Just 8,Nothing]'
    output: '8'
  - inputs:
    - '5'
    - '[Just 9,Just 0]'
    output: '9'
  - inputs:
    - '8'
    - '[Just 1,Just 7,Just 2,Nothing]'
    output: '1'
  - inputs:
    - '1'
    - '[Nothing,Just -2,Nothing]'
    output: '-2'
  - inputs:
    - '0'
    - '[Just 8,Just -1,Just 10,Just 10]'
    output: '8'
  - inputs:
    - '3'
    - '[]'
    output: '3'
  - inputs:
    - '1'
    - '[]'
    output: '1'
  - inputs:
    - '9'
    - '[Just 4,Nothing]'
    output: '4'
  - inputs:
    - '-1'
    - '[Just 7,Just -1,Nothing]'
    output: '7'
  - inputs:
    - '6'
    - '[Nothing,Just 9,Just 0,Just 0]'
    output: '9'
  - inputs:
    - '3'
    - '[]'
    output: '3'
  - inputs:
    - '5'
    - '[Just 8,Just 10]'
    output: '8'
  - inputs:
    - '-2'
    - '[Nothing,Just 3,Nothing,Just 0]'
    output: '3'
  - inputs:
    - '1'
    - '[]'
    output: '1'
  - inputs:
    - '2'
    - '[Just 0]'
    output: '0'
  - inputs:
    - '-2'
    - '[]'
    output: '-2'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last (tail es)
  sorted_examples:
  - inputs:
    - '[Right "d"]'
    output: 'bottom'
  - inputs:
    - '[Left -1,Right "dada",Left 4,Left 3,Right "bc",Right "aaccac"]'
    output: Right "aaccac"
  - inputs:
    - '[Right "bccb",Right "",Right "",Left 9]'
    output: Left 9
  - inputs:
    - '[Left 5,Left -2,Right "c"]'
    output: Right "c"
  - inputs:
    - '[Right "ad",Left 10,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "ab",Right "abaccd",Right "adcdd",Left 9,Right "abdcab",Left 1]'
    output: Left 1
  - inputs:
    - '[Left 4,Left 10,Right "cba",Right "dba",Right "dbbdbc"]'
    output: Right "dbbdbc"
  - inputs:
    - '[Right "abadbd",Left 0,Left 4,Left 6,Left 8]'
    output: Left 8
  - inputs:
    - '[Right "cad",Right "caad"]'
    output: Right "caad"
  - inputs:
    - '[Right "acb",Right "",Right "cca",Left 5,Right ""]'
    output: Right ""
  - inputs:
    - '[Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[Left 7,Right "ddbb",Right "a",Left 4,Left 0,Left 0]'
    output: Left 0
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "",Right "c",Right "a",Right "da"]'
    output: Right "da"
  - inputs:
    - '[Left 0,Right "cab",Left 5,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "aadc",Right "",Right "ba"]'
    output: Right "ba"
  - inputs:
    - '[Left 1,Right "bcb",Left 2]'
    output: Left 2
  - inputs:
    - '[Left 0,Left 6]'
    output: Left 6
  - inputs:
    - '[Right "caca",Right "dbbab",Right "adcbd",Right "ddccc",Right "abbc"]'
    output: Right "abbc"
  - inputs:
    - '[Left 6,Left 0,Left -2]'
    output: Left -2
  - inputs:
    - '[Left 9]'
    output: 'bottom'
  - inputs:
    - '[Left 2,Right "adc",Right "bbbda"]'
    output: Right "bbbda"
  - inputs:
    - '[Left 10,Right "dcbb",Right "",Left 6]'
    output: Left 6
  - inputs:
    - '[Right "",Right "bd",Left 9]'
    output: Left 9
  - inputs:
    - '[Left 0,Right ""]'
    output: Right ""
  control_examples:
  - inputs:
    - '[Right "d"]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[Left 10,Right "dcbb",Right "",Left 6]'
    output: Left 6
  - inputs:
    - '[Right "b",Left 2]'
    output: Left 2
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[Right "d"]'
    output: 'bottom'
  - inputs:
    - '[Right "",Right "bd",Left 9]'
    output: Left 9
  - inputs:
    - '[Left 2]'
    output: 'bottom'
  - inputs:
    - '[Right "ad",Left 8]'
    output: Left 8
  - inputs:
    - '[Left 1,Right "bcb",Left 2]'
    output: Left 2
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "aadc",Right "",Right "ba"]'
    output: Right "ba"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9]'
    output: 'bottom'
  - inputs:
    - '[Right "ab",Right "abaccd",Right "adcdd",Left 9,Right "abdcab",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[Left -1,Right "dada",Left 4,Left 3,Right "bc",Right "aaccac"]'
    output: Right "aaccac"
  - inputs:
    - '[Left 4,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 0,Left 6]'
    output: Left 6
  - inputs:
    - '[Left 7,Right "ddbb",Right "a",Left 4,Left 0,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 0,Right ""]'
    output: Right ""
  - inputs:
    - '[Left 5,Left -2,Right "c"]'
    output: Right "c"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[Left 8]'
    output: 'bottom'
  - inputs:
    - '[Right "caca",Right "dbbab",Right "adcbd",Right "ddccc",Right "abbc"]'
    output: Right "abbc"
  - inputs:
    - '[Right "acb",Right "",Right "cca",Left 5,Right ""]'
    output: Right ""
  - inputs:
    - '[Right "",Right "c",Right "a",Right "da"]'
    output: Right "da"
  - inputs:
    - '[Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 8,Right "ca"]'
    output: Right "ca"
  - inputs:
    - '[Left 6,Left 0,Left -2]'
    output: Left -2
  - inputs:
    - '[Right "abadbd",Left 0,Left 4,Left 6,Left 8]'
    output: Left 8
  - inputs:
    - '[Right "ad",Left 10,Left 5]'
    output: Left 5
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[Left 2,Right "adc",Right "bbbda"]'
    output: Right "bbbda"
  - inputs:
    - '[Left 4]'
    output: 'bottom'
  - inputs:
    - '[Right "cad",Right "caad"]'
    output: Right "caad"
  - inputs:
    - '[Left 4,Left 10,Right "cba",Right "dba",Right "dbbdbc"]'
    output: Right "dbbdbc"
  - inputs:
    - '[]'
    output: 'bottom'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> Right (last (rights es))
  sorted_examples:
  - inputs:
    - '[Left 9,Left 7,Left 3]'
    output: 'bottom'
  - inputs:
    - '[Left -1,Right "cdbc",Left 6,Right "ddc",Right "b",Right "dcbdba"]'
    output: Right "dcbdba"
  - inputs:
    - '[Right "aacb"]'
    output: Right "aacb"
  - inputs:
    - '[Right "",Right "ba",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "cbbb",Left 4,Left 10,Left -2,Left 8,Right "cdbb"]'
    output: Right "cdbb"
  - inputs:
    - '[Right "badda",Left -1,Right "",Left 4,Right "abbcd"]'
    output: Right "abbcd"
  - inputs:
    - '[Left -2,Left -2,Right "a",Left 10,Right "a",Right "adaab"]'
    output: Right "adaab"
  - inputs:
    - '[Left 4,Left 5,Left 10,Left 10,Left 7]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "ddba",Right "ccc",Left 8,Right "bbcdbc",Left 8]'
    output: Right "bbcdbc"
  - inputs:
    - '[Left -2,Left 8,Right "cca",Right "aadddd"]'
    output: Right "aadddd"
  - inputs:
    - '[Right "",Left 8,Left 0]'
    output: Right ""
  - inputs:
    - '[Right "bba",Right "ccc",Right "ca",Right "caad",Right "cc"]'
    output: Right "cc"
  - inputs:
    - '[Right "cd",Left 7,Left 3,Left -1,Right "ad",Left 9]'
    output: Right "ad"
  - inputs:
    - '[Left 8,Left 1,Right "db",Left -1,Left 7]'
    output: Right "db"
  - inputs:
    - '[Left 4,Left 0]'
    output: 'bottom'
  - inputs:
    - '[Left 6,Left 0,Right "bbaaab"]'
    output: Right "bbaaab"
  - inputs:
    - '[Left 5,Left 5,Right "ad",Right "ddd",Right "ddc"]'
    output: Right "ddc"
  - inputs:
    - '[Left 7,Right "aadbd"]'
    output: Right "aadbd"
  - inputs:
    - '[Right "",Left 6]'
    output: Right ""
  - inputs:
    - '[Left -2]'
    output: 'bottom'
  - inputs:
    - '[Right "bca",Left 3,Right "adbdc",Left 5]'
    output: Right "adbdc"
  - inputs:
    - '[Right "dddad",Right "",Right "bdbbdc",Right "dadaa"]'
    output: Right "dadaa"
  - inputs:
    - '[Right "",Left 5,Right "b",Right "ccc"]'
    output: Right "ccc"
  - inputs:
    - '[Left 1,Right "ba",Right "ddcb"]'
    output: Right "ddcb"
  - inputs:
    - '[Right "abb",Left 10,Left -2,Right "adba",Left -2,Right ""]'
    output: Right ""
  - inputs:
    - '[Right "",Right "bbd",Left 1]'
    output: Right "bbd"
  - inputs:
    - '[Left 5,Right "dd",Left -2,Left 3,Right "dbbdbd",Right ""]'
    output: Right ""
  control_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 7]'
    output: 'bottom'
  - inputs:
    - '[Left 8,Left 1,Right "db",Left -1,Left 7]'
    output: Right "db"
  - inputs:
    - '[Left 9]'
    output: 'bottom'
  - inputs:
    - '[Right "dda",Left 7]'
    output: Right "dda"
  - inputs:
    - '[Right "",Left 8,Left 0]'
    output: Right ""
  - inputs:
    - '[Left 4,Left 5,Left 10,Left 10,Left 7]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Left 0]'
    output: 'bottom'
  - inputs:
    - '[Left 4,Left 0]'
    output: 'bottom'
  - inputs:
    - '[Left 9]'
    output: 'bottom'
  - inputs:
    - '[Left 1,Right "ba",Right "ddcb"]'
    output: Right "ddcb"
  - inputs:
    - '[Left -1,Right "cdbc",Left 6,Right "ddc",Right "b",Right "dcbdba"]'
    output: Right "dcbdba"
  - inputs:
    - '[Right "ddba",Right "ccc",Left 8,Right "bbcdbc",Left 8]'
    output: Right "bbcdbc"
  - inputs:
    - '[Left 7,Right "aadbd"]'
    output: Right "aadbd"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left 6]'
    output: Right ""
  - inputs:
    - '[Left 5,Right "dd",Left -2,Left 3,Right "dbbdbd",Right ""]'
    output: Right ""
  - inputs:
    - '[Left 4,Left 4,Left 6]'
    output: 'bottom'
  - inputs:
    - '[Left 5,Left 5,Right "ad",Right "ddd",Right "ddc"]'
    output: Right "ddc"
  - inputs:
    - '[Right "cbbb",Left 4,Left 10,Left -2,Left 8,Right "cdbb"]'
    output: Right "cdbb"
  - inputs:
    - '[Left -2]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "adcabd",Right "dcad",Left 9,Right "",Left 9]'
    output: Right ""
  - inputs:
    - '[Right "badda",Left -1,Right "",Left 4,Right "abbcd"]'
    output: Right "abbcd"
  - inputs:
    - '[Right "",Right "bbd",Left 1]'
    output: Right "bbd"
  - inputs:
    - '[Right "",Left 6]'
    output: Right ""
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "bca",Left 3,Right "adbdc",Left 5]'
    output: Right "adbdc"
  - inputs:
    - '[Right "aacb"]'
    output: Right "aacb"
  - inputs:
    - '[Left 9,Left 7,Left 3]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left 5,Right "b",Right "ccc"]'
    output: Right "ccc"
  - inputs:
    - '[Right "dddad",Right "",Right "bdbbdc",Right "dadaa"]'
    output: Right "dadaa"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Left 6,Left 0,Right "bbaaab"]'
    output: Right "bbaaab"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "abb",Left 10,Left -2,Right "adba",Left -2,Right ""]'
    output: Right ""
  - inputs:
    - '[Left -2,Left 8,Right "cca",Right "aadddd"]'
    output: Right "aadddd"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "bba",Right "ccc",Right "ca",Right "caad",Right "cc"]'
    output: Right "cc"
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> head es
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "dd",Left 5,Right "cbd",Left -2,Right "aca",Left 1]'
    output: Right "dd"
  - inputs:
    - '[Left 9,Right "ddba",Right "aacd"]'
    output: Left 9
  - inputs:
    - '[Right "dbc",Left 7]'
    output: Right "dbc"
  - inputs:
    - '[Right "cb",Right "dcca",Right "",Right "cdad"]'
    output: Right "cb"
  - inputs:
    - '[Left -1,Right "cdbc",Left 6,Right "ddc",Right "b",Right "dcbdba"]'
    output: Left -1
  - inputs:
    - '[Left 3,Right "caa",Right "a",Left 2,Left -2]'
    output: Left 3
  - inputs:
    - '[Right "d",Left 9,Left 5,Left 5]'
    output: Right "d"
  - inputs:
    - '[Left 10]'
    output: Left 10
  - inputs:
    - '[Right "abcac",Right "ddc",Left 4,Left 9,Left 0]'
    output: Right "abcac"
  - inputs:
    - '[Left 9,Right "bdaaaa"]'
    output: Left 9
  - inputs:
    - '[Right "db",Left -2,Right "ccd"]'
    output: Right "db"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Left -2,Right "aaa",Right "aba",Right "b",Right ""]'
    output: Left -2
  - inputs:
    - '[Left 2,Left 7,Left -2]'
    output: Left 2
  - inputs:
    - '[Left 4,Right "",Left -2,Right "b"]'
    output: Left 4
  - inputs:
    - '[Right "bca",Left 3,Left 10,Right "cacacb"]'
    output: Right "bca"
  - inputs:
    - '[Right "aacdcb",Right "cddbdc"]'
    output: Right "aacdcb"
  - inputs:
    - '[Right "bacd",Right "add",Left 4,Right "cabb"]'
    output: Right "bacd"
  - inputs:
    - '[Left 0,Left 8]'
    output: Left 0
  - inputs:
    - '[Left 5,Left -2,Right "c"]'
    output: Left 5
  - inputs:
    - '[Left -2,Right "c",Right "d",Left 0,Right "d"]'
    output: Left -2
  - inputs:
    - '[Right "abc",Left 4,Right "a",Left 0]'
    output: Right "abc"
  - inputs:
    - '[Right "bbc",Right "bc",Left -1,Left 4]'
    output: Right "bbc"
  - inputs:
    - '[Right "dbb",Left -1,Left 8]'
    output: Right "dbb"
  - inputs:
    - '[Left 10,Right "cddaa",Left 10]'
    output: Left 10
  control_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 5,Left -2,Right "c"]'
    output: Left 5
  - inputs:
    - '[Left 4,Right "",Left -2,Right "b"]'
    output: Left 4
  - inputs:
    - '[Right "",Left 5]'
    output: Right ""
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "daadc"]'
    output: Right "daadc"
  - inputs:
    - '[Right "dbb",Left -1,Left 8]'
    output: Right "dbb"
  - inputs:
    - '[Left 1,Right "",Left -2]'
    output: Left 1
  - inputs:
    - '[Right "dd",Left 5,Right "cbd",Left -2,Right "aca",Left 1]'
    output: Right "dd"
  - inputs:
    - '[Right "db",Left -2,Right "ccd"]'
    output: Right "db"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Left 10]'
    output: Left 10
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Right "aaa",Right "aba",Right "b",Right ""]'
    output: Left -2
  - inputs:
    - '[Left 2,Left 7,Left -2]'
    output: Left 2
  - inputs:
    - '[Right "daa",Right "",Left 9,Right "d"]'
    output: Right "daa"
  - inputs:
    - '[Right "bbab"]'
    output: Right "bbab"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "bca",Left 3,Left 10,Right "cacacb"]'
    output: Right "bca"
  - inputs:
    - '[Right "bacd",Right "add",Left 4,Right "cabb"]'
    output: Right "bacd"
  - inputs:
    - '[Left -2]'
    output: Left -2
  - inputs:
    - '[Left -1,Right "cdbc",Left 6,Right "ddc",Right "b",Right "dcbdba"]'
    output: Left -1
  - inputs:
    - '[Right "dbc",Left 7]'
    output: Right "dbc"
  - inputs:
    - '[Right "abcac",Right "ddc",Left 4,Left 9,Left 0]'
    output: Right "abcac"
  - inputs:
    - '[Left 7,Right "cb",Left -1]'
    output: Left 7
  - inputs:
    - '[Right "aacdcb",Right "cddbdc"]'
    output: Right "aacdcb"
  - inputs:
    - '[Left -2,Right "c",Right "d",Left 0,Right "d"]'
    output: Left -2
  - inputs:
    - '[Right "ba",Left 5]'
    output: Right "ba"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "d",Left 9,Left 5,Left 5]'
    output: Right "d"
  - inputs:
    - '[Left 1]'
    output: Left 1
  - inputs:
    - '[Left 10,Right "cddaa",Left 10]'
    output: Left 10
  - inputs:
    - '[Left 8,Left 3,Right "cd"]'
    output: Left 8
  - inputs:
    - '[Left 4]'
    output: Left 4
  - inputs:
    - '[Left 0,Left 8,Right "c"]'
    output: Left 0
  - inputs:
    - '[Left -2]'
    output: Left -2
  - inputs:
    - '[Left 9,Right "bdaaaa"]'
    output: Left 9
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last es
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "bccac",Left -1,Left 2,Right "",Right "acbdbd",Right "dcacb"]'
    output: Right "dcacb"
  - inputs:
    - '[Right "c",Right "",Right "a"]'
    output: Right "a"
  - inputs:
    - '[Left 9,Left -2]'
    output: Left -2
  - inputs:
    - '[Right "d"]'
    output: Right "d"
  - inputs:
    - '[Left 4,Right "cac",Left 1,Left 10,Right "dd",Left 1]'
    output: Left 1
  - inputs:
    - '[Left 0,Right "d",Left 9,Right "ada",Right "ccdd"]'
    output: Right "ccdd"
  - inputs:
    - '[Right "d",Left 9,Right "bc",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "a",Right "bdbcab",Left 4,Left 5,Right "bbccab"]'
    output: Right "bbccab"
  - inputs:
    - '[Right "",Right "ab",Right "a",Right "ca",Left 2,Right ""]'
    output: Right ""
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[Left 0,Left 10,Left 2,Left -1]'
    output: Left -1
  - inputs:
    - '[Left -2,Right "c",Right "d",Left 0,Right "d"]'
    output: Right "d"
  - inputs:
    - '[Left 9,Left -2,Right "cdd"]'
    output: Right "cdd"
  - inputs:
    - '[Right "acdadb",Right "babc",Right "dd",Right "cdccd"]'
    output: Right "cdccd"
  - inputs:
    - '[Left 1,Right "acba",Left -2,Right ""]'
    output: Right ""
  - inputs:
    - '[Left -2,Right ""]'
    output: Right ""
  - inputs:
    - '[Right "abcdda",Left 6,Right "d",Left 1,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 4,Left 4,Left 6]'
    output: Left 6
  - inputs:
    - '[Right "dbac",Left -2,Right "cd",Right "bddd",Right "da"]'
    output: Right "da"
  - inputs:
    - '[Right "",Right "bbdac"]'
    output: Right "bbdac"
  - inputs:
    - '[Right "cbc",Left 7,Right "acc"]'
    output: Right "acc"
  - inputs:
    - '[Right "ca",Left 5]'
    output: Left 5
  - inputs:
    - '[Left 6,Left 5,Right "ddbb",Left 3]'
    output: Left 3
  - inputs:
    - '[Right "bacd",Right "add",Left 4,Right "cabb"]'
    output: Right "cabb"
  control_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 1,Right ""]'
    output: Right ""
  - inputs:
    - '[Left 4,Left 4,Left 6]'
    output: Left 6
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Left 6,Left 5,Right "ddbb",Left 3]'
    output: Left 3
  - inputs:
    - '[Left 9,Left -2]'
    output: Left -2
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 2,Right "c"]'
    output: Right "c"
  - inputs:
    - '[Right "bacd",Right "add",Left 4,Right "cabb"]'
    output: Right "cabb"
  - inputs:
    - '[Right "aaba"]'
    output: Right "aaba"
  - inputs:
    - '[Left -2,Right ""]'
    output: Right ""
  - inputs:
    - '[Left 9,Left -2,Right "cdd"]'
    output: Right "cdd"
  - inputs:
    - '[Left 4]'
    output: Left 4
  - inputs:
    - '[Right "d"]'
    output: Right "d"
  - inputs:
    - '[Right "cbc",Left 7,Right "acc"]'
    output: Right "acc"
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[Right "ca",Left 5]'
    output: Left 5
  - inputs:
    - '[Right "d"]'
    output: Right "d"
  - inputs:
    - '[Right "",Left 6]'
    output: Left 6
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Left 4]'
    output: Left 4
  - inputs:
    - '[Right "bccac",Left -1,Left 2,Right "",Right "acbdbd",Right "dcacb"]'
    output: Right "dcacb"
  - inputs:
    - '[Right "dbac",Left -2,Right "cd",Right "bddd",Right "da"]'
    output: Right "da"
  - inputs:
    - '[Left 4,Right "cac",Left 1,Left 10,Right "dd",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "ab",Left 5]'
    output: Left 5
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[Left 0,Right "d",Left 9,Right "ada",Right "ccdd"]'
    output: Right "ccdd"
  - inputs:
    - '[Left 7,Right "bbd",Right "ac"]'
    output: Right "ac"
  - inputs:
    - '[Left 3]'
    output: Left 3
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "dac",Right "bca"]'
    output: Right "bca"
  - inputs:
    - '[Right "",Right "bbdac"]'
    output: Right "bbdac"
  - inputs:
    - '[Right "c"]'
    output: Right "c"
  - inputs:
    - '[Left 4,Right "bb"]'
    output: Right "bb"
  - inputs:
    - '[Left 5,Left 9,Left 2]'
    output: Left 2
  - inputs:
    - '[Left -2,Right "c",Right "d",Left 0,Right "d"]'
    output: Right "d"
  - inputs:
    - '[Right "abcdda",Left 6,Right "d",Left 1,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 0,Left 10,Left 2,Left -1]'
    output: Left -1
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> Right (head (rights es))
  sorted_examples:
  - inputs:
    - '[Left 8]'
    output: 'bottom'
  - inputs:
    - '[Right "bbbdc",Left 7,Left 1,Left 4,Left 8,Right "d"]'
    output: Right "bbbdc"
  - inputs:
    - '[Left 0,Left 8,Right "c"]'
    output: Right "c"
  - inputs:
    - '[Left 6,Left 6,Left 2,Left 1]'
    output: 'bottom'
  - inputs:
    - '[Right "dbac",Left -2,Right "cd",Right "bddd",Right "da"]'
    output: Right "dbac"
  - inputs:
    - '[Right "da",Left 0,Left 4]'
    output: Right "da"
  - inputs:
    - '[Right "baa",Right "cdada",Left 5,Right "dbdbb",Left 4]'
    output: Right "baa"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Left 7,Right "a"]'
    output: Right "a"
  - inputs:
    - '[Right "cab",Right "c",Right "ad"]'
    output: Right "cab"
  - inputs:
    - '[Right "a",Right "dbcaa",Right "bbab",Left 9,Left 7]'
    output: Right "a"
  - inputs:
    - '[Left 1,Right "aa",Left 1,Right "caca"]'
    output: Right "aa"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 10,Left 5,Left 9,Left 10,Right "dbbcbb"]'
    output: Right "dbbcbb"
  - inputs:
    - '[Right "",Left 1,Right "db",Right "d"]'
    output: Right ""
  - inputs:
    - '[Left 4,Left 2]'
    output: 'bottom'
  - inputs:
    - '[Left 5,Left 8,Right "ccccb",Left 1]'
    output: Right "ccccb"
  - inputs:
    - '[Left 1,Right "bcb",Left 2]'
    output: Right "bcb"
  - inputs:
    - '[Right "adcbad",Left 9,Right "bd",Left 5,Right "cca",Right ""]'
    output: Right "adcbad"
  - inputs:
    - '[Right "",Right "",Left -2]'
    output: Right ""
  - inputs:
    - '[Right "ac",Right ""]'
    output: Right "ac"
  - inputs:
    - '[Left 8,Left 9,Left 6,Right "c"]'
    output: Right "c"
  - inputs:
    - '[Right "bba",Right "ccc",Right "ca",Right "caad",Right "cc"]'
    output: Right "bba"
  control_examples:
  - inputs:
    - '[Left 3,Left 5]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "bbbdc",Left 7,Left 1,Left 4,Left 8,Right "d"]'
    output: Right "bbbdc"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 7,Right "cb",Left -1]'
    output: Right "cb"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "ddba",Right "ccc",Left 8,Right "bbcdbc",Left 8]'
    output: Right "ddba"
  - inputs:
    - '[Left 9,Left -2,Left 10,Left 5]'
    output: 'bottom'
  - inputs:
    - '[Left 4,Left 2]'
    output: 'bottom'
  - inputs:
    - '[Right "",Right "",Left -2]'
    output: Right ""
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "dbac",Left -2,Right "cd",Right "bddd",Right "da"]'
    output: Right "dbac"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "cab",Right "c",Right "ad"]'
    output: Right "cab"
  - inputs:
    - '[Right "b"]'
    output: Right "b"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "bba",Right "ccc",Right "ca",Right "caad",Right "cc"]'
    output: Right "bba"
  - inputs:
    - '[Right "c"]'
    output: Right "c"
  - inputs:
    - '[Left 8]'
    output: 'bottom'
  - inputs:
    - '[Right "da"]'
    output: Right "da"
  - inputs:
    - '[Left 0,Left 8,Right "c"]'
    output: Right "c"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 7,Right "a"]'
    output: Right "a"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "ac",Right ""]'
    output: Right "ac"
  - inputs:
    - '[Right "b"]'
    output: Right "b"
  - inputs:
    - '[Left 3,Right "cdbdb"]'
    output: Right "cdbdb"
  - inputs:
    - '[Left 8,Left 9,Left 6,Right "c"]'
    output: Right "c"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 1,Right "aa",Left 1,Right "caca"]'
    output: Right "aa"
  - inputs:
    - '[Left 0,Left 10,Left 2,Left -1]'
    output: 'bottom'
  - inputs:
    - '[Right "d",Right "ac"]'
    output: Right "d"
  - inputs:
    - '[Right "bcc"]'
    output: Right "bcc"
  - inputs:
    - '[Left 6,Left 6,Left 2,Left 1]'
    output: 'bottom'
  - inputs:
    - '[Left 7,Left 6,Left 8,Left -2]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Left 5,Left 8,Right "ccccb",Left 1]'
    output: Right "ccccb"
  - inputs:
    - '[Left 1,Right "bcb",Left 2]'
    output: Right "bcb"
  - inputs:
    - '[Right "baa",Right "cdada",Left 5,Right "dbdbb",Left 4]'
    output: Right "baa"
  - inputs:
    - '[Right "a"]'
    output: Right "a"
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last (tail (tail es))
  sorted_examples:
  - inputs:
    - '[Right "",Left 3]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Left 0,Right "cabbc",Left 7,Right "aabb",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "dbbd",Left 8,Left 3,Right "b",Left 6]'
    output: Left 6
  - inputs:
    - '[Left 10,Right "dcc",Right "addbd"]'
    output: Right "addbd"
  - inputs:
    - '[Left 7,Right "",Right "c",Left 9,Left 3]'
    output: Left 3
  - inputs:
    - '[Right "bba",Right "cd",Left 7,Left 3,Right "addbc"]'
    output: Right "addbc"
  - inputs:
    - '[Right "",Left 9,Left 4]'
    output: Left 4
  - inputs:
    - '[Left -1,Left 4,Left 9,Right "a",Right "b",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "da",Right "",Right "ad",Left 3]'
    output: Left 3
  - inputs:
    - '[Left 8,Right "cacaa",Left 8]'
    output: Left 8
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Right "bdaaaa"]'
    output: 'bottom'
  - inputs:
    - '[Right "aacc",Left 7,Right "c"]'
    output: Right "c"
  - inputs:
    - '[Left 4,Right "db",Left 9,Right "dbccb",Right "ad"]'
    output: Right "ad"
  - inputs:
    - '[Left -1]'
    output: 'bottom'
  - inputs:
    - '[Left 7,Right "caacc",Left 0,Right "bcccb"]'
    output: Right "bcccb"
  - inputs:
    - '[Left -2,Left 1,Right "",Right "",Right "bacb"]'
    output: Right "bacb"
  - inputs:
    - '[Right "dac",Right "bca"]'
    output: 'bottom'
  - inputs:
    - '[Right "aaba"]'
    output: 'bottom'
  - inputs:
    - '[Right "abdb",Right "",Right "aaccdc"]'
    output: Right "aaccdc"
  - inputs:
    - '[Left 2,Left 9]'
    output: 'bottom'
  - inputs:
    - '[Left 1,Left -2,Right "cadd"]'
    output: Right "cadd"
  - inputs:
    - '[Right "",Right "",Left -2]'
    output: Left -2
  - inputs:
    - '[Left 6,Left 9,Right "",Left 9,Left 4]'
    output: Left 4
  - inputs:
    - '[Left 3,Right "abcaad",Left -1,Right "dcaaac",Right "acc",Right "bbdcbc"]'
    output: Right "bbdcbc"
  control_examples:
  - inputs:
    - '[Right "",Left 8,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 7,Right "a"]'
    output: 'bottom'
  - inputs:
    - '[Right "aaba"]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left 6]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left 3]'
    output: 'bottom'
  - inputs:
    - '[Left 8,Right "cacaa",Left 8]'
    output: Left 8
  - inputs:
    - '[Left 0]'
    output: 'bottom'
  - inputs:
    - '[Left 5,Left 7]'
    output: 'bottom'
  - inputs:
    - '[Left 1,Left -2,Right "cadd"]'
    output: Right "cadd"
  - inputs:
    - '[Right "ad",Left 8]'
    output: 'bottom'
  - inputs:
    - '[Right "da",Right "",Right "ad",Left 3]'
    output: Left 3
  - inputs:
    - '[Left -1]'
    output: 'bottom'
  - inputs:
    - '[Left 4]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Left 1,Right "",Right "",Right "bacb"]'
    output: Right "bacb"
  - inputs:
    - '[Left 10,Right "dcc",Right "addbd"]'
    output: Right "addbd"
  - inputs:
    - '[Right "abdb",Right "",Right "aaccdc"]'
    output: Right "aaccdc"
  - inputs:
    - '[Left -1,Left 4,Left 9,Right "a",Right "b",Right ""]'
    output: Right ""
  - inputs:
    - '[Left 7,Right "caacc",Left 0,Right "bcccb"]'
    output: Right "bcccb"
  - inputs:
    - '[Right "",Left 9,Left 4]'
    output: Left 4
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "ca",Right "bdccc",Right "c"]'
    output: Right "c"
  - inputs:
    - '[Left 6,Left 9,Right "",Left 9,Left 4]'
    output: Left 4
  - inputs:
    - '[Left 7,Right "",Right "c",Left 9,Left 3]'
    output: Left 3
  - inputs:
    - '[Left 2,Left 9]'
    output: 'bottom'
  - inputs:
    - '[Right "db",Left -2,Right "ccd"]'
    output: Right "ccd"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[Right "aacc",Left 7,Right "c"]'
    output: Right "c"
  - inputs:
    - '[Right "",Right "",Right "bccdd"]'
    output: Right "bccdd"
  - inputs:
    - '[Left 5]'
    output: 'bottom'
  - inputs:
    - '[Right "dac",Right "bca"]'
    output: 'bottom'
  - inputs:
    - '[Right "ad",Left 3]'
    output: 'bottom'
  - inputs:
    - '[Right "cb",Right "dbac",Right "aa"]'
    output: Right "aa"
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 3,Right "abcaad",Left -1,Right "dcaaac",Right "acc",Right "bbdcbc"]'
    output: Right "bbdcbc"
  - inputs:
    - '[Left 5,Right ""]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Right "bdaaaa"]'
    output: 'bottom'
  - inputs:
    - '[Left 4,Right "cab",Left 10,Right "b"]'
    output: Right "b"
  - inputs:
    - '[Left 4,Right "db",Left 9,Right "dbccb",Right "ad"]'
    output: Right "ad"
  - inputs:
    - '[Left 9,Left 0,Right "cabbc",Left 7,Right "aabb",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "",Right "",Left -2]'
    output: Left -2
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> Left (last (lefts es))
  sorted_examples:
  - inputs:
    - '[Right "c"]'
    output: 'bottom'
  - inputs:
    - '[Left -1,Right "dada",Left 4,Left 3,Right "bc",Right "aaccac"]'
    output: Left 3
  - inputs:
    - '[Right "dca",Right "ccc",Right "abdd",Right "bbb",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 6,Right "bdd",Left 8]'
    output: Left 8
  - inputs:
    - '[Right "d",Left 9,Right "cd"]'
    output: Left 9
  - inputs:
    - '[Left 8,Left 9,Right "dd",Right ""]'
    output: Left 9
  - inputs:
    - '[Right "bbdb",Right "c",Left 7,Left 4]'
    output: Left 4
  - inputs:
    - '[Left 1,Right "",Left 9,Left 0,Left -1]'
    output: Left -1
  - inputs:
    - '[Right "aadba",Right "",Right "dca"]'
    output: 'bottom'
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[Right "",Right "bbbc",Left -2,Left 2,Left 7,Right "a"]'
    output: Left 7
  - inputs:
    - '[Right "db",Left 4,Left 2,Right "dccad",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "abadc",Left 8]'
    output: Left 8
  - inputs:
    - '[Left 3,Right "d"]'
    output: Left 3
  - inputs:
    - '[Right "dc",Right ""]'
    output: 'bottom'
  - inputs:
    - '[Right "",Right "bcdda",Right "db",Right "bbdcd",Left 0,Left -2]'
    output: Left -2
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 1,Right "aa",Left 1,Right "caca"]'
    output: Left 1
  - inputs:
    - '[Right "",Right "bbd",Left 1]'
    output: Left 1
  - inputs:
    - '[Left 9,Left 1,Left -2,Right "cb"]'
    output: Left -2
  - inputs:
    - '[Left 8,Left 2,Left 6]'
    output: Left 6
  - inputs:
    - '[Left 5,Left 8,Right "ccccb",Left 1]'
    output: Left 1
  - inputs:
    - '[Left 3,Right "",Left 8,Left 4,Right "ccb"]'
    output: Left 4
  - inputs:
    - '[Right "abcac",Right "ddc",Left 4,Left 9,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "baaa",Left 10,Left 2]'
    output: Left 2
  - inputs:
    - '[Left 8,Left 3,Right "cd"]'
    output: Left 3
  control_examples:
  - inputs:
    - '[Left 4,Left 4,Left -1,Right "d"]'
    output: Left -1
  - inputs:
    - '[Right "aadc",Right "",Right "ba"]'
    output: 'bottom'
  - inputs:
    - '[Right "baaa",Left 10,Left 2]'
    output: Left 2
  - inputs:
    - '[Right "d",Left 9,Right "cd"]'
    output: Left 9
  - inputs:
    - '[Right "bbdb",Right "c",Left 7,Left 4]'
    output: Left 4
  - inputs:
    - '[Right "bcc",Right "",Right "cb"]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Left 1,Left -2,Right "cb"]'
    output: Left -2
  - inputs:
    - '[Left 5]'
    output: Left 5
  - inputs:
    - '[Right "",Right "bbd",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "dca",Right "ccc",Right "abdd",Right "bbb",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "da",Left 2,Right "b"]'
    output: Left 2
  - inputs:
    - '[Right "db",Right "cba",Left 6,Right "dd",Left 10]'
    output: Left 10
  - inputs:
    - '[Left -1,Right "dada",Left 4,Left 3,Right "bc",Right "aaccac"]'
    output: Left 3
  - inputs:
    - '[Left 1,Right "",Left 9,Left 0,Left -1]'
    output: Left -1
  - inputs:
    - '[Left 4,Right "cab",Left 10,Right "b"]'
    output: Left 10
  - inputs:
    - '[Left 8,Left 2,Left 6]'
    output: Left 6
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "",Right "bcdda",Right "db",Right "bbdcd",Left 0,Left -2]'
    output: Left -2
  - inputs:
    - '[Right "d"]'
    output: 'bottom'
  - inputs:
    - '[Left 3,Right "d"]'
    output: Left 3
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "abcac",Right "ddc",Left 4,Left 9,Left 0]'
    output: Left 0
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[Left -1]'
    output: Left -1
  - inputs:
    - '[Left 0]'
    output: Left 0
  - inputs:
    - '[Left 6,Right "bdd",Left 8]'
    output: Left 8
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[Right "c"]'
    output: 'bottom'
  - inputs:
    - '[Left 2]'
    output: Left 2
  - inputs:
    - '[Left 5,Left 8,Right "ccccb",Left 1]'
    output: Left 1
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "abadc",Left 8]'
    output: Left 8
  - inputs:
    - '[Left 8,Left 9,Right "dd",Right ""]'
    output: Left 9
  - inputs:
    - '[Right "a"]'
    output: 'bottom'
  - inputs:
    - '[Right "aadba",Right "",Right "dca"]'
    output: 'bottom'
  - inputs:
    - '[Left 1,Right "aa",Left 1,Right "caca"]'
    output: Left 1
  - inputs:
    - '[Left 8,Left 3,Right "cd"]'
    output: Left 3
- name: inverseMap
  query: 'fs: [a -> b] -> x: a -> [b]'
  candidate: \fs x -> repeat ((last fs) $ x)
  sorted_examples:
  - inputs:
    - '[]'
    - '2'
    output: 'bottom'
  - inputs:
    - '[(show),(show),(show)]'
    - '4'
    output: '["4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4",
      "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4",
      "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4",
      "4", "4", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '5'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '3'
    output: '["num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '9'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '-2'
    output: '["num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '6'
    output: '["6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "_, _'
  - inputs:
    - '[(show),(show)]'
    - '1'
    output: '["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "_, _'
  control_examples:
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '9'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - '[]'
    - '2'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '9'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - '[]'
    - '10'
    output: 'bottom'
  - inputs:
    - '[]'
    - '7'
    output: 'bottom'
  - inputs:
    - '[]'
    - '4'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '-2'
    output: '["num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '8'
    output: '["num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[]'
    - '7'
    output: 'bottom'
  - inputs:
    - '[]'
    - '0'
    output: 'bottom'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '3'
    output: '["num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[]'
    - '8'
    output: 'bottom'
  - inputs:
    - '[]'
    - '5'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '-1'
    output: '["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '4'
    output: '["num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;",
      "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;",
      "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;",
      "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;",
      "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;", "num=4;",
      "num=4;", "num=4;", "num=4;", "num=4;", "num=4_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10_, "num=1_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[]'
    - '8'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[]'
    - '6'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '5'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
- name: inverseMap
  query: 'fs: [a -> b] -> x: a -> [b]'
  candidate: \fs x -> repeat ((head fs) $ x)
  sorted_examples:
  - inputs:
    - '[]'
    - '5'
    output: 'bottom'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '8'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show),(\x
      -> "num=" ++ show x ++ ";")]'
    - '3'
    output: '["num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10_, "num=1_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '8'
    output: '["num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '6'
    output: '["6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '9'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - '[(show)]'
    - '3'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '9'
    output: '["num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9_, "num=_, "num_, "nu_, "n_, "_,
      _'
  control_examples:
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10_, "num=1_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10_, "num=1_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '6'
    output: '["6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "_, _'
  - inputs:
    - '[(show)]'
    - '5'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '9'
    output: '["num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[]'
    - '4'
    output: 'bottom'
  - inputs:
    - '[]'
    - '4'
    output: 'bottom'
  - inputs:
    - '[(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[]'
    - '8'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '8'
    output: '["num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '9'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - '[]'
    - '2'
    output: 'bottom'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '3'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '7'
    output: '["num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[]'
    - '5'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '5'
    output: '["num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[]'
    - '7'
    output: 'bottom'
  - inputs:
    - '[]'
    - '5'
    output: 'bottom'
  - inputs:
    - '[]'
    - '10'
    output: 'bottom'
- name: inverseMap
  query: 'fs: [a -> b] -> x: a -> [b]'
  candidate: \fs x -> map (last fs) (repeat x)
  sorted_examples:
  - inputs:
    - '[]'
    - '9'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show),(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(\x -> "num="
      ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '-2'
    output: '["num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show)]'
    - '2'
    output: '["2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '8'
    output: '["num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '9'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '2'
    output: '["2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '6'
    output: '["6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '-2'
    output: '["num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show),(show)]'
    - '-1'
    output: '["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-_, "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1_, "num=_, "num_, "nu_, "n_, "_,
      _'
  control_examples:
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '4'
    output: '["4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4",
      "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4",
      "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4",
      "4", "4", "_, _'
  - inputs:
    - '[]'
    - '2'
    output: 'bottom'
  - inputs:
    - '[]'
    - '4'
    output: 'bottom'
  - inputs:
    - '[]'
    - '0'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '9'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - '[]'
    - '8'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show),(show)]'
    - '0'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '6'
    output: '["6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "_, _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[]'
    - '10'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '8'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '8'
    output: '["num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;", "num=8;",
      "num=8;", "num=8;", "num=8;", "num=8;", "num=8_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '10'
    output: '["10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "1_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '6'
    output: '["num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '9'
    output: '["num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '6'
    output: '["num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '3'
    output: '["num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;", "num=3;",
      "num=3;", "num=3;", "num=3;", "num=3;", "num=3_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(\x -> "num="
      ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '-2'
    output: '["num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[]'
    - '9'
    output: 'bottom'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;", "num=1;",
      "num=1;", "num=1;", "num=1;", "num=1;", "num=1_, "num=_, "num_, "nu_, "n_, "_,
      _'
- name: inverseMap
  query: 'fs: [a -> b] -> x: a -> [b]'
  candidate: \fs x -> map (head fs) (repeat x)
  sorted_examples:
  - inputs:
    - '[]'
    - '-1'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show),(show)]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '5'
    output: '["num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";"),(\x
      -> "num=" ++ show x ++ ";")]'
    - '5'
    output: '["num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '6'
    output: '["num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(show)]'
    - '3'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(\x -> "num="
      ++ show x ++ ";")]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10_, "num=1_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show)]'
    - '3'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  control_examples:
  - inputs:
    - '[(show)]'
    - '6'
    output: '["6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6", "6",
      "6", "6", "_, _'
  - inputs:
    - '[]'
    - '8'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(\x -> "num="
      ++ show x ++ ";")]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;", "num=10;",
      "num=10_, "num=1_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[]'
    - '2'
    output: 'bottom'
  - inputs:
    - '[]'
    - '-1'
    output: 'bottom'
  - inputs:
    - '[]'
    - '10'
    output: 'bottom'
  - inputs:
    - '[(show)]'
    - '3'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '5'
    output: '["num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;", "num=5;",
      "num=5;", "num=5;", "num=5;", "num=5;", "num=5_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '8'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '-2'
    output: '["num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;", "num=-2;",
      "num=-2_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show),(show)]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '0'
    output: '["num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;", "num=0;",
      "num=0;", "num=0;", "num=0;", "num=0;", "num=0_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(show)]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(show)]'
    - '9'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '7'
    output: '["num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;", "num=7;",
      "num=7;", "num=7;", "num=7;", "num=7;", "num=7_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "_, _'
  - inputs:
    - '[(show),(show)]'
    - '3'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '-1'
    output: '["num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;", "num=-1;",
      "num=-1_, "num=-_, "num=_, "num_, "nu_, "n_, "_, _'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '9'
    output: '["num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;", "num=9;",
      "num=9;", "num=9;", "num=9;", "num=9;", "num=9_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[]'
    - '8'
    output: 'bottom'
  - inputs:
    - '[]'
    - '8'
    output: 'bottom'
  - inputs:
    - '[]'
    - '-2'
    output: 'bottom'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '6'
    output: '["num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;", "num=6;",
      "num=6;", "num=6;", "num=6;", "num=6;", "num=6_, "num=_, "num_, "nu_, "n_, "_,
      _'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '-1'
    output: '["-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1",
      "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-1", "-_, "_, _'
- name: inverseMap
  query: 'fs: [a -> b] -> x: a -> [b]'
  candidate: \fs x -> zipWith id fs (repeat x)
  sorted_examples:
  - inputs:
    - '[]'
    - '-1'
    output: '[]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(\x -> "num="
      ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;", "num=10;"]'
  - inputs:
    - '[(show),(show),(show)]'
    - '-2'
    output: '["-2", "-2", "-2"]'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";")]'
    - '6'
    output: '["6", "num=6;"]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(\x -> "num="
      ++ show x ++ ";")]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;"]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '7'
    output: '["num=7;", "7", "num=7;", "7"]'
  - inputs:
    - '[(show)]'
    - '3'
    output: '["3"]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show)]'
    - '7'
    output: '["num=7;", "7"]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '8'
    output: '["num=8;", "8", "num=8;"]'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["1", "num=1;", "num=1;"]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '5'
    output: '["num=5;", "num=5;"]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";")]'
    - '0'
    output: '["num=0;"]'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '6'
    output: '["6", "6", "num=6;"]'
  control_examples:
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";"),(\x -> "num="
      ++ show x ++ ";")]'
    - '10'
    output: '["num=10;", "num=10;", "num=10;"]'
  - inputs:
    - '[]'
    - '4'
    output: '[]'
  - inputs:
    - '[]'
    - '5'
    output: '[]'
  - inputs:
    - '[]'
    - '-1'
    output: '[]'
  - inputs:
    - '[]'
    - '3'
    output: '[]'
  - inputs:
    - '[]'
    - '9'
    output: '[]'
  - inputs:
    - '[]'
    - '6'
    output: '[]'
  - inputs:
    - '[(show)]'
    - '3'
    output: '["3"]'
  - inputs:
    - '[]'
    - '9'
    output: '[]'
  - inputs:
    - '[]'
    - '8'
    output: '[]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '8'
    output: '["num=8;", "8", "num=8;"]'
  - inputs:
    - '[]'
    - '6'
    output: '[]'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '1'
    output: '["1", "num=1;", "num=1;"]'
  - inputs:
    - '[(show)]'
    - '3'
    output: '["3"]'
  - inputs:
    - '[]'
    - '5'
    output: '[]'
  - inputs:
    - '[]'
    - '2'
    output: '[]'
  - inputs:
    - '[(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '2'
    output: '["num=2;", "num=2;"]'
  - inputs:
    - '[]'
    - '7'
    output: '[]'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '6'
    output: '["6", "6", "num=6;"]'
  - inputs:
    - '[(show),(\x -> "num=" ++ show x ++ ";"),(\x -> "num=" ++ show x ++ ";")]'
    - '8'
    output: '["8", "num=8;", "num=8;"]'
  - inputs:
    - '[(show),(show),(\x -> "num=" ++ show x ++ ";")]'
    - '-2'
    output: '["-2", "-2", "num=-2;"]'
  - inputs:
    - '[]'
    - '10'
    output: '[]'
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: \f xs -> partitionEithers (map f (init xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,2,6]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,10]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,0,6,4]'
    output: (["Zero"], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,10]'
    output: ([], [False])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,10]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,10]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[1]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,0]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,8,-2]'
    output: ([], [False, False])
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: \f xs -> partitionEithers (map f (reverse xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4,4,8,-2]'
    output: ([], [True, False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,10]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4,5,-1]'
    output: ([], [True, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,5,4]'
    output: (["Zero"], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,0]'
    output: (["Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,3]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4,5,-1]'
    output: ([], [True, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[2,5]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,10]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0]'
    output: (["Zero"], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: \f xs -> partitionEithers (map f xs)
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[9,2,9,2]'
    output: ([], [False, False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4,5,-1]'
    output: ([], [False, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,-2,6,0]'
    output: (["Zero"], [False, True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5]'
    output: ([], [False])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,3]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,1]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[1,1,3]'
    output: ([], [False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4,2]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[9,2]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4,5,-1]'
    output: ([], [False, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,4,1]'
    output: ([], [True, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: \f xs -> partitionEithers (map f (tail xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[1,10,1,3]'
    output: ([], [False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,6,0]'
    output: (["Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,4,1]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,10]'
    output: ([], [False])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,4,1]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,10]'
    output: ([], [False])
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (reverse xs)
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,-2,3,4]'
    output: '["4", "3", "2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,1]'
    output: '["1", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,8,7]'
    output: '["7", "8", "-2", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,1,2]'
    output: '["2", "1", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-2,7,2]'
    output: '["2", "7", "-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,5,3]'
    output: '["3", "5", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,1,6,6]'
    output: '["6", "6", "1", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,0]'
    output: '["0", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,7]'
    output: '["7"]'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,6]'
    output: '["6", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,5]'
    output: '["5", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '["2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,8,7]'
    output: '["7", "8", "-2", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,0]'
    output: '["0", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,1,10]'
    output: '["10", "1", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-2,7,2]'
    output: '["2", "7", "-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,1]'
    output: '["1", "-1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,1,6,6]'
    output: '["6", "6", "1", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,1,2]'
    output: '["2", "1", "9"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> maybeToList (f (head xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,0,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,0,5]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,8,6,2]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,2]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-1,10,5]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,10,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,2,10]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,0,5]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,-1]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,0]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,2,1]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,0,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,5]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,4,6]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,7]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,2]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,2]'
    output: '["-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,10,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,8,6,2]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> init (reverse (mapMaybe f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,8,5,7]'
    output: '["7", "5", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2,-2]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,8,0]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,1,1]'
    output: '["1", "1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,4,10,-2]'
    output: '["10", "4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,10,9]'
    output: '["9", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,4]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: 'bottom'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,0]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,0,3]'
    output: '["3", "0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2,-2]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,8,0]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,1,1]'
    output: '["1", "1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,4,10,-2]'
    output: '["10", "4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,2,1]'
    output: '["1", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,-1,1]'
    output: '["1", "-1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,10,9]'
    output: '["9", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,8,5,7]'
    output: '["7", "5", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,4]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'bottom'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f xs
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2,2,0]'
    output: '["4", "-2", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,9,-2]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: '["-1", "-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,1,2]'
    output: '["9", "1", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,0,2]'
    output: '["1", "0", "2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,7]'
    output: '["0", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,8,7]'
    output: '["5", "-2", "8", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,-1,0]'
    output: '["1", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,9]'
    output: '["5", "9"]'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,4,8]'
    output: '["6", "4", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,7,9]'
    output: '["-1", "7", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,1,2]'
    output: '["9", "1", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,7]'
    output: '["0", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,-1]'
    output: '["-1", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,0,2]'
    output: '["1", "0", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,9]'
    output: '["5", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,8,7]'
    output: '["5", "-2", "8", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
- name: mbToEither
  query: 'x: a -> mb: Maybe b -> Either a b'
  candidate: \x mb -> bool (Left x) (Left x) (isJust mb)
  sorted_examples:
  - inputs:
    - '-1'
    - Just "b"
    output: Left -1
  - inputs:
    - '8'
    - Nothing
    output: Left 8
  control_examples:
  - inputs:
    - '4'
    - Just "a"
    output: Left 4
  - inputs:
    - '-1'
    - Just "bc"
    output: Left -1
  - inputs:
    - '4'
    - Just "c"
    output: Left 4
  - inputs:
    - '8'
    - Nothing
    output: Left 8
  - inputs:
    - '2'
    - Just "a"
    output: Left 2
  - inputs:
    - '4'
    - Nothing
    output: Left 4
  - inputs:
    - '9'
    - Just ""
    output: Left 9
  - inputs:
    - '-1'
    - Just "b"
    output: Left -1
  - inputs:
    - '7'
    - Just "bdb"
    output: Left 7
  - inputs:
    - '-2'
    - Just "ba"
    output: Left -2
  - inputs:
    - '10'
    - Nothing
    output: Left 10
  - inputs:
    - '6'
    - Just ""
    output: Left 6
  - inputs:
    - '4'
    - Just ""
    output: Left 4
  - inputs:
    - '1'
    - Just "aa"
    output: Left 1
- name: mbToEither
  query: 'x: a -> mb: Maybe b -> Either a b'
  candidate: \x mb -> maybe (Left x) (fromJust Nothing) mb
  sorted_examples:
  - inputs:
    - '7'
    - Just "bdb"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '10'
    - Nothing
    output: Left 10
  control_examples:
  - inputs:
    - '4'
    - Just "dcb"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '3'
    - Just "a"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '9'
    - Just "cadcac"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '2'
    - Just "b"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '0'
    - Just ""
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '9'
    - Just "ad"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '1'
    - Just ""
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '10'
    - Just "bb"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '4'
    - Just ""
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '6'
    - Just ""
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '2'
    - Just "adcc"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '6'
    - Just "ab"
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '7'
    - Just ""
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - '7'
    - Just "bdb"
    output: 'Maybe.fromJust: Nothing'
- name: mbToEither
  query: 'x: a -> mb: Maybe b -> Either a b'
  candidate: \x mb -> maybe (Left x) Right mb
  sorted_examples:
  - inputs:
    - '-1'
    - Just "b"
    output: Right "b"
  - inputs:
    - '6'
    - Nothing
    output: Left 6
  control_examples:
  - inputs:
    - '4'
    - Just "c"
    output: Right "c"
  - inputs:
    - '9'
    - Nothing
    output: Left 9
  - inputs:
    - '9'
    - Just ""
    output: Right ""
  - inputs:
    - '-1'
    - Just "b"
    output: Right "b"
  - inputs:
    - '2'
    - Just "ccda"
    output: Right "ccda"
  - inputs:
    - '3'
    - Just ""
    output: Right ""
  - inputs:
    - '6'
    - Just "dd"
    output: Right "dd"
  - inputs:
    - '3'
    - Just "bd"
    output: Right "bd"
  - inputs:
    - '5'
    - Just ""
    output: Right ""
  - inputs:
    - '6'
    - Just "ab"
    output: Right "ab"
  - inputs:
    - '8'
    - Just "c"
    output: Right "c"
  - inputs:
    - '3'
    - Just ""
    output: Right ""
  - inputs:
    - '1'
    - Just ""
    output: Right ""
  - inputs:
    - '2'
    - Just "addacc"
    output: Right "addacc"
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (tail (rights es))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 10,Right "aadada",Right "bd",Right "dcdc",Right "",Left 2]'
    output: Right ["bd", "dcdc", ""]
  - inputs:
    - '[Left 0,Left 8,Left 9,Left 8,Left -2]'
    output: 'bottom'
  - inputs:
    - '[Right "bdbbc",Right "dabbc",Left 8,Left 6,Left 7,Right ""]'
    output: Right ["dabbc", ""]
  - inputs:
    - '[Left -1,Right "d"]'
    output: Right []
  - inputs:
    - '[Left 10,Left 10,Left -2,Right "",Right "d",Left 4]'
    output: Right ["d"]
  - inputs:
    - '[Right "ccccc",Left -2,Right "aabb",Right "dcad",Right "caab"]'
    output: Right ["aabb", "dcad", "caab"]
  - inputs:
    - '[Left 5,Left -2,Left 7,Right "cdaa"]'
    output: Right []
  - inputs:
    - '[Right "da",Right "a",Left 3]'
    output: Right ["a"]
  - inputs:
    - '[Left 8,Left 7,Left -1]'
    output: 'bottom'
  - inputs:
    - '[Left 6,Right "bdad",Right "cbaad",Right "dddcda"]'
    output: Right ["cbaad", "dddcda"]
  - inputs:
    - '[Right "cabbc",Right "acacb",Left -2,Right "cbb",Left 9]'
    output: Right ["acacb", "cbb"]
  - inputs:
    - '[Right "",Left -1,Left 9,Left -1]'
    output: Right []
  - inputs:
    - '[Left -2,Right "baa",Right "cabcb"]'
    output: Right ["cabcb"]
  - inputs:
    - '[Right "dacad",Left -1,Right "b",Left 4,Right "a"]'
    output: Right ["b", "a"]
  - inputs:
    - '[Left 9,Left -2]'
    output: 'bottom'
  - inputs:
    - '[Right "dd"]'
    output: Right []
  - inputs:
    - '[Right "bccc",Right "a"]'
    output: Right ["a"]
  - inputs:
    - '[Left -2]'
    output: 'bottom'
  control_examples:
  - inputs:
    - '[Left 10,Right "aadada",Right "bd",Right "dcdc",Right "",Left 2]'
    output: Right ["bd", "dcdc", ""]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 4]'
    output: 'bottom'
  - inputs:
    - '[Right "b"]'
    output: Right []
  - inputs:
    - '[Right "dd"]'
    output: Right []
  - inputs:
    - '[Left -2]'
    output: 'bottom'
  - inputs:
    - '[Left 8,Left 7,Left -1]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left -1,Left 9,Left -1]'
    output: Right []
  - inputs:
    - '[Left 10,Left 10,Left -2,Right "",Right "d",Left 4]'
    output: Right ["d"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 8,Left 10]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "bccc",Right "a"]'
    output: Right ["a"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Right "baa",Right "cabcb"]'
    output: Right ["cabcb"]
  - inputs:
    - '[Right "cabbc",Right "acacb",Left -2,Right "cbb",Left 9]'
    output: Right ["acacb", "cbb"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Left -2]'
    output: 'bottom'
  - inputs:
    - '[Left 4]'
    output: 'bottom'
  - inputs:
    - '[Left 3]'
    output: 'bottom'
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Left (last (lefts es))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "babca",Left 1,Left 4,Right "bd",Right "",Left -2]'
    output: Left -2
  - inputs:
    - '[Left 0,Left 6]'
    output: Left 6
  - inputs:
    - '[Left 2,Right "caadc",Left 2,Right "ddcd",Right "bc"]'
    output: Left 2
  - inputs:
    - '[Right "bccc",Right "a"]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left -1,Left 9,Left -1]'
    output: Left -1
  - inputs:
    - '[Right "babd",Left 1,Left 3]'
    output: Left 3
  - inputs:
    - '[Left -1,Right "ab",Left 0]'
    output: Left 0
  - inputs:
    - '[Left 4,Left 9,Right ""]'
    output: Left 9
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[Left 10,Left 0,Right "babb",Right "acc"]'
    output: Left 0
  - inputs:
    - '[Left 4]'
    output: Left 4
  - inputs:
    - '[Right "dd",Left -2]'
    output: Left -2
  - inputs:
    - '[Left 3,Right "aca"]'
    output: Left 3
  - inputs:
    - '[Left -2,Left 9,Left 10]'
    output: Left 10
  control_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 10]'
    output: Left 10
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left -1,Left 9,Left -1]'
    output: Left -1
  - inputs:
    - '[Right "bccc",Right "a"]'
    output: 'bottom'
  - inputs:
    - '[Right "babd",Left 1,Left 3]'
    output: Left 3
  - inputs:
    - '[Left 3]'
    output: Left 3
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 4]'
    output: Left 4
  - inputs:
    - '[Right "a",Left 2,Left 1]'
    output: Left 1
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "babca",Left 1,Left 4,Right "bd",Right "",Left -2]'
    output: Left -2
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 0,Right ""]'
    output: Left 0
  - inputs:
    - '[Left 7,Right "aac"]'
    output: Left 7
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Left 9,Left 10]'
    output: Left 10
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 0,Left 6]'
    output: Left 6
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 3,Right "aca"]'
    output: Left 3
  - inputs:
    - '[]'
    output: 'bottom'
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Left (head (lefts es))
  sorted_examples:
  - inputs:
    - '[Right "bc",Right ""]'
    output: 'bottom'
  - inputs:
    - '[Left 10,Right "aadada",Right "bd",Right "dcdc",Right "",Left 2]'
    output: Left 10
  - inputs:
    - '[Left 0,Left 6]'
    output: Left 0
  - inputs:
    - '[Right "bcad",Left -1,Left 8,Left -2]'
    output: Left -1
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "babca",Left 1,Left 4,Right "bd",Right "",Left -2]'
    output: Left 1
  - inputs:
    - '[Left 4,Right "",Right "bd",Right "bacd"]'
    output: Left 4
  - inputs:
    - '[Left 9,Right "dab",Right "bcbdc",Left 2,Left 1]'
    output: Left 9
  - inputs:
    - '[Right "",Right "ab",Left 10]'
    output: Left 10
  - inputs:
    - '[Left -1,Left 10,Right "b"]'
    output: Left -1
  - inputs:
    - '[Right "bdd"]'
    output: 'bottom'
  - inputs:
    - '[Left 1]'
    output: Left 1
  - inputs:
    - '[Left 1,Right "c"]'
    output: Left 1
  - inputs:
    - '[Right "dba",Right "dcbba",Right "cbbcb",Left 4,Left 6]'
    output: Left 4
  - inputs:
    - '[Right "c",Left 1,Left -1,Right "cadcba"]'
    output: Left 1
  - inputs:
    - '[Right "cba",Left -1]'
    output: Left -1
  - inputs:
    - '[Left 9,Right "ca",Left 8]'
    output: Left 9
  control_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 1]'
    output: Left 1
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Right "ca",Left 8]'
    output: Left 9
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "a"]'
    output: 'bottom'
  - inputs:
    - '[Right "bc",Right ""]'
    output: 'bottom'
  - inputs:
    - '[Right "",Right "ab",Left 10]'
    output: Left 10
  - inputs:
    - '[Right "dcba"]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 10,Right "aadada",Right "bd",Right "dcdc",Right "",Left 2]'
    output: Left 10
  - inputs:
    - '[Right "dd",Left 8,Left -2]'
    output: Left 8
  - inputs:
    - '[Left 0,Left 6]'
    output: Left 0
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "c",Left 1,Left -1,Right "cadcba"]'
    output: Left 1
  - inputs:
    - '[Right "bdd"]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Left 0]'
    output: Left -2
  - inputs:
    - '[Right "dba",Right "dcbba",Right "cbbcb",Left 4,Left 6]'
    output: Left 4
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "babca",Left 1,Left 4,Right "bd",Right "",Left -2]'
    output: Left 1
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Left -2]'
    output: Left 9
  - inputs:
    - '[]'
    output: 'bottom'
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (drop (length es) [])
  sorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "dc",Right "abb",Right "adddad",Left 0]'
    output: Right []
  - inputs:
    - '[Left 8,Left 7,Left -1]'
    output: Right []
  - inputs:
    - '[Left 8,Right "cbaa",Left 2,Left 8,Right ""]'
    output: Right []
  - inputs:
    - '[Right "ddc",Right "adcc",Left 10,Right "aadb",Right "bdbdc",Left 2]'
    output: Right []
  - inputs:
    - '[Left 9,Left -2,Right "a",Right "bb"]'
    output: Right []
  - inputs:
    - '[Left -1,Right "a"]'
    output: Right []
  - inputs:
    - '[Right "dd",Left 1]'
    output: Right []
  - inputs:
    - '[Left 2,Right "",Left 4,Right "cc",Left 4]'
    output: Right []
  - inputs:
    - '[Right "bbdd",Right "cbcc",Right "ccac"]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Right "",Left 6,Left 5,Left -1]'
    output: Right []
  - inputs:
    - '[Left -2]'
    output: Right []
  - inputs:
    - '[Left -2,Right "bb",Left 7]'
    output: Right []
  - inputs:
    - '[Right "",Right "ab",Left 10]'
    output: Right []
  - inputs:
    - '[Right "dad",Left 9,Right "dbcd",Left 3]'
    output: Right []
  - inputs:
    - '[Left 3,Right "",Right "a"]'
    output: Right []
  control_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 3,Right "",Right "a"]'
    output: Right []
  - inputs:
    - '[Right "",Left 6,Left 5,Left -1]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left -2,Right "bb",Left 7]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "ac"]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "",Left 5]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "",Left 10,Right "db"]'
    output: Right []
  - inputs:
    - '[Right "bd",Left 6]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Left 9,Left 0,Left 10]'
    output: Right []
  - inputs:
    - '[Left 8,Left 7,Left -1]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "dc",Right "abb",Right "adddad",Left 0]'
    output: Right []
  - inputs:
    - '[Right "c",Right "a",Right "cbb"]'
    output: Right []
  - inputs:
    - '[Right "dad",Left 9,Right "dbcd",Left 3]'
    output: Right []
  - inputs:
    - '[Right "",Right "ab",Left 10]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Right "c",Left 8]'
    output: Right []
  - inputs:
    - '[Left 3,Left 6,Left -2]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "adbd",Right "bacc",Left 4]'
    output: Right []
  - inputs:
    - '[Left -1,Right "a"]'
    output: Right []
  - inputs:
    - '[Right "",Right "ddbc"]'
    output: Right []
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (rights (maybeToList (listToMaybe es)))
  sorted_examples:
  - inputs:
    - '[Left 8,Left 8,Right "dca",Left -1]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 7,Right "cdaac",Left -1,Left 10,Right "ddacb",Right "badbda"]'
    output: Right []
  - inputs:
    - '[Right "c",Left 6,Right "bccac",Right "b",Left 2]'
    output: Right ["c"]
  - inputs:
    - '[Right "db",Right "d"]'
    output: Right ["db"]
  - inputs:
    - '[Left -1,Right "",Left -2,Right "bcccdb"]'
    output: Right []
  - inputs:
    - '[Right "ba",Left 5,Left 0,Left 3]'
    output: Right ["ba"]
  - inputs:
    - '[Left 0,Right ""]'
    output: Right []
  - inputs:
    - '[Left 6,Right "abacd",Left 8,Left 7,Left 10]'
    output: Right []
  - inputs:
    - '[Right "c",Right "",Left 6,Right "",Left 3]'
    output: Right ["c"]
  - inputs:
    - '[Left 8,Right "db",Left 6]'
    output: Right []
  - inputs:
    - '[Right "adbd",Right "bacc",Left 4]'
    output: Right ["adbd"]
  - inputs:
    - '[Left -2,Left 1,Left 0]'
    output: Right []
  - inputs:
    - '[Right "dad",Left 9,Right "dbcd",Left 3]'
    output: Right ["dad"]
  control_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "c",Left 6,Right "bccac",Right "b",Left 2]'
    output: Right ["c"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 6,Right "abacd",Left 8,Left 7,Left 10]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 10,Right "aa"]'
    output: Right []
  - inputs:
    - '[Right "cac",Left -1,Right "adaa",Left 0]'
    output: Right ["cac"]
  - inputs:
    - '[Right "adbd",Right "bacc",Left 4]'
    output: Right ["adbd"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 7,Right "b"]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "bd",Left -1,Left 2]'
    output: Right ["bd"]
  - inputs:
    - '[Right "dad",Left 9,Right "dbcd",Left 3]'
    output: Right ["dad"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "c",Right "",Left 6,Right "",Left 3]'
    output: Right ["c"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 8,Right "db",Left 6]'
    output: Right []
  - inputs:
    - '[Left 8,Left 8,Right "dca",Left -1]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "db",Right "d"]'
    output: Right ["db"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left -1,Left 8]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 0,Right ""]'
    output: Right []
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (maybeToList (listToMaybe (rights es)))
  sorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 4,Right "baca",Left -2,Right "adc",Left 2,Right "dccab"]'
    output: Right ["baca"]
  - inputs:
    - '[Left 2,Left 0,Left 3]'
    output: Right []
  - inputs:
    - '[Right "d",Right ""]'
    output: Right ["d"]
  - inputs:
    - '[Left 4,Left 7,Right "dacccc",Right "",Right "ccd",Left 8]'
    output: Right ["dacccc"]
  - inputs:
    - '[Right "b",Right "caaa",Left 1,Right "dadd"]'
    output: Right ["b"]
  - inputs:
    - '[Left 1,Left 5,Right "aaad",Right "ba"]'
    output: Right ["aaad"]
  - inputs:
    - '[Right "a",Left 5,Left -2,Left 7,Right "cdcbb"]'
    output: Right ["a"]
  - inputs:
    - '[Left 1,Left 2,Right "dcaa",Left 6,Left 5]'
    output: Right ["dcaa"]
  - inputs:
    - '[Left -1,Left 9,Left -1,Right "",Left -2]'
    output: Right [""]
  - inputs:
    - '[Right "a",Left 2,Left 1]'
    output: Right ["a"]
  - inputs:
    - '[Left 9,Right "ca",Left 8]'
    output: Right ["ca"]
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 9]'
    output: Right []
  - inputs:
    - '[Right "",Left -1,Right "a"]'
    output: Right [""]
  - inputs:
    - '[Left 8,Left 8,Right "dca",Left -1]'
    output: Right ["dca"]
  - inputs:
    - '[Left 10,Right "bad",Left 7,Right "acac"]'
    output: Right ["bad"]
  control_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 10,Right "bad",Left 7,Right "acac"]'
    output: Right ["bad"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "a",Left 5,Left -2,Left 7,Right "cdcbb"]'
    output: Right ["a"]
  - inputs:
    - '[Right "d"]'
    output: Right ["d"]
  - inputs:
    - '[Left 4,Right "baca",Left -2,Right "adc",Left 2,Right "dccab"]'
    output: Right ["baca"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 5,Right "ddc"]'
    output: Right ["ddc"]
  - inputs:
    - '[Left 9,Left 10,Right "bc"]'
    output: Right ["bc"]
  - inputs:
    - '[Left 10]'
    output: Right []
  - inputs:
    - '[Left 9]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "a",Left 2,Left 1]'
    output: Right ["a"]
  - inputs:
    - '[Left 4,Right "aaaab"]'
    output: Right ["aaaab"]
  - inputs:
    - '[Left 8,Left 8,Right "dca",Left -1]'
    output: Right ["dca"]
  - inputs:
    - '[Right "abd"]'
    output: Right ["abd"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 2,Left 0,Left 3]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 8,Right "db",Left 6]'
    output: Right ["db"]
  - inputs:
    - '[Left 2]'
    output: Right []
  - inputs:
    - '[Right "",Right "",Left 1,Left 4]'
    output: Right [""]
  - inputs:
    - '[Left 9,Right "ca",Left 8]'
    output: Right ["ca"]
  - inputs:
    - '[Right "",Left -1,Right "a"]'
    output: Right [""]
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "cc"]'
    output: Right ["cc"]
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (reverse (rights es))
  sorted_examples:
  - inputs:
    - '[Left 6,Left 3,Left 2]'
    output: Right []
  - inputs:
    - '[Right "dbbdd",Right "",Left 4,Right "cca",Left 0,Right ""]'
    output: Right ["", "cca", "", "dbbdd"]
  - inputs:
    - '[Left 4,Right "ad",Right "cc",Right "bc",Left 0]'
    output: Right ["bc", "cc", "ad"]
  - inputs:
    - '[Right "b",Left 3,Right "b"]'
    output: Right ["b", "b"]
  - inputs:
    - '[Right "cadc",Right "a",Right "",Right "dab",Right "babaa"]'
    output: Right ["babaa", "dab", "", "a", "cadc"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "c",Left 6,Right "bccac",Right "b",Left 2]'
    output: Right ["b", "bccac", "c"]
  - inputs:
    - '[Left 9,Left 1,Right "",Right "dcd",Right "c",Right "baca"]'
    output: Right ["baca", "c", "dcd", ""]
  - inputs:
    - '[Right "",Left 6,Left 5,Left -1]'
    output: Right [""]
  - inputs:
    - '[Right "dd"]'
    output: Right ["dd"]
  - inputs:
    - '[Left 8,Right "bdad",Left 8]'
    output: Right ["bdad"]
  - inputs:
    - '[Left 4,Right "baca",Left -2,Right "adc",Left 2,Right "dccab"]'
    output: Right ["dccab", "adc", "baca"]
  - inputs:
    - '[Right "cdd",Right "b",Right "d",Right "b"]'
    output: Right ["b", "d", "b", "cdd"]
  - inputs:
    - '[Right "aaa",Right "",Left 6]'
    output: Right ["", "aaa"]
  - inputs:
    - '[Left -1,Right "a"]'
    output: Right ["a"]
  - inputs:
    - '[Right "cac",Left -1,Right "adaa",Left 0]'
    output: Right ["adaa", "cac"]
  - inputs:
    - '[Left 10]'
    output: Right []
  - inputs:
    - '[Right "cd",Right ""]'
    output: Right ["", "cd"]
  - inputs:
    - '[Left 5,Left 10,Left 9,Left 5]'
    output: Right []
  control_examples:
  - inputs:
    - '[Left 7,Left 5,Left 1,Left -2,Left 8]'
    output: Right []
  - inputs:
    - '[Left 10]'
    output: Right []
  - inputs:
    - '[Left 2]'
    output: Right []
  - inputs:
    - '[Right "da",Left 9,Right "cca"]'
    output: Right ["cca", "da"]
  - inputs:
    - '[Right "b",Left 3,Right "b"]'
    output: Right ["b", "b"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "cbd"]'
    output: Right ["cbd"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left -1,Right "a"]'
    output: Right ["a"]
  - inputs:
    - '[Right "cac",Left -1,Right "adaa",Left 0]'
    output: Right ["adaa", "cac"]
  - inputs:
    - '[Right "",Left 6,Left 5,Left -1]'
    output: Right [""]
  - inputs:
    - '[Left 9]'
    output: Right []
  - inputs:
    - '[Left 8]'
    output: Right []
  - inputs:
    - '[Left 6,Left 3,Left 2]'
    output: Right []
  - inputs:
    - '[Left 2]'
    output: Right []
  - inputs:
    - '[Right "aaa",Right "",Left 6]'
    output: Right ["", "aaa"]
  - inputs:
    - '[Right "",Left -1,Right "a"]'
    output: Right ["a", ""]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "cd",Right ""]'
    output: Right ["", "cd"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "dd"]'
    output: Right ["dd"]
  - inputs:
    - '[Left 4,Right "baca",Left -2,Right "adc",Left 2,Right "dccab"]'
    output: Right ["dccab", "adc", "baca"]
  - inputs:
    - '[Left 3,Left 9,Left 3]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "c",Left 6,Right "bccac",Right "b",Left 2]'
    output: Right ["b", "bccac", "c"]
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (rights (init es))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left 5,Left 7,Right "",Left 10,Left 1]'
    output: Right ["", ""]
  - inputs:
    - '[Right "bcdb",Right "addbd",Right "dbc",Right "abab"]'
    output: Right ["bcdb", "addbd", "dbc"]
  - inputs:
    - '[Left 5,Left 0,Right ""]'
    output: Right []
  - inputs:
    - '[Right "baabcb",Left 10]'
    output: Right ["baabcb"]
  - inputs:
    - '[Right "cbd"]'
    output: Right []
  - inputs:
    - '[Right "cc",Left 6,Left 8,Right "bacad"]'
    output: Right ["cc"]
  - inputs:
    - '[Right "c",Left 2,Left -2,Right "cca",Right "cc"]'
    output: Right ["c", "cca"]
  - inputs:
    - '[Left 7,Right "",Left 5,Right "bcac",Left 10,Left 1]'
    output: Right ["", "bcac"]
  - inputs:
    - '[Right "",Right "addbb",Left 7,Left 5]'
    output: Right ["", "addbb"]
  - inputs:
    - '[Left 2,Right "adbc"]'
    output: Right []
  - inputs:
    - '[Right "babd",Left 1,Left 3]'
    output: Right ["babd"]
  - inputs:
    - '[Left -2,Right "bb",Left 7]'
    output: Right ["bb"]
  - inputs:
    - '[Left -2]'
    output: Right []
  - inputs:
    - '[Left 8,Left 10]'
    output: Right []
  - inputs:
    - '[Left -2,Left 9,Left 10]'
    output: Right []
  control_examples:
  - inputs:
    - '[Right "abd"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 0]'
    output: Right []
  - inputs:
    - '[Right "",Left -1,Right "c",Right "bbb",Right "ccd"]'
    output: Right ["", "c", "bbb"]
  - inputs:
    - '[Right "d"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Left -2,Left 9]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Left 8,Left 10]'
    output: Right []
  - inputs:
    - '[Right "a"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Left 9,Left 10]'
    output: Right []
  - inputs:
    - '[Right "cbd"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "babd",Left 1,Left 3]'
    output: Right ["babd"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "baabcb",Left 10]'
    output: Right ["baabcb"]
  - inputs:
    - '[Right "add"]'
    output: Right []
  - inputs:
    - '[Left -2]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Left 7,Right "",Left 5,Right "bcac",Left 10,Left 1]'
    output: Right ["", "bcac"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Right "bb",Left 7]'
    output: Right ["bb"]
  - inputs:
    - '[Right "",Left 5,Left 7,Right "",Left 10,Left 1]'
    output: Right ["", ""]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 8,Right "ccc",Right "dda"]'
    output: Right ["ccc"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 1]'
    output: Right []
  - inputs:
    - '[Left 5,Left 0,Right ""]'
    output: Right []
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (rights es)
  sorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "babc",Right "",Left 7,Right "d",Right ""]'
    output: Right ["babc", "", "d", ""]
  - inputs:
    - '[Left 5,Right "a",Left 2,Left 2]'
    output: Right ["a"]
  - inputs:
    - '[Left 8,Left 6,Left 5,Left 8,Right "bd",Right "cadbb"]'
    output: Right ["bd", "cadbb"]
  - inputs:
    - '[Right "bc",Right ""]'
    output: Right ["bc", ""]
  - inputs:
    - '[Right "dcb",Left 2,Right "ccbcd",Right "aabab",Left 9]'
    output: Right ["dcb", "ccbcd", "aabab"]
  - inputs:
    - '[Left 4,Right "cdbcd",Right "c",Right "adbca",Right "cb",Right "a"]'
    output: Right ["cdbcd", "c", "adbca", "cb", "a"]
  - inputs:
    - '[Left 8,Right "ccabb",Right "dbdb",Left 6,Right "ba",Left 7]'
    output: Right ["ccabb", "dbdb", "ba"]
  - inputs:
    - '[Right "a",Left 5,Left -2,Left 7,Right "cdcbb"]'
    output: Right ["a", "cdcbb"]
  - inputs:
    - '[Right "b"]'
    output: Right ["b"]
  - inputs:
    - '[Right "aac",Right "bcc",Right "db"]'
    output: Right ["aac", "bcc", "db"]
  - inputs:
    - '[Left 9,Right "bac",Left 3,Left 10,Right "d"]'
    output: Right ["bac", "d"]
  - inputs:
    - '[Left 9]'
    output: Right []
  - inputs:
    - '[Left 3,Right "",Right "a"]'
    output: Right ["", "a"]
  - inputs:
    - '[Right "aaa",Right "",Left 6]'
    output: Right ["aaa", ""]
  - inputs:
    - '[Right "dc",Right "abb",Right "adddad",Left 0]'
    output: Right ["dc", "abb", "adddad"]
  - inputs:
    - '[Left 7,Right "b"]'
    output: Right ["b"]
  - inputs:
    - '[Left 10,Right "bad",Left 7,Right "acac"]'
    output: Right ["bad", "acac"]
  control_examples:
  - inputs:
    - '[Left 6]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 10,Right "bad",Left 7,Right "acac"]'
    output: Right ["bad", "acac"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 0,Right "babd",Left 9,Right "cadccd",Right "dcbbac"]'
    output: Right ["babd", "cadccd", "dcbbac"]
  - inputs:
    - '[Right "a"]'
    output: Right ["a"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "ad"]'
    output: Right ["ad"]
  - inputs:
    - '[Left 0,Left 5,Left -1,Left 6]'
    output: Right []
  - inputs:
    - '[Right "aaa",Right "",Left 6]'
    output: Right ["aaa", ""]
  - inputs:
    - '[Right "bc",Right ""]'
    output: Right ["bc", ""]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "cd",Right ""]'
    output: Right ["cd", ""]
  - inputs:
    - '[Right "dc",Right "abb",Right "adddad",Left 0]'
    output: Right ["dc", "abb", "adddad"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 7,Right "b"]'
    output: Right ["b"]
  - inputs:
    - '[Right "add"]'
    output: Right ["add"]
  - inputs:
    - '[Left 10,Right "aa"]'
    output: Right ["aa"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 3,Right "",Right "a"]'
    output: Right ["", "a"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "aac",Right "bcc",Right "db"]'
    output: Right ["aac", "bcc", "db"]
  - inputs:
    - '[Right "a",Left 5,Left -2,Left 7,Right "cdcbb"]'
    output: Right ["a", "cdcbb"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "b"]'
    output: Right ["b"]
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (init (rights es))
  sorted_examples:
  - inputs:
    - '[Left 4]'
    output: 'bottom'
  - inputs:
    - '[Right "cb",Right "",Right "",Right "d",Left -2,Left 2]'
    output: Right ["cb", "", ""]
  - inputs:
    - '[Right "ba",Left 5,Left 5,Left 7]'
    output: Right []
  - inputs:
    - '[Right "ad",Left 10,Right "dcbd",Left 9,Right "acba",Right "bac"]'
    output: Right ["ad", "dcbd", "acba"]
  - inputs:
    - '[Left -2,Right "baa",Right "cabcb"]'
    output: Right ["baa"]
  - inputs:
    - '[Left 6,Right "aa",Left 9,Left -1,Right "d",Right "bdb"]'
    output: Right ["aa", "d"]
  - inputs:
    - '[Right "",Left -2,Right "",Right "ab",Left 3]'
    output: Right ["", ""]
  - inputs:
    - '[Right "acb",Right "d",Right "",Right "adb"]'
    output: Right ["acb", "d", ""]
  - inputs:
    - '[Right "baabcb",Left 10]'
    output: Right []
  - inputs:
    - '[Left 3,Right "aca"]'
    output: Right []
  - inputs:
    - '[Left 6,Left 3,Left 2]'
    output: 'bottom'
  - inputs:
    - '[Right "cbca",Left -1,Right "d"]'
    output: Right ["cbca"]
  - inputs:
    - '[Right "dba",Right "dcbba",Right "cbbcb",Left 4,Left 6]'
    output: Right ["dba", "dcbba"]
  - inputs:
    - '[Right "cabbc",Right "acacb",Left -2,Right "cbb",Left 9]'
    output: Right ["cabbc", "acacb"]
  - inputs:
    - '[Right "bdd"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Left 0]'
    output: 'bottom'
  - inputs:
    - '[Left 7,Left 5,Right "bda",Right "dcaa"]'
    output: Right ["bda"]
  control_examples:
  - inputs:
    - '[Right "cabbc",Right "acacb",Left -2,Right "cbb",Left 9]'
    output: Right ["cabbc", "acacb"]
  - inputs:
    - '[Left 2,Left 0,Left 3]'
    output: 'bottom'
  - inputs:
    - '[Left -2,Right "baa",Right "cabcb"]'
    output: Right ["baa"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 4]'
    output: 'bottom'
  - inputs:
    - '[Left 0]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 3,Right "aca"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9,Left 0,Left 10]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "bdd"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "baabcb",Left 10]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "dba",Right "dcbba",Right "cbbcb",Left 4,Left 6]'
    output: Right ["dba", "dcbba"]
  - inputs:
    - '[Left 6,Left 3,Left 2]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 9]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -1]'
    output: 'bottom'
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (rights (tail es))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "bc",Right "c",Right "",Right "cac"]'
    output: Right ["c", "", "cac"]
  - inputs:
    - '[Left 10,Left 10,Left -2,Right "",Right "d",Left 4]'
    output: Right ["", "d"]
  - inputs:
    - '[Right "ba",Left 6,Left 10]'
    output: Right []
  - inputs:
    - '[Left 5,Right "cca",Right "abd"]'
    output: Right ["cca", "abd"]
  - inputs:
    - '[Left 3]'
    output: Right []
  - inputs:
    - '[Right "",Left 5,Left 7,Right "",Left 10,Left 1]'
    output: Right [""]
  - inputs:
    - '[Right "db",Right "d"]'
    output: Right ["d"]
  - inputs:
    - '[Left 7,Right "aaa",Left 4,Left 7,Right "d"]'
    output: Right ["aaa", "d"]
  - inputs:
    - '[Right "",Right "b",Left 7,Right "c"]'
    output: Right ["b", "c"]
  - inputs:
    - '[Left 5,Left 0,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "c",Left 1,Left -1,Right "cadcba"]'
    output: Right ["cadcba"]
  - inputs:
    - '[Left 1,Left 10]'
    output: Right []
  - inputs:
    - '[Right "dcba"]'
    output: Right []
  - inputs:
    - '[Right "b",Left 3,Right "b"]'
    output: Right ["b"]
  - inputs:
    - '[Left 7,Right "aac"]'
    output: Right ["aac"]
  control_examples:
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 3]'
    output: Right []
  - inputs:
    - '[Left 5,Left 0,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "c",Left 1,Left -1,Right "cadcba"]'
    output: Right ["cadcba"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left 4]'
    output: Right []
  - inputs:
    - '[Left 10,Left 10,Left -2,Right "",Right "d",Left 4]'
    output: Right ["", "d"]
  - inputs:
    - '[Right "db",Right "d"]'
    output: Right ["d"]
  - inputs:
    - '[Left 7,Right "aac"]'
    output: Right ["aac"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Left -1]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "",Left 5,Left 7,Right "",Left 10,Left 1]'
    output: Right [""]
  - inputs:
    - '[Left 9]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "bda",Left 10]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "dcba"]'
    output: Right []
  - inputs:
    - '[Left 9]'
    output: Right []
  - inputs:
    - '[Right "d"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "b",Left 7,Left 2]'
    output: Right []
  - inputs:
    - '[Right "b",Left 3,Right "b"]'
    output: Right ["b"]
  - inputs:
    - '[]'
    output: 'bottom'
  - inputs:
    - '[Right "ad"]'
    output: Right []
  - inputs:
    - '[]'
    output: 'bottom'
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool (Just v) Nothing b
  sorted_examples:
  - inputs:
    - 'True'
    - '5'
    output: Nothing
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  control_examples:
  - inputs:
    - 'True'
    - '4'
    output: Nothing
  - inputs:
    - 'True'
    - '6'
    output: Nothing
  - inputs:
    - 'True'
    - '1'
    output: Nothing
  - inputs:
    - 'True'
    - '5'
    output: Nothing
  - inputs:
    - 'True'
    - '7'
    output: Nothing
  - inputs:
    - 'False'
    - '1'
    output: Just 1
  - inputs:
    - 'False'
    - '4'
    output: Just 4
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  - inputs:
    - 'True'
    - '5'
    output: Nothing
  - inputs:
    - 'False'
    - '2'
    output: Just 2
  - inputs:
    - 'True'
    - '0'
    output: Nothing
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  - inputs:
    - 'True'
    - '7'
    output: Nothing
  - inputs:
    - 'False'
    - '4'
    output: Just 4
  - inputs:
    - 'True'
    - '8'
    output: Nothing
  - inputs:
    - 'True'
    - '4'
    output: Nothing
  - inputs:
    - 'False'
    - '10'
    output: Just 10
  - inputs:
    - 'True'
    - '10'
    output: Nothing
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool (Just v) (fromJust Nothing) b
  sorted_examples:
  - inputs:
    - 'True'
    - '1'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'False'
    - '1'
    output: Just 1
  control_examples:
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  - inputs:
    - 'False'
    - '8'
    output: Just 8
  - inputs:
    - 'True'
    - '8'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'True'
    - '4'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'True'
    - '7'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'True'
    - '8'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'True'
    - '10'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'True'
    - '2'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'True'
    - '0'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'True'
    - '1'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'True'
    - '7'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'False'
    - '0'
    output: Just 0
  - inputs:
    - 'True'
    - '1'
    output: 'Maybe.fromJust: Nothing'
  - inputs:
    - 'False'
    - '5'
    output: Just 5
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  - inputs:
    - 'False'
    - '1'
    output: Just 1
  - inputs:
    - 'False'
    - '3'
    output: Just 3
  - inputs:
    - 'False'
    - '1'
    output: Just 1
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool (Just v) (Just v) b
  sorted_examples:
  - inputs:
    - 'False'
    - '8'
    output: Just 8
  - inputs:
    - 'True'
    - '5'
    output: Just 5
  control_examples:
  - inputs:
    - 'False'
    - '7'
    output: Just 7
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  - inputs:
    - 'True'
    - '10'
    output: Just 10
  - inputs:
    - 'True'
    - '-1'
    output: Just -1
  - inputs:
    - 'False'
    - '3'
    output: Just 3
  - inputs:
    - 'True'
    - '-2'
    output: Just -2
  - inputs:
    - 'False'
    - '-1'
    output: Just -1
  - inputs:
    - 'True'
    - '7'
    output: Just 7
  - inputs:
    - 'False'
    - '8'
    output: Just 8
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  - inputs:
    - 'True'
    - '8'
    output: Just 8
  - inputs:
    - 'True'
    - '1'
    output: Just 1
  - inputs:
    - 'False'
    - '3'
    output: Just 3
  - inputs:
    - 'True'
    - '5'
    output: Just 5
  - inputs:
    - 'True'
    - '9'
    output: Just 9
  - inputs:
    - 'True'
    - '0'
    output: Just 0
  - inputs:
    - 'True'
    - '0'
    output: Just 0
  - inputs:
    - 'False'
    - '-2'
    output: Just -2
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool Nothing (Just v) b
  sorted_examples:
  - inputs:
    - 'False'
    - '8'
    output: Nothing
  - inputs:
    - 'True'
    - '2'
    output: Just 2
  control_examples:
  - inputs:
    - 'False'
    - '9'
    output: Nothing
  - inputs:
    - 'True'
    - '4'
    output: Just 4
  - inputs:
    - 'False'
    - '1'
    output: Nothing
  - inputs:
    - 'True'
    - '8'
    output: Just 8
  - inputs:
    - 'True'
    - '8'
    output: Just 8
  - inputs:
    - 'False'
    - '7'
    output: Nothing
  - inputs:
    - 'False'
    - '-2'
    output: Nothing
  - inputs:
    - 'False'
    - '0'
    output: Nothing
  - inputs:
    - 'True'
    - '0'
    output: Just 0
  - inputs:
    - 'False'
    - '8'
    output: Nothing
  - inputs:
    - 'True'
    - '9'
    output: Just 9
  - inputs:
    - 'False'
    - '-1'
    output: Nothing
  - inputs:
    - 'False'
    - '6'
    output: Nothing
  - inputs:
    - 'True'
    - '2'
    output: Just 2
  - inputs:
    - 'True'
    - '-1'
    output: Just -1
  - inputs:
    - 'False'
    - '9'
    output: Nothing
  - inputs:
    - 'False'
    - '2'
    output: Nothing
  - inputs:
    - 'False'
    - '4'
    output: Nothing
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool (head []) (Just v) b
  sorted_examples:
  - inputs:
    - 'False'
    - '0'
    output: 'bottom'
  - inputs:
    - 'True'
    - '10'
    output: Just 10
  control_examples:
  - inputs:
    - 'False'
    - '0'
    output: 'bottom'
  - inputs:
    - 'False'
    - '1'
    output: 'bottom'
  - inputs:
    - 'True'
    - '9'
    output: Just 9
  - inputs:
    - 'False'
    - '-1'
    output: 'bottom'
  - inputs:
    - 'True'
    - '5'
    output: Just 5
  - inputs:
    - 'False'
    - '3'
    output: 'bottom'
  - inputs:
    - 'True'
    - '7'
    output: Just 7
  - inputs:
    - 'False'
    - '6'
    output: 'bottom'
  - inputs:
    - 'False'
    - '7'
    output: 'bottom'
  - inputs:
    - 'True'
    - '10'
    output: Just 10
  - inputs:
    - 'False'
    - '4'
    output: 'bottom'
  - inputs:
    - 'False'
    - '4'
    output: 'bottom'
  - inputs:
    - 'True'
    - '10'
    output: Just 10
  - inputs:
    - 'False'
    - '-1'
    output: 'bottom'
  - inputs:
    - 'True'
    - '4'
    output: Just 4
  - inputs:
    - 'False'
    - '4'
    output: 'bottom'
  - inputs:
    - 'True'
    - '7'
    output: Just 7
  - inputs:
    - 'False'
    - '0'
    output: 'bottom'
- name: testEither
  query: 'b: Bool -> vl: a -> vr: b -> Either a b'
  candidate: \b vl vr -> bool (Right vr) (Left vl) b
  sorted_examples:
  - inputs:
    - 'True'
    - '8'
    - '"db"'
    output: Left 8
  - inputs:
    - 'False'
    - '6'
    - '"dd"'
    output: Right "dd"
  control_examples:
  - inputs:
    - 'True'
    - '9'
    - '""'
    output: Left 9
  - inputs:
    - 'True'
    - '-1'
    - '""'
    output: Left -1
  - inputs:
    - 'False'
    - '8'
    - '"dbda"'
    output: Right "dbda"
  - inputs:
    - 'False'
    - '1'
    - '"baca"'
    output: Right "baca"
  - inputs:
    - 'False'
    - '8'
    - '"aabcb"'
    output: Right "aabcb"
  - inputs:
    - 'True'
    - '7'
    - '"ddada"'
    output: Left 7
  - inputs:
    - 'True'
    - '2'
    - '""'
    output: Left 2
  - inputs:
    - 'True'
    - '10'
    - '"b"'
    output: Left 10
  - inputs:
    - 'True'
    - '8'
    - '"db"'
    output: Left 8
  - inputs:
    - 'True'
    - '9'
    - '"ad"'
    output: Left 9
  - inputs:
    - 'True'
    - '7'
    - '""'
    output: Left 7
  - inputs:
    - 'True'
    - '7'
    - '"bba"'
    output: Left 7
- name: testEither
  query: 'b: Bool -> vl: a -> vr: b -> Either a b'
  candidate: \b vl vr -> bool (Left vl) (Right vr) b
  sorted_examples:
  - inputs:
    - 'True'
    - '8'
    - '"db"'
    output: Right "db"
  - inputs:
    - 'False'
    - '-1'
    - '""'
    output: Left -1
  control_examples:
  - inputs:
    - 'False'
    - '6'
    - '"b"'
    output: Left 6
  - inputs:
    - 'True'
    - '-1'
    - '""'
    output: Right ""
  - inputs:
    - 'True'
    - '4'
    - '"cc"'
    output: Right "cc"
  - inputs:
    - 'False'
    - '9'
    - '"db"'
    output: Left 9
  - inputs:
    - 'True'
    - '4'
    - '"d"'
    output: Right "d"
  - inputs:
    - 'False'
    - '2'
    - '""'
    output: Left 2
  - inputs:
    - 'True'
    - '8'
    - '"db"'
    output: Right "db"
  - inputs:
    - 'False'
    - '3'
    - '"a"'
    output: Left 3
  - inputs:
    - 'False'
    - '1'
    - '""'
    output: Left 1
  - inputs:
    - 'True'
    - '4'
    - '""'
    output: Right ""
  - inputs:
    - 'False'
    - '-2'
    - '"d"'
    output: Left -2
  - inputs:
    - 'True'
    - '1'
    - '""'
    output: Right ""
