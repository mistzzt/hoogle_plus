- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (head xs)
  sorted_examples:
  - inputs:
    - '7'
    - '[Just 10,Just 6,Just 10,Just 9,Just 0]'
    output: '10'
  - inputs:
    - '2'
    - '[Just -2,Nothing]'
    output: '-2'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Just -2,Nothing,Nothing,Just 8]'
    output: '6'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '2'
    - '[Just 2,Just 9,Just 5]'
    output: '2'
  - inputs:
    - '-1'
    - '[Just 10,Nothing,Nothing,Just 1]'
    output: '10'
  - inputs:
    - '5'
    - '[Just 1,Just -2,Nothing,Nothing]'
    output: '1'
  - inputs:
    - '3'
    - '[Just 1,Nothing,Just -1,Nothing]'
    output: '1'
  - inputs:
    - '9'
    - '[Just 6,Just 1,Just 3,Nothing,Just 7,Nothing]'
    output: '6'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just -2]'
    output: '-1'
  - inputs:
    - '5'
    - '[Just 1,Just 9,Just 0,Just 1]'
    output: '1'
  - inputs:
    - '1'
    - '[Just 4,Just 4,Just 5,Just 4,Nothing,Just 0]'
    output: '4'
  - inputs:
    - '4'
    - '[Just 4,Just 5,Just 2,Just -2,Just 6,Just 3]'
    output: '4'
  - inputs:
    - '5'
    - '[Just -1]'
    output: '-1'
  - inputs:
    - '-2'
    - '[Just 1,Just 6,Nothing,Just -1,Just 9]'
    output: '1'
  - inputs:
    - '-2'
    - '[Nothing,Just 5,Just 2,Just 7]'
    output: '-2'
  - inputs:
    - '-1'
    - '[Just 6,Just 1,Nothing]'
    output: '6'
  unsorted_examples:
  - inputs:
    - '7'
    - '[Just 10,Just 6,Just 10,Just 9,Just 0]'
    output: '10'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just -2]'
    output: '-1'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '2'
    - '[Just 2,Just 9,Just 5]'
    output: '2'
  - inputs:
    - '5'
    - '[Just -1]'
    output: '-1'
  - inputs:
    - '4'
    - '[Just 4,Just 5,Just 2,Just -2,Just 6,Just 3]'
    output: '4'
  - inputs:
    - '-1'
    - '[Just 6,Just 1,Nothing]'
    output: '6'
  - inputs:
    - '-2'
    - '[Just 1,Just 6,Nothing,Just -1,Just 9]'
    output: '1'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Just -2,Nothing,Nothing,Just 8]'
    output: '6'
  - inputs:
    - '5'
    - '[Just 1,Just 9,Just 0,Just 1]'
    output: '1'
  - inputs:
    - '9'
    - '[Just 6,Just 1,Just 3,Nothing,Just 7,Nothing]'
    output: '6'
  - inputs:
    - '-1'
    - '[Just 10,Nothing,Nothing,Just 1]'
    output: '10'
  - inputs:
    - '5'
    - '[Just 1,Just -2,Nothing,Nothing]'
    output: '1'
  - inputs:
    - '1'
    - '[Just 4,Just 4,Just 5,Just 4,Nothing,Just 0]'
    output: '4'
  - inputs:
    - '2'
    - '[Just -2,Nothing]'
    output: '-2'
  - inputs:
    - '3'
    - '[Just 1,Nothing,Just -1,Nothing]'
    output: '1'
  - inputs:
    - '-2'
    - '[Nothing,Just 5,Just 2,Just 7]'
    output: '-2'
  control_examples:
  - inputs:
    - '7'
    - '[Just 10,Just 6,Just 10,Just 9,Just 0]'
    output: '10'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just -2]'
    output: '-1'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '2'
    - '[Just 2,Just 9,Just 5]'
    output: '2'
  - inputs:
    - '5'
    - '[Just -1]'
    output: '-1'
  - inputs:
    - '4'
    - '[Just 4,Just 5,Just 2,Just -2,Just 6,Just 3]'
    output: '4'
  - inputs:
    - '-1'
    - '[Just 6,Just 1,Nothing]'
    output: '6'
  - inputs:
    - '-2'
    - '[Just 1,Just 6,Nothing,Just -1,Just 9]'
    output: '1'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Just -2,Nothing,Nothing,Just 8]'
    output: '6'
  - inputs:
    - '5'
    - '[Just 1,Just 9,Just 0,Just 1]'
    output: '1'
  - inputs:
    - '3'
    - '[Just 1,Nothing,Just -1,Nothing]'
    output: '1'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (last xs)
  sorted_examples:
  - inputs:
    - '7'
    - '[Just 10,Just 6,Just 10,Just 9,Just 0]'
    output: '0'
  - inputs:
    - '6'
    - '[Just 8,Nothing]'
    output: '6'
  - inputs:
    - '5'
    - '[Just 9,Nothing,Nothing,Just 3,Nothing]'
    output: '5'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '10'
    - '[Nothing,Nothing,Just 1,Just 8]'
    output: '8'
  - inputs:
    - '4'
    - '[Nothing,Just 0]'
    output: '0'
  - inputs:
    - '-2'
    - '[Just 5,Just 0,Just 9]'
    output: '9'
  - inputs:
    - '2'
    - '[Just 5,Just 8,Just -1,Just 3]'
    output: '3'
  - inputs:
    - '10'
    - '[Just -2,Just 5,Nothing]'
    output: '10'
  - inputs:
    - '3'
    - '[Nothing]'
    output: '3'
  - inputs:
    - '2'
    - '[Just -1,Just 7,Nothing,Just 9,Just 6,Just 4]'
    output: '4'
  - inputs:
    - '10'
    - '[Nothing,Just 7,Just 4]'
    output: '4'
  - inputs:
    - '5'
    - '[Just 9,Just 10]'
    output: '10'
  - inputs:
    - '9'
    - '[Just 10,Nothing,Just 5,Just 8]'
    output: '8'
  - inputs:
    - '-2'
    - '[Just 1]'
    output: '1'
  - inputs:
    - '-2'
    - '[Nothing,Just 7,Just 3,Just -1]'
    output: '-1'
  unsorted_examples:
  - inputs:
    - '7'
    - '[Just 10,Just 6,Just 10,Just 9,Just 0]'
    output: '0'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '-2'
    - '[Just 5,Just 0,Just 9]'
    output: '9'
  - inputs:
    - '5'
    - '[Just 9,Just 10]'
    output: '10'
  - inputs:
    - '3'
    - '[Nothing]'
    output: '3'
  - inputs:
    - '10'
    - '[Just -2,Just 5,Nothing]'
    output: '10'
  - inputs:
    - '-2'
    - '[Just 1]'
    output: '1'
  - inputs:
    - '10'
    - '[Nothing,Just 7,Just 4]'
    output: '4'
  - inputs:
    - '2'
    - '[Just 5,Just 8,Just -1,Just 3]'
    output: '3'
  - inputs:
    - '6'
    - '[Just 8,Nothing]'
    output: '6'
  - inputs:
    - '10'
    - '[Nothing,Nothing,Just 1,Just 8]'
    output: '8'
  - inputs:
    - '2'
    - '[Just -1,Just 7,Nothing,Just 9,Just 6,Just 4]'
    output: '4'
  - inputs:
    - '5'
    - '[Just 9,Nothing,Nothing,Just 3,Nothing]'
    output: '5'
  - inputs:
    - '4'
    - '[Nothing,Just 0]'
    output: '0'
  - inputs:
    - '9'
    - '[Just 10,Nothing,Just 5,Just 8]'
    output: '8'
  - inputs:
    - '-2'
    - '[Nothing,Just 7,Just 3,Just -1]'
    output: '-1'
  control_examples:
  - inputs:
    - '7'
    - '[Just 10,Just 6,Just 10,Just 9,Just 0]'
    output: '0'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '-2'
    - '[Just 5,Just 0,Just 9]'
    output: '9'
  - inputs:
    - '5'
    - '[Just 9,Just 10]'
    output: '10'
  - inputs:
    - '3'
    - '[Nothing]'
    output: '3'
  - inputs:
    - '10'
    - '[Just -2,Just 5,Nothing]'
    output: '10'
  - inputs:
    - '-2'
    - '[Just 1]'
    output: '1'
  - inputs:
    - '10'
    - '[Nothing,Just 7,Just 4]'
    output: '4'
  - inputs:
    - '2'
    - '[Just 5,Just 8,Just -1,Just 3]'
    output: '3'
  - inputs:
    - '6'
    - '[Just 8,Nothing]'
    output: '6'
  - inputs:
    - '-1'
    - '[Nothing,Nothing,Just -2,Just 10,Just 3]'
    output: '3'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (listToMaybe (catMaybes xs))
  sorted_examples:
  - inputs:
    - '4'
    - '[]'
    output: '4'
  - inputs:
    - '8'
    - '[Just -2,Just 10,Nothing,Just -1,Just 10,Just 3]'
    output: '-2'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just -2]'
    output: '1'
  - inputs:
    - '0'
    - '[Just 3,Just 3,Just 10,Just -2,Nothing]'
    output: '3'
  - inputs:
    - '2'
    - '[Just 0,Nothing,Nothing,Nothing]'
    output: '0'
  - inputs:
    - '6'
    - '[Just 0,Nothing,Just -1,Just 1,Just -2,Just 0]'
    output: '0'
  - inputs:
    - '2'
    - '[Just -1,Just 6,Nothing]'
    output: '-1'
  - inputs:
    - '-2'
    - '[Just 9,Nothing,Just 10]'
    output: '9'
  - inputs:
    - '4'
    - '[Just 3,Just 3,Just 4,Nothing,Just 5]'
    output: '3'
  - inputs:
    - '10'
    - '[Just 10,Just 7,Just -1,Just 10,Just 0,Just 1]'
    output: '10'
  - inputs:
    - '-1'
    - '[Just -2]'
    output: '-2'
  - inputs:
    - '1'
    - '[Just 4,Just 8,Just 5,Just 10,Just 8]'
    output: '4'
  - inputs:
    - '-2'
    - '[Nothing,Nothing,Just 4,Just 6]'
    output: '4'
  - inputs:
    - '0'
    - '[Just 2,Just 7]'
    output: '2'
  - inputs:
    - '-1'
    - '[Nothing]'
    output: '-1'
  unsorted_examples:
  - inputs:
    - '4'
    - '[]'
    output: '4'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just -2]'
    output: '1'
  - inputs:
    - '10'
    - '[Just 10,Just 7,Just -1,Just 10,Just 0,Just 1]'
    output: '10'
  - inputs:
    - '0'
    - '[Just 2,Just 7]'
    output: '2'
  - inputs:
    - '8'
    - '[Just -2,Just 10,Nothing,Just -1,Just 10,Just 3]'
    output: '-2'
  - inputs:
    - '1'
    - '[Just 4,Just 8,Just 5,Just 10,Just 8]'
    output: '4'
  - inputs:
    - '-1'
    - '[Just -2]'
    output: '-2'
  - inputs:
    - '-1'
    - '[Nothing]'
    output: '-1'
  - inputs:
    - '6'
    - '[Just 0,Nothing,Just -1,Just 1,Just -2,Just 0]'
    output: '0'
  - inputs:
    - '-2'
    - '[Nothing,Nothing,Just 4,Just 6]'
    output: '4'
  - inputs:
    - '2'
    - '[Just 0,Nothing,Nothing,Nothing]'
    output: '0'
  - inputs:
    - '-2'
    - '[Just 9,Nothing,Just 10]'
    output: '9'
  - inputs:
    - '4'
    - '[Just 3,Just 3,Just 4,Nothing,Just 5]'
    output: '3'
  - inputs:
    - '0'
    - '[Just 3,Just 3,Just 10,Just -2,Nothing]'
    output: '3'
  - inputs:
    - '2'
    - '[Just -1,Just 6,Nothing]'
    output: '-1'
  control_examples:
  - inputs:
    - '4'
    - '[]'
    output: '4'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just -2]'
    output: '1'
  - inputs:
    - '10'
    - '[Just 10,Just 7,Just -1,Just 10,Just 0,Just 1]'
    output: '10'
  - inputs:
    - '0'
    - '[Just 2,Just 7]'
    output: '2'
  - inputs:
    - '8'
    - '[Just -2,Just 10,Nothing,Just -1,Just 10,Just 3]'
    output: '-2'
  - inputs:
    - '1'
    - '[Just 4,Just 8,Just 5,Just 10,Just 8]'
    output: '4'
  - inputs:
    - '-1'
    - '[Just -2]'
    output: '-2'
  - inputs:
    - '-1'
    - '[Nothing]'
    output: '-1'
  - inputs:
    - '2'
    - '[Nothing,Just 9]'
    output: '9'
  - inputs:
    - '8'
    - '[Just 6,Just 1,Just 4,Nothing]'
    output: '6'
  - inputs:
    - '6'
    - '[Nothing,Just 9,Just -2,Just 1]'
    output: '9'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> foldl (head []) x xs
  sorted_examples:
  - inputs:
    - '10'
    - '[Just 10,Just 7,Just -1,Just 10,Just 0,Just 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: '-1'
  - inputs:
    - '-2'
    - '[Just 8,Nothing,Just 5]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[Nothing,Just 6,Just 2,Nothing,Just 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '4'
    - '[Just 9,Nothing,Just 5,Just -1,Nothing,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Nothing,Just 7,Just 4]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[Just 3,Just 6,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 8,Nothing,Just 1,Nothing,Just 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Just 5,Just 0,Just 9]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '6'
    - '[Just 9,Just 8,Just 7,Just 8,Just 8,Just 4,Just 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 5,Just 10,Nothing,Just 3,Just 1,Just 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[Just 10,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[Just 2,Just 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '3'
    - '[Just 10,Nothing,Just -2,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '4'
    - '[Just 5,Just 0,Just 3,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 6,Just 9,Just -1,Just 1,Just -1]'
    output: 'Prelude.head: empty list'
  unsorted_examples:
  - inputs:
    - '10'
    - '[Just 10,Just 7,Just -1,Just 10,Just 0,Just 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[Just 2,Just 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Just 5,Just 0,Just 9]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: '-1'
  - inputs:
    - '9'
    - '[Just 10,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Just 8,Nothing,Just 5]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[Just 3,Just 6,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 5,Just 10,Nothing,Just 3,Just 1,Just 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[Nothing,Just 6,Just 2,Nothing,Just 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '4'
    - '[Just 9,Nothing,Just 5,Just -1,Nothing,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 6,Just 9,Just -1,Just 1,Just -1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '6'
    - '[Just 9,Just 8,Just 7,Just 8,Just 8,Just 4,Just 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Nothing,Just 7,Just 4]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '3'
    - '[Just 10,Nothing,Just -2,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 8,Nothing,Just 1,Nothing,Just 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '4'
    - '[Just 5,Just 0,Just 3,Nothing]'
    output: 'Prelude.head: empty list'
  control_examples:
  - inputs:
    - '10'
    - '[Just 10,Just 7,Just -1,Just 10,Just 0,Just 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[Just 2,Just 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Just 5,Just 0,Just 9]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: '-1'
  - inputs:
    - '9'
    - '[Just 10,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Just 8,Nothing,Just 5]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[Just 3,Just 6,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[Just 5,Just 10,Nothing,Just 3,Just 1,Just 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[Nothing,Just 6,Just 2,Nothing,Just 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '8'
    - '[Just 4,Just -2,Just 8,Nothing,Just 10,Just 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[Just 6,Just -2,Nothing,Just 2,Just 4,Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '6'
    - '[Just 1,Just 1,Nothing,Just 2,Just 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '2'
    - '[Nothing]'
    output: 'Prelude.head: empty list'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> bool x x (null xs)
  sorted_examples:
  - inputs:
    - '9'
    - '[Just 10,Nothing]'
    output: '9'
  - inputs:
    - '8'
    - '[Just 9,Just 7,Just 6,Just -1,Just -1,Just -1]'
    output: '8'
  - inputs:
    - '4'
    - '[Just -2,Just 4,Just 8]'
    output: '4'
  - inputs:
    - '1'
    - '[Just 7,Nothing,Just 1,Nothing]'
    output: '1'
  - inputs:
    - '-1'
    - '[]'
    output: '-1'
  - inputs:
    - '4'
    - '[Just 6,Just 1,Nothing,Just 4,Just 9]'
    output: '4'
  - inputs:
    - '8'
    - '[Just 1,Nothing,Nothing,Just 6]'
    output: '8'
  - inputs:
    - '4'
    - '[Nothing,Just 3]'
    output: '4'
  - inputs:
    - '5'
    - '[Just 9,Just 10]'
    output: '5'
  - inputs:
    - '8'
    - '[Just -2,Just 10,Nothing,Just -1,Just 10,Just 3]'
    output: '8'
  - inputs:
    - '1'
    - '[Just 4,Just 8,Just 5,Just 10,Just 8]'
    output: '1'
  - inputs:
    - '3'
    - '[Nothing,Just 3,Just 2]'
    output: '3'
  - inputs:
    - '6'
    - '[Nothing]'
    output: '6'
  - inputs:
    - '7'
    - '[Just 6]'
    output: '7'
  unsorted_examples:
  - inputs:
    - '9'
    - '[Just 10,Nothing]'
    output: '9'
  - inputs:
    - '7'
    - '[Just 6]'
    output: '7'
  - inputs:
    - '8'
    - '[Just -2,Just 10,Nothing,Just -1,Just 10,Just 3]'
    output: '8'
  - inputs:
    - '1'
    - '[Just 4,Just 8,Just 5,Just 10,Just 8]'
    output: '1'
  - inputs:
    - '5'
    - '[Just 9,Just 10]'
    output: '5'
  - inputs:
    - '-1'
    - '[]'
    output: '-1'
  - inputs:
    - '4'
    - '[Nothing,Just 3]'
    output: '4'
  - inputs:
    - '6'
    - '[Nothing]'
    output: '6'
  - inputs:
    - '3'
    - '[Nothing,Just 3,Just 2]'
    output: '3'
  - inputs:
    - '4'
    - '[Just -2,Just 4,Just 8]'
    output: '4'
  - inputs:
    - '8'
    - '[Just 1,Nothing,Nothing,Just 6]'
    output: '8'
  - inputs:
    - '1'
    - '[Just 7,Nothing,Just 1,Nothing]'
    output: '1'
  - inputs:
    - '8'
    - '[Just 9,Just 7,Just 6,Just -1,Just -1,Just -1]'
    output: '8'
  - inputs:
    - '4'
    - '[Just 6,Just 1,Nothing,Just 4,Just 9]'
    output: '4'
  control_examples:
  - inputs:
    - '9'
    - '[Just 10,Nothing]'
    output: '9'
  - inputs:
    - '7'
    - '[Just 6]'
    output: '7'
  - inputs:
    - '8'
    - '[Just -2,Just 10,Nothing,Just -1,Just 10,Just 3]'
    output: '8'
  - inputs:
    - '1'
    - '[Just 4,Just 8,Just 5,Just 10,Just 8]'
    output: '1'
  - inputs:
    - '5'
    - '[Just 9,Just 10]'
    output: '5'
  - inputs:
    - '-1'
    - '[]'
    output: '-1'
  - inputs:
    - '4'
    - '[Nothing,Just 3]'
    output: '4'
  - inputs:
    - '6'
    - '[Nothing]'
    output: '6'
  - inputs:
    - '3'
    - '[Nothing,Just 3,Just 2]'
    output: '3'
  - inputs:
    - '4'
    - '[Just 6,Just 1,Nothing,Just 4,Just 9]'
    output: '4'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (head (init xs))
  sorted_examples:
  - inputs:
    - '0'
    - '[Just -1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Just 0,Nothing,Just 6,Just 5,Nothing]'
    output: '0'
  - inputs:
    - '10'
    - '[Just 8,Just 9,Just 4,Just 7,Just 1,Just 5]'
    output: '8'
  - inputs:
    - '3'
    - '[Just 9,Just 2,Nothing,Just 5]'
    output: '9'
  - inputs:
    - '5'
    - '[Just 2,Just -1]'
    output: '2'
  - inputs:
    - '8'
    - '[Nothing,Just 1,Nothing]'
    output: '8'
  - inputs:
    - '3'
    - '[Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just 3,Nothing]'
    output: '-1'
  - inputs:
    - '6'
    - '[Just 2,Just 5,Just 2]'
    output: '2'
  - inputs:
    - '7'
    - '[Just 10,Nothing]'
    output: '10'
  - inputs:
    - '10'
    - '[Just -2,Just 5,Nothing]'
    output: '-2'
  - inputs:
    - '5'
    - '[Nothing,Just -2]'
    output: '5'
  - inputs:
    - '6'
    - '[Just 7,Nothing,Just 4,Just 1]'
    output: '7'
  - inputs:
    - '3'
    - '[]'
    output: 'Prelude.init: empty list'
  unsorted_examples:
  - inputs:
    - '0'
    - '[Just -1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '3'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '5'
    - '[Just 2,Just -1]'
    output: '2'
  - inputs:
    - '3'
    - '[Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[Just -2,Just 5,Nothing]'
    output: '-2'
  - inputs:
    - '-2'
    - '[Just 0,Nothing,Just 6,Just 5,Nothing]'
    output: '0'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just 3,Nothing]'
    output: '-1'
  - inputs:
    - '6'
    - '[Just 7,Nothing,Just 4,Just 1]'
    output: '7'
  - inputs:
    - '6'
    - '[Just 2,Just 5,Just 2]'
    output: '2'
  - inputs:
    - '7'
    - '[Just 10,Nothing]'
    output: '10'
  - inputs:
    - '10'
    - '[Just 8,Just 9,Just 4,Just 7,Just 1,Just 5]'
    output: '8'
  - inputs:
    - '8'
    - '[Nothing,Just 1,Nothing]'
    output: '8'
  - inputs:
    - '5'
    - '[Nothing,Just -2]'
    output: '5'
  - inputs:
    - '3'
    - '[Just 9,Just 2,Nothing,Just 5]'
    output: '9'
  control_examples:
  - inputs:
    - '0'
    - '[Just -1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '3'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '5'
    - '[Just 2,Just -1]'
    output: '2'
  - inputs:
    - '3'
    - '[Nothing]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[Just -2,Just 5,Nothing]'
    output: '-2'
  - inputs:
    - '-2'
    - '[Just 0,Nothing,Just 6,Just 5,Nothing]'
    output: '0'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just 3,Nothing]'
    output: '-1'
  - inputs:
    - '6'
    - '[Just 7,Nothing,Just 4,Just 1]'
    output: '7'
  - inputs:
    - '6'
    - '[Just 2,Just 5,Just 2]'
    output: '2'
  - inputs:
    - '7'
    - '[Just 10,Nothing]'
    output: '10'
  - inputs:
    - '10'
    - '[Just 8,Just 9,Just 4,Just 7,Just 1,Just 5]'
    output: '8'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (last (init xs))
  sorted_examples:
  - inputs:
    - '-2'
    - '[Just 0,Nothing,Just 6,Just 5,Nothing]'
    output: '5'
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '9'
    - '[Just -1,Just 4]'
    output: '-1'
  - inputs:
    - '10'
    - '[Nothing,Nothing]'
    output: '10'
  - inputs:
    - '4'
    - '[Just 4,Just 5,Just 2,Just -2,Just 6,Just 3]'
    output: '6'
  - inputs:
    - '5'
    - '[Nothing,Nothing,Just -2,Just -2,Nothing]'
    output: '-2'
  - inputs:
    - '0'
    - '[Just 7,Just 2,Just 8,Just 4]'
    output: '8'
  - inputs:
    - '-2'
    - '[Nothing,Just 9]'
    output: '-2'
  - inputs:
    - '-2'
    - '[Just 1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Nothing]'
    output: '4'
  - inputs:
    - '-2'
    - '[Just 5,Nothing,Just -1,Just 3,Just 5,Just 9]'
    output: '5'
  - inputs:
    - '-1'
    - '[Nothing]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just 3,Nothing]'
    output: '3'
  - inputs:
    - '-1'
    - '[Just 5,Just 0,Just 9,Nothing]'
    output: '9'
  - inputs:
    - '-2'
    - '[Just 8,Nothing,Just 5]'
    output: '-2'
  - inputs:
    - '4'
    - '[Nothing,Just -2,Nothing]'
    output: '-2'
  unsorted_examples:
  - inputs:
    - '-2'
    - '[Just 0,Nothing,Just 6,Just 5,Nothing]'
    output: '5'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just 3,Nothing]'
    output: '3'
  - inputs:
    - '9'
    - '[Just -1,Just 4]'
    output: '-1'
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-2'
    - '[Just 8,Nothing,Just 5]'
    output: '-2'
  - inputs:
    - '-1'
    - '[Nothing]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '-2'
    - '[Just 1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '4'
    - '[Just 4,Just 5,Just 2,Just -2,Just 6,Just 3]'
    output: '6'
  - inputs:
    - '0'
    - '[Just 7,Just 2,Just 8,Just 4]'
    output: '8'
  - inputs:
    - '-2'
    - '[Just 5,Nothing,Just -1,Just 3,Just 5,Just 9]'
    output: '5'
  - inputs:
    - '-2'
    - '[Nothing,Just 9]'
    output: '-2'
  - inputs:
    - '-1'
    - '[Just 5,Just 0,Just 9,Nothing]'
    output: '9'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Nothing]'
    output: '4'
  - inputs:
    - '5'
    - '[Nothing,Nothing,Just -2,Just -2,Nothing]'
    output: '-2'
  - inputs:
    - '10'
    - '[Nothing,Nothing]'
    output: '10'
  - inputs:
    - '4'
    - '[Nothing,Just -2,Nothing]'
    output: '-2'
  control_examples:
  - inputs:
    - '-2'
    - '[Just 0,Nothing,Just 6,Just 5,Nothing]'
    output: '5'
  - inputs:
    - '-1'
    - '[Nothing,Just 1,Just 3,Nothing]'
    output: '3'
  - inputs:
    - '9'
    - '[Just -1,Just 4]'
    output: '-1'
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-2'
    - '[Just 8,Nothing,Just 5]'
    output: '-2'
  - inputs:
    - '-1'
    - '[Nothing]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '-2'
    - '[Just 1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '4'
    - '[Just 4,Just 5,Just 2,Just -2,Just 6,Just 3]'
    output: '6'
  - inputs:
    - '0'
    - '[Just 7,Just 2,Just 8,Just 4]'
    output: '8'
  - inputs:
    - '-2'
    - '[Just 5,Nothing,Just -1,Just 3,Just 5,Just 9]'
    output: '5'
  - inputs:
    - '-2'
    - '[Nothing,Just 9]'
    output: '-2'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Nothing]'
    output: '4'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (head (tail xs))
  sorted_examples:
  - inputs:
    - '0'
    - '[Just 7,Just 2,Just 8,Just 4]'
    output: '2'
  - inputs:
    - '9'
    - '[Just 1,Just 9,Just 10,Just -2,Just 5,Just -1]'
    output: '9'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '4'
    - '[Nothing,Just 3]'
    output: '3'
  - inputs:
    - '-1'
    - '[Just 6,Just 1,Nothing]'
    output: '1'
  - inputs:
    - '4'
    - '[Just 9,Nothing,Nothing,Just 9,Just -1]'
    output: '4'
  - inputs:
    - '10'
    - '[Nothing,Just 6,Nothing,Nothing]'
    output: '6'
  - inputs:
    - '10'
    - '[Nothing,Just 7,Just 4]'
    output: '7'
  - inputs:
    - '4'
    - '[Nothing,Nothing]'
    output: '4'
  - inputs:
    - '-2'
    - '[Just 1,Just 9,Nothing,Just 9]'
    output: '9'
  - inputs:
    - '5'
    - '[Just -1,Just 1,Just 5,Just 4,Just 9]'
    output: '1'
  - inputs:
    - '-1'
    - '[Just 8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '6'
    - '[Just 7,Nothing,Just 4,Just 1]'
    output: '6'
  - inputs:
    - '9'
    - '[Just 6,Just 3]'
    output: '3'
  - inputs:
    - '-2'
    - '[Just 1,Just 6,Nothing,Just -1,Just 9]'
    output: '6'
  - inputs:
    - '4'
    - '[Just 10,Just 8,Just -2,Nothing,Just -2]'
    output: '8'
  - inputs:
    - '6'
    - '[Just 2,Just 5,Just 2]'
    output: '5'
  unsorted_examples:
  - inputs:
    - '0'
    - '[Just 7,Just 2,Just 8,Just 4]'
    output: '2'
  - inputs:
    - '9'
    - '[Just 6,Just 3]'
    output: '3'
  - inputs:
    - '6'
    - '[Just 7,Nothing,Just 4,Just 1]'
    output: '6'
  - inputs:
    - '6'
    - '[Just 2,Just 5,Just 2]'
    output: '5'
  - inputs:
    - '4'
    - '[Nothing,Just 3]'
    output: '3'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '10'
    - '[Nothing,Just 7,Just 4]'
    output: '7'
  - inputs:
    - '-1'
    - '[Just 6,Just 1,Nothing]'
    output: '1'
  - inputs:
    - '-2'
    - '[Just 1,Just 6,Nothing,Just -1,Just 9]'
    output: '6'
  - inputs:
    - '4'
    - '[Just 10,Just 8,Just -2,Nothing,Just -2]'
    output: '8'
  - inputs:
    - '5'
    - '[Just -1,Just 1,Just 5,Just 4,Just 9]'
    output: '1'
  - inputs:
    - '-1'
    - '[Just 8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Just 1,Just 9,Nothing,Just 9]'
    output: '9'
  - inputs:
    - '9'
    - '[Just 1,Just 9,Just 10,Just -2,Just 5,Just -1]'
    output: '9'
  - inputs:
    - '4'
    - '[Just 9,Nothing,Nothing,Just 9,Just -1]'
    output: '4'
  - inputs:
    - '10'
    - '[Nothing,Just 6,Nothing,Nothing]'
    output: '6'
  - inputs:
    - '4'
    - '[Nothing,Nothing]'
    output: '4'
  control_examples:
  - inputs:
    - '0'
    - '[Just 7,Just 2,Just 8,Just 4]'
    output: '2'
  - inputs:
    - '9'
    - '[Just 6,Just 3]'
    output: '3'
  - inputs:
    - '6'
    - '[Just 7,Nothing,Just 4,Just 1]'
    output: '6'
  - inputs:
    - '6'
    - '[Just 2,Just 5,Just 2]'
    output: '5'
  - inputs:
    - '4'
    - '[Nothing,Just 3]'
    output: '3'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '10'
    - '[Nothing,Just 7,Just 4]'
    output: '7'
  - inputs:
    - '-1'
    - '[Just 6,Just 1,Nothing]'
    output: '1'
  - inputs:
    - '-2'
    - '[Just 1,Just 6,Nothing,Just -1,Just 9]'
    output: '6'
  - inputs:
    - '4'
    - '[Just 10,Just 8,Just -2,Nothing,Just -2]'
    output: '8'
  - inputs:
    - '5'
    - '[Just -1,Just 1,Just 5,Just 4,Just 9]'
    output: '1'
  - inputs:
    - '-1'
    - '[Just 8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[Just 1,Just 9,Nothing,Just 9]'
    output: '9'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> fromMaybe x (last (tail xs))
  sorted_examples:
  - inputs:
    - '4'
    - '[Just 10,Just 8,Just -2,Nothing,Just -2]'
    output: '-2'
  - inputs:
    - '6'
    - '[Nothing]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '3'
    - '[Just 1,Nothing,Nothing,Nothing]'
    output: '3'
  - inputs:
    - '2'
    - '[Just -1,Just 1,Just 2]'
    output: '2'
  - inputs:
    - '-2'
    - '[Just 5,Nothing,Just -1,Just 3,Just 5,Just 9]'
    output: '9'
  - inputs:
    - '-2'
    - '[Nothing,Just 9]'
    output: '9'
  - inputs:
    - '7'
    - '[Just 10,Nothing]'
    output: '7'
  - inputs:
    - '6'
    - '[Just -1,Just 4,Just 9,Just 3,Nothing]'
    output: '6'
  - inputs:
    - '9'
    - '[Just 3,Just 6,Nothing]'
    output: '9'
  - inputs:
    - '8'
    - '[Just 2]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '8'
    - '[Nothing,Nothing]'
    output: '8'
  - inputs:
    - '4'
    - '[Just 7,Just 0,Just 4,Nothing,Just -2,Just 6]'
    output: '6'
  - inputs:
    - '6'
    - '[Just 2,Just 5]'
    output: '5'
  - inputs:
    - '5'
    - '[Just -1,Just 1,Just 5,Just 4,Just 9]'
    output: '9'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.tail: empty list'
  unsorted_examples:
  - inputs:
    - '4'
    - '[Just 10,Just 8,Just -2,Nothing,Just -2]'
    output: '-2'
  - inputs:
    - '5'
    - '[Just -1,Just 1,Just 5,Just 4,Just 9]'
    output: '9'
  - inputs:
    - '-2'
    - '[Just 5,Nothing,Just -1,Just 3,Just 5,Just 9]'
    output: '9'
  - inputs:
    - '-2'
    - '[Nothing,Just 9]'
    output: '9'
  - inputs:
    - '2'
    - '[Just -1,Just 1,Just 2]'
    output: '2'
  - inputs:
    - '7'
    - '[Just 10,Nothing]'
    output: '7'
  - inputs:
    - '6'
    - '[Nothing]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '9'
    - '[Just 3,Just 6,Nothing]'
    output: '9'
  - inputs:
    - '6'
    - '[Just 2,Just 5]'
    output: '5'
  - inputs:
    - '8'
    - '[Just 2]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '3'
    - '[Just 1,Nothing,Nothing,Nothing]'
    output: '3'
  - inputs:
    - '4'
    - '[Just 7,Just 0,Just 4,Nothing,Just -2,Just 6]'
    output: '6'
  - inputs:
    - '6'
    - '[Just -1,Just 4,Just 9,Just 3,Nothing]'
    output: '6'
  - inputs:
    - '8'
    - '[Nothing,Nothing]'
    output: '8'
  control_examples:
  - inputs:
    - '4'
    - '[Just 10,Just 8,Just -2,Nothing,Just -2]'
    output: '-2'
  - inputs:
    - '5'
    - '[Just -1,Just 1,Just 5,Just 4,Just 9]'
    output: '9'
  - inputs:
    - '-2'
    - '[Just 5,Nothing,Just -1,Just 3,Just 5,Just 9]'
    output: '9'
  - inputs:
    - '-2'
    - '[Nothing,Just 9]'
    output: '9'
  - inputs:
    - '2'
    - '[Just -1,Just 1,Just 2]'
    output: '2'
  - inputs:
    - '7'
    - '[Just 10,Nothing]'
    output: '7'
  - inputs:
    - '6'
    - '[Nothing]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '9'
    - '[Just 3,Just 6,Nothing]'
    output: '9'
  - inputs:
    - '6'
    - '[Just 2,Just 5]'
    output: '5'
  - inputs:
    - '8'
    - '[Just 2]'
    output: 'Prelude.last: empty list'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: \x xs -> head (replicate (length xs) x)
  sorted_examples:
  - inputs:
    - '-2'
    - '[Just 2,Just 3,Just 4]'
    output: '-2'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '2'
    - '[Nothing,Nothing]'
    output: '2'
  - inputs:
    - '10'
    - '[Just 8,Just 9,Just 4,Just 7,Just 1,Just 5]'
    output: '10'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Just -2,Nothing,Nothing,Just 8]'
    output: '4'
  - inputs:
    - '-1'
    - '[Just 8]'
    output: '-1'
  - inputs:
    - '2'
    - '[Just 5,Just 8,Just -1,Just 3]'
    output: '2'
  - inputs:
    - '2'
    - '[Nothing,Just 2,Just -2]'
    output: '2'
  - inputs:
    - '10'
    - '[Just -2,Nothing,Just -2]'
    output: '10'
  - inputs:
    - '2'
    - '[Just 8,Just -2,Nothing,Just 9,Just 9,Just 10]'
    output: '2'
  - inputs:
    - '5'
    - '[Just 8,Just 7,Nothing]'
    output: '5'
  - inputs:
    - '3'
    - '[Nothing,Nothing,Just 2]'
    output: '3'
  - inputs:
    - '7'
    - '[Just 5,Just 3]'
    output: '7'
  - inputs:
    - '1'
    - '[Nothing]'
    output: '1'
  - inputs:
    - '-2'
    - '[Just 1,Just 9,Nothing,Just 9]'
    output: '-2'
  unsorted_examples:
  - inputs:
    - '-2'
    - '[Just 2,Just 3,Just 4]'
    output: '-2'
  - inputs:
    - '1'
    - '[Nothing]'
    output: '1'
  - inputs:
    - '-1'
    - '[Just 8]'
    output: '-1'
  - inputs:
    - '-2'
    - '[Just 1,Just 9,Nothing,Just 9]'
    output: '-2'
  - inputs:
    - '7'
    - '[Just 5,Just 3]'
    output: '7'
  - inputs:
    - '10'
    - '[Just 8,Just 9,Just 4,Just 7,Just 1,Just 5]'
    output: '10'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '2'
    - '[Just 5,Just 8,Just -1,Just 3]'
    output: '2'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Just -2,Nothing,Nothing,Just 8]'
    output: '4'
  - inputs:
    - '2'
    - '[Just 8,Just -2,Nothing,Just 9,Just 9,Just 10]'
    output: '2'
  - inputs:
    - '3'
    - '[Nothing,Nothing,Just 2]'
    output: '3'
  - inputs:
    - '5'
    - '[Just 8,Just 7,Nothing]'
    output: '5'
  - inputs:
    - '2'
    - '[Nothing,Nothing]'
    output: '2'
  - inputs:
    - '2'
    - '[Nothing,Just 2,Just -2]'
    output: '2'
  - inputs:
    - '10'
    - '[Just -2,Nothing,Just -2]'
    output: '10'
  control_examples:
  - inputs:
    - '-2'
    - '[Just 2,Just 3,Just 4]'
    output: '-2'
  - inputs:
    - '1'
    - '[Nothing]'
    output: '1'
  - inputs:
    - '-1'
    - '[Just 8]'
    output: '-1'
  - inputs:
    - '-2'
    - '[Just 1,Just 9,Nothing,Just 9]'
    output: '-2'
  - inputs:
    - '7'
    - '[Just 5,Just 3]'
    output: '7'
  - inputs:
    - '10'
    - '[Just 8,Just 9,Just 4,Just 7,Just 1,Just 5]'
    output: '10'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '2'
    - '[Just 5,Just 8,Just -1,Just 3]'
    output: '2'
  - inputs:
    - '4'
    - '[Just 6,Nothing,Just -2,Nothing,Nothing,Just 8]'
    output: '4'
  - inputs:
    - '0'
    - '[Just 4,Nothing]'
    output: '0'
  - inputs:
    - '5'
    - '[Nothing,Just -2,Just 10]'
    output: '5'
- name: firstJust
  query: 'x: a -> xs: [Maybe a] -> a'
  candidate: '\x xs -> last (x : (catMaybes xs))'
  sorted_examples:
  - inputs:
    - '3'
    - '[Just 5]'
    output: '5'
  - inputs:
    - '9'
    - '[Nothing,Just 6,Just 2,Nothing,Just 7]'
    output: '7'
  - inputs:
    - '2'
    - '[Just -2,Just 6,Just 1,Just 7,Just 5,Just 4]'
    output: '4'
  - inputs:
    - '-2'
    - '[Just 3,Nothing,Just 5,Nothing,Nothing]'
    output: '5'
  - inputs:
    - '5'
    - '[Nothing,Nothing,Nothing,Nothing]'
    output: '5'
  - inputs:
    - '3'
    - '[Nothing,Just 3,Just 2]'
    output: '2'
  - inputs:
    - '1'
    - '[Nothing,Just 6,Nothing,Just -1,Just 2,Just 9]'
    output: '9'
  - inputs:
    - '-2'
    - '[Just 6,Nothing,Just 7]'
    output: '7'
  - inputs:
    - '1'
    - '[Nothing,Nothing]'
    output: '1'
  - inputs:
    - '5'
    - '[Just 3,Just -2,Nothing]'
    output: '-2'
  - inputs:
    - '-2'
    - '[]'
    output: '-2'
  - inputs:
    - '5'
    - '[Just -1,Just 7,Just 9,Nothing,Just 4]'
    output: '4'
  - inputs:
    - '7'
    - '[Just 5,Just 10,Nothing,Just 3,Just 1,Just 0]'
    output: '0'
  - inputs:
    - '3'
    - '[Nothing]'
    output: '3'
  - inputs:
    - '6'
    - '[Just 8,Nothing]'
    output: '8'
  - inputs:
    - '8'
    - '[Nothing,Nothing,Just 5,Just 5]'
    output: '5'
  - inputs:
    - '7'
    - '[Just -2,Just 4]'
    output: '4'
  unsorted_examples:
  - inputs:
    - '3'
    - '[Just 5]'
    output: '5'
  - inputs:
    - '-2'
    - '[]'
    output: '-2'
  - inputs:
    - '3'
    - '[Nothing]'
    output: '3'
  - inputs:
    - '7'
    - '[Just -2,Just 4]'
    output: '4'
  - inputs:
    - '3'
    - '[Nothing,Just 3,Just 2]'
    output: '2'
  - inputs:
    - '7'
    - '[Just 5,Just 10,Nothing,Just 3,Just 1,Just 0]'
    output: '0'
  - inputs:
    - '9'
    - '[Nothing,Just 6,Just 2,Nothing,Just 7]'
    output: '7'
  - inputs:
    - '6'
    - '[Just 8,Nothing]'
    output: '8'
  - inputs:
    - '5'
    - '[Just 3,Just -2,Nothing]'
    output: '-2'
  - inputs:
    - '2'
    - '[Just -2,Just 6,Just 1,Just 7,Just 5,Just 4]'
    output: '4'
  - inputs:
    - '5'
    - '[Nothing,Nothing,Nothing,Nothing]'
    output: '5'
  - inputs:
    - '5'
    - '[Just -1,Just 7,Just 9,Nothing,Just 4]'
    output: '4'
  - inputs:
    - '1'
    - '[Nothing,Just 6,Nothing,Just -1,Just 2,Just 9]'
    output: '9'
  - inputs:
    - '8'
    - '[Nothing,Nothing,Just 5,Just 5]'
    output: '5'
  - inputs:
    - '-2'
    - '[Just 3,Nothing,Just 5,Nothing,Nothing]'
    output: '5'
  - inputs:
    - '-2'
    - '[Just 6,Nothing,Just 7]'
    output: '7'
  - inputs:
    - '1'
    - '[Nothing,Nothing]'
    output: '1'
  control_examples:
  - inputs:
    - '3'
    - '[Just 5]'
    output: '5'
  - inputs:
    - '-2'
    - '[]'
    output: '-2'
  - inputs:
    - '3'
    - '[Nothing]'
    output: '3'
  - inputs:
    - '7'
    - '[Just -2,Just 4]'
    output: '4'
  - inputs:
    - '3'
    - '[Nothing,Just 3,Just 2]'
    output: '2'
  - inputs:
    - '7'
    - '[Just 5,Just 10,Nothing,Just 3,Just 1,Just 0]'
    output: '0'
  - inputs:
    - '9'
    - '[Nothing,Just 6,Just 2,Nothing,Just 7]'
    output: '7'
  - inputs:
    - '6'
    - '[Just 8,Nothing]'
    output: '8'
  - inputs:
    - '3'
    - '[Nothing,Just 5]'
    output: '5'
  - inputs:
    - '0'
    - '[Just 9,Just 10,Just 8]'
    output: '8'
  - inputs:
    - '3'
    - '[Just 0,Just 8,Just 9,Nothing]'
    output: '9'
  - inputs:
    - '5'
    - '[Nothing,Nothing,Nothing,Nothing]'
    output: '5'
- name: mbToEither
  query: 'x: a -> mb: Maybe b -> Either a b'
  candidate: \x mb -> maybe (Left x) Right mb
  sorted_examples:
  - inputs:
    - '5'
    - Just ""
    output: Right ""
  - inputs:
    - '1'
    - Nothing
    output: Left 1
  unsorted_examples:
  - inputs:
    - '5'
    - Just ""
    output: Right ""
  - inputs:
    - '1'
    - Nothing
    output: Left 1
  control_examples:
  - inputs:
    - '5'
    - Just ""
    output: Right ""
  - inputs:
    - '1'
    - Nothing
    output: Left 1
- name: mbToEither
  query: 'x: a -> mb: Maybe b -> Either a b'
  candidate: \x mb -> bool (Left x) (Left x) (isJust mb)
  sorted_examples:
  - inputs:
    - '5'
    - Just ""
    output: Left 5
  - inputs:
    - '8'
    - Nothing
    output: Left 8
  unsorted_examples:
  - inputs:
    - '5'
    - Just ""
    output: Left 5
  - inputs:
    - '8'
    - Nothing
    output: Left 8
  control_examples:
  - inputs:
    - '5'
    - Just ""
    output: Left 5
  - inputs:
    - '7'
    - Nothing
    output: Left 7
- name: mbToEither
  query: 'x: a -> mb: Maybe b -> Either a b'
  candidate: \x mb -> maybe (Left x) (fromJust Nothing) mb
  sorted_examples:
  - inputs:
    - '6'
    - Just ""
    output: "Maybe.fromJust: Nothing\nCallStack (from HasCallStack):\n  error, called\
      \ at libraries/base/Data/Maybe.hs:148:21 in base:Data.Maybe\n  fromJust, called\
      \ at <interactive>:2:66 in interactive:Ghci1"
  - inputs:
    - '2'
    - Nothing
    output: Left 2
  unsorted_examples:
  - inputs:
    - '6'
    - Just ""
    output: "Maybe.fromJust: Nothing\nCallStack (from HasCallStack):\n  error, called\
      \ at libraries/base/Data/Maybe.hs:148:21 in base:Data.Maybe\n  fromJust, called\
      \ at <interactive>:2:66 in interactive:Ghci1"
  - inputs:
    - '2'
    - Nothing
    output: Left 2
  control_examples:
  - inputs:
    - '6'
    - Just ""
    output: "Maybe.fromJust: Nothing\nCallStack (from HasCallStack):\n  error, called\
      \ at libraries/base/Data/Maybe.hs:148:21 in base:Data.Maybe\n  fromJust, called\
      \ at <interactive>:2:66 in interactive:Ghci1"
  - inputs:
    - '10'
    - Nothing
    output: Left 10
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f xs
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,6,10]'
    output: '["8", "6", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1,5,0]'
    output: '["1", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-2]'
    output: '["0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,9]'
    output: '["7", "9", "8", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,1,0]'
    output: '["7", "1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,5]'
    output: '["8", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,2,1]'
    output: '["9", "2", "1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,2]'
    output: '["0", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,0,-1,1]'
    output: '["2", "0", "1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,5]'
    output: '["1", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,5]'
    output: '["8", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,9]'
    output: '["7", "9", "8", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,2,1]'
    output: '["9", "2", "1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,6,10]'
    output: '["8", "6", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-2]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,5]'
    output: '["1", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,2]'
    output: '["0", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1,5,0]'
    output: '["1", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,1,0]'
    output: '["7", "1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,0,-1,1]'
    output: '["2", "0", "1"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,5]'
    output: '["8", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,9]'
    output: '["7", "9", "8", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,2,1]'
    output: '["9", "2", "1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,6,10]'
    output: '["8", "6", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-2]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,5]'
    output: '["1", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,2]'
    output: '["0", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,1,0]'
    output: '["4", "1"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (init xs)
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,4,6]'
    output: '["8", "4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,-1,-2,9]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,5,-1]'
    output: '["10", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,9,0,4]'
    output: '["3", "9", "0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,5]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-1,6]'
    output: '["7", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2,3,-1]'
    output: '["8", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,5,6]'
    output: '["5"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,5]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-1,6]'
    output: '["7", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,4,6]'
    output: '["8", "4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2,3,-1]'
    output: '["8", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,9,0,4]'
    output: '["3", "9", "0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,5,6]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,-1,-2,9]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,5,-1]'
    output: '["10", "5"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,5]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-1,6]'
    output: '["7", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,4,6]'
    output: '["8", "4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2,3,-1]'
    output: '["8", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,9,0,4]'
    output: '["3", "9", "0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,5,6]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,-1,-2,9]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,5,-1]'
    output: '["10", "5"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (reverse xs)
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,9]'
    output: '["9", "8", "9", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: '["-2", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0]'
    output: '["0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6,-1]'
    output: '["6", "6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,4,8]'
    output: '["8", "4", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9,2]'
    output: '["2", "9", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,2,10,-2]'
    output: '["10", "2", "0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,3]'
    output: '["3", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1,4,5]'
    output: '["5", "4", "-1", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2,0]'
    output: '["2", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '["1"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,9]'
    output: '["9", "8", "9", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,3]'
    output: '["3", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,4,8]'
    output: '["8", "4", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2,0]'
    output: '["2", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1,4,5]'
    output: '["5", "4", "-1", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: '["-2", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9,2]'
    output: '["2", "9", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,2,10,-2]'
    output: '["10", "2", "0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6,-1]'
    output: '["6", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1]'
    output: '["4"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,9]'
    output: '["9", "8", "9", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,3]'
    output: '["3", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,4,8]'
    output: '["8", "4", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2,0]'
    output: '["2", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1,4,5]'
    output: '["5", "4", "-1", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: '["-2", "-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9,2]'
    output: '["2", "9", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,2,10,-2]'
    output: '["10", "2", "0"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (tail xs)
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,0,3]'
    output: '["-2", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,4,8]'
    output: '["4", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,6,0,0]'
    output: '["6", "0", "0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3,1,8]'
    output: '["3", "1", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,7,9,-2]'
    output: '["7", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,5]'
    output: '["10", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2,8]'
    output: '["8"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,4,8]'
    output: '["4", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,0,3]'
    output: '["-2", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,7,9,-2]'
    output: '["7", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3,1,8]'
    output: '["3", "1", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,5]'
    output: '["10", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,6,0,0]'
    output: '["6", "0", "0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2,8]'
    output: '["8"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,4,8]'
    output: '["4", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,0,3]'
    output: '["-2", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,7,9,-2]'
    output: '["7", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3,1,8]'
    output: '["3", "1", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,5]'
    output: '["10", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,6,0,0]'
    output: '["6", "0", "0"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> init (mapMaybe f xs)
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8,10,5]'
    output: '["6", "8", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,4,-2,8]'
    output: '["4", "4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,10,3]'
    output: '["9", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,3]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6,9]'
    output: '["7", "6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,5,0]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,0,7,2]'
    output: '["6", "0", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,10,0,6]'
    output: '["9", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,3]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8,10,5]'
    output: '["6", "8", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,10,3]'
    output: '["9", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6,9]'
    output: '["7", "6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,10,0,6]'
    output: '["9", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,5,0]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,0,7,2]'
    output: '["6", "0", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,4,-2,8]'
    output: '["4", "4"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,3]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8,10,5]'
    output: '["6", "8", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,10,3]'
    output: '["9", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6,9]'
    output: '["7", "6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,10,0,6]'
    output: '["9", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,5,0]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,0,7,2]'
    output: '["6", "0", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,4,-2,8]'
    output: '["4", "4"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> tail (mapMaybe f xs)
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,3]'
    output: '["9", "8", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,2,1]'
    output: '["2", "1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '["-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,8,7]'
    output: '["8", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,2,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8,10,5]'
    output: '["8", "10", "5"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8,10,5]'
    output: '["8", "10", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '["-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,2,1]'
    output: '["2", "1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,2,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,3]'
    output: '["9", "8", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,8,7]'
    output: '["8", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.tail: empty list'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8,10,5]'
    output: '["8", "10", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '["-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,2,1]'
    output: '["2", "1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,2,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,3]'
    output: '["9", "8", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,8,7]'
    output: '["8", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.tail: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> maybeToList (f (head xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,1,7,1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,10]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,4,8]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,6,4,3]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-1,6]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,1,7,1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,4,8]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,10]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-1,6]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,6,4,3]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,1,7,1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,4,8]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,10]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-1,6]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,6,4,3]'
    output: '["9"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> maybeToList (f (last xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,8,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,0,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7,-1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '["2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7,-1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,8,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,0,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '[]'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7,-1]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,8,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-2,0,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> init (init (mapMaybe f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,6,1,6]'
    output: '["3", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,3]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3,6,7]'
    output: '["4", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,7,9,-2]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,8]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2,3,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,7,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,9,0]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3,6,7]'
    output: '["4", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,7,9,-2]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,8]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2,3,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,3]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,9,0]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,8]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,7,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,6,1,6]'
    output: '["3", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3,6,7]'
    output: '["4", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,7,9,-2]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,8]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2,3,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,3]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,9,0]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,8]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,7,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,6,1,6]'
    output: '["3", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> reverse (init (mapMaybe f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,10,0,5]'
    output: '["0", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2,0]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3,1,8]'
    output: '["1", "3", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,3]'
    output: '["7", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,1,-1]'
    output: '["0"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6,9]'
    output: '["6", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,10,0]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-2,5,-1]'
    output: '["5", "-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,6,8]'
    output: '["6", "8", "4"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,3]'
    output: '["7", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6,9]'
    output: '["6", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3,1,8]'
    output: '["1", "3", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2,0]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,6,8]'
    output: '["6", "8", "4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,1,-1]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,10,0]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,10,0,5]'
    output: '["0", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-2,5,-1]'
    output: '["5", "-2"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,3]'
    output: '["7", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6,9]'
    output: '["6", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3,1,8]'
    output: '["1", "3", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,2,0]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,6,8]'
    output: '["6", "8", "4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,1,-1]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,10,0]'
    output: '["10"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> tail (init (mapMaybe f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,9,6,2]'
    output: '["9", "6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,8]'
    output: '["2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,0,5]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5,7,9]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,5,9]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,9,0]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,6,8]'
    output: '["8", "6"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,6,8]'
    output: '["8", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,9,6,2]'
    output: '["9", "6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,9,0]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,5,9]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,0,5]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,8]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5,7,9]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0]'
    output: 'Prelude.tail: empty list'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,6,8]'
    output: '["8", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,9,6,2]'
    output: '["9", "6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10,9,0]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,5,9]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,0,5]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,8]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5,7,9]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0]'
    output: 'Prelude.tail: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> init (reverse (mapMaybe f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3,2,3]'
    output: '["3", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,-2,9,4]'
    output: '["4", "9", "-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3,3]'
    output: '["3", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,10,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,3]'
    output: '["3", "8", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,8,7]'
    output: '["7", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,3,0,7]'
    output: '["7", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3,3]'
    output: '["3", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,10,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,3]'
    output: '["3", "8", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,8,7]'
    output: '["7", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,-2,9,4]'
    output: '["4", "9", "-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3,2,3]'
    output: '["3", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,3,0,7]'
    output: '["7", "3"]'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,3,3]'
    output: '["3", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,10,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,9,8,3]'
    output: '["3", "8", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,8,7]'
    output: '["7", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,-2,9,4]'
    output: '["4", "9", "-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3,2,3]'
    output: '["3", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,3,0,7]'
    output: '["7", "3"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> tail (tail (mapMaybe f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,8,5,6]'
    output: '["5", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,2,1,10]'
    output: '["1", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-1,7,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,9,5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,5]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9,-2,7]'
    output: '["7"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,9,5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-1,7,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,5]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,8,5,6]'
    output: '["5", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9,-2,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,2,1,10]'
    output: '["1", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,-1]'
    output: 'Prelude.tail: empty list'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,9,5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,-1,7,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,5]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,8,5,6]'
    output: '["5", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9,-2,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,2,1,10]'
    output: '["1", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,-1]'
    output: 'Prelude.tail: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> (mapMaybe f xs) ++ (mapMaybe f xs)
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1,4,5]'
    output: '["5", "-1", "4", "5", "5", "-1", "4", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,3]'
    output: '["1", "3", "1", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["0", "9", "8", "0", "9", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,2]'
    output: '["0", "2", "0", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,10]'
    output: '["3", "10", "3", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0,-2]'
    output: '["5", "-2", "5", "-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,1,0,3]'
    output: '["3", "1", "0", "3", "3", "1", "0", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,1,3]'
    output: '["8", "1", "3", "8", "1", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: '["8", "8"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,10]'
    output: '["3", "10", "3", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0,-2]'
    output: '["5", "-2", "5", "-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,3]'
    output: '["1", "3", "1", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,1,3]'
    output: '["8", "1", "3", "8", "1", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1,4,5]'
    output: '["5", "-1", "4", "5", "5", "-1", "4", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,2]'
    output: '["0", "2", "0", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["0", "9", "8", "0", "9", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,1,0,3]'
    output: '["3", "1", "0", "3", "3", "1", "0", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: '["8", "8"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,10]'
    output: '["3", "10", "3", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,0,-2]'
    output: '["5", "-2", "5", "-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,3]'
    output: '["1", "3", "1", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,-2]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,1,3]'
    output: '["8", "1", "3", "8", "1", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1,4,5]'
    output: '["5", "-1", "4", "5", "5", "-1", "4", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,2]'
    output: '["0", "2", "0", "2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '["8", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["0", "9", "8", "0", "9", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,1,0,3]'
    output: '["3", "1", "0", "3", "3", "1", "0", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (repeat (head xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-2,9,7]'
    output: '["7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: '["7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5,7,9]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8,5]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,1]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,4]'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,6]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9,-2,7]'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9,-2,7]'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: '["7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5,7,9]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,1]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,6]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,4]'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8,5]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,-2,9,7]'
    output: '["7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: diverge
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
      "0", "0", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,9,-2,7]'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: '["7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7", "7",
      "7", "7", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: '["8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8", "8",
      "8", "8", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5,7,9]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,1]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,6]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,4]'
    output: '["9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9", "9",
      "9", "9", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8,5]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: diverge
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (repeat (last xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,5,3,3]'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2,0]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,1]'
    output: '["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2,-2]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,8,7,10]'
    output: '["10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "1_, "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,-2,10]'
    output: '["10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "1_, "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '["2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,4,5]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,2]'
    output: '["2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "_, _'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,2]'
    output: '["2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,-2,10]'
    output: '["10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "1_, "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,1]'
    output: '["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,4,5]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '["2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,5,3,3]'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2,0]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,8,7,10]'
    output: '["10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "1_, "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2,-2]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: diverge
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,2]'
    output: '["2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,-2,10]'
    output: '["10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "1_, "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,1]'
    output: '["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
      "1", "1", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,4,5]'
    output: '["5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5",
      "5", "5", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '["2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
      "2", "2", "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,5,3,3]'
    output: '["3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3",
      "3", "3", "_, _'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,-2,0]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,8,7,10]'
    output: '["10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10",
      "10", "10", "10", "10", "10", "10", "10", "10", "10", "1_, "_, _'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2,-2]'
    output: diverge
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: diverge
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (maybeToList (listToMaybe xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,1,0,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,2]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,8]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,7,0]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,0]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,5,10,3]'
    output: '["-2"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,7,0]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,1,0,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,2]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,0]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,5,10,3]'
    output: '["-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,8]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '[]'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,7,0]'
    output: '["-1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,1,0,3]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,2]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,0]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,9]'
    output: '["9"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> init (mapMaybe f (init xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,9,5]'
    output: '["5", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,8]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,3,7]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,-2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,8,2]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,10,1]'
    output: '["4", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3]'
    output: 'Prelude.init: empty list'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,-2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,8]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,8,2]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,9,5]'
    output: '["5", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,3,7]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,10,1]'
    output: '["4", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3]'
    output: 'Prelude.init: empty list'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,-2,6]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,6,8]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,8,2]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,9,5]'
    output: '["5", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,3,7]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,10,1]'
    output: '["4", "8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,3]'
    output: 'Prelude.init: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> reverse (mapMaybe f (init xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,9,6,6]'
    output: '["6", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,0,3,4]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,-2,9,4]'
    output: '["9", "-2", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2]'
    output: diverge
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,7,7]'
    output: '["7", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,6,0,0]'
    output: '["0", "6", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,6]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,5,7]'
    output: '["5", "3"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,5,7]'
    output: '["5", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,6]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,-2,9,4]'
    output: '["9", "-2", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,7,7]'
    output: '["7", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,6,0,0]'
    output: '["0", "6", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,9,6,6]'
    output: '["6", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,0,3,4]'
    output: '["3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2]'
    output: diverge
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,5,7]'
    output: '["5", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,6]'
    output: '["8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,6]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,-2,9,4]'
    output: '["9", "-2", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-1,8]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,7,7]'
    output: '["7", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,6,0,0]'
    output: '["0", "6", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,9,6,6]'
    output: '["6", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,0,3,4]'
    output: '["3"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> tail (mapMaybe f (init xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,4]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,10,1]'
    output: '["8", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-1,0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,5,10]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3,7]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2,1,2]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9,2]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,10,8,1]'
    output: '["10", "8"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,4]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,10,1]'
    output: '["8", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,5,10]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,10,8,1]'
    output: '["10", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9,2]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2,1,2]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3,7]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-1,0]'
    output: 'Prelude.tail: empty list'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,4]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,8,10,1]'
    output: '["8", "10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,5,10]'
    output: '["5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,9]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,10,8,1]'
    output: '["10", "8"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,9,2]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2,1,2]'
    output: '["1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,3,7]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-1,0]'
    output: 'Prelude.tail: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> init (mapMaybe f (tail xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,3,-2]'
    output: '["3", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,10,5]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-1,3,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,10,-2,6]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,4,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,10,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,8,7,10]'
    output: '["8", "7"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,10,5]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,8,7,10]'
    output: '["8", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,10,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,3,-2]'
    output: '["3", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,10,-2,6]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,4,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-1,3,-1]'
    output: '[]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,10,5]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,8,7,10]'
    output: '["8", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,10,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,3,3,-2]'
    output: '["3", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,10,-2,6]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,4,-1]'
    output: '[]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> reverse (mapMaybe f (tail xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,9,6,6]'
    output: '["6", "6", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7,8]'
    output: '["8", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,4]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,-1,-2,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-1,3,0]'
    output: '["0", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,0,-2]'
    output: '["-2", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,7,0]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,6,1,1]'
    output: '["1", "1", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1,2]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,10,7]'
    output: '["7", "10"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,4]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7,8]'
    output: '["8", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,9,6,6]'
    output: '["6", "6", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,10,7]'
    output: '["7", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,6,1,1]'
    output: '["1", "1", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1,2]'
    output: '["2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,7,0]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,-1,-2,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,0,-2]'
    output: '["-2", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-1,3,0]'
    output: '["0", "3"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,8]'
    output: '["8"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-1,4]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7,8]'
    output: '["8", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,9,6,6]'
    output: '["6", "6", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,10,7]'
    output: '["7", "10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,6,1,1]'
    output: '["1", "1", "6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1,2]'
    output: '["2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,7,0]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,-1,-2,9]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,0,-2]'
    output: '["-2", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-1,3,0]'
    output: '["0", "3"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> tail (mapMaybe f (tail xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,2,5,1]'
    output: '["5", "1"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,10,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,0,0]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,5,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,5,3,1]'
    output: '["3", "1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,3,0,7]'
    output: '["7"]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,5,3,1]'
    output: '["3", "1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,5,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,3,0,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,10,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,0,0]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,2,5,1]'
    output: '["5", "1"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,5,3,1]'
    output: '["3", "1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,5,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,0,6]'
    output: '["6"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,3,0,7]'
    output: '["7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,0,10,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[8,0]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,0,0]'
    output: '["0"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,2,5,1]'
    output: '["5", "1"]'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (init (init xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,0,-2]'
    output: '["7", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2,-2]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,5,6,4]'
    output: '["1", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,0,0]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2,4]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,5,10]'
    output: '["2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,0,0]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,0,-2]'
    output: '["7", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,5,6,4]'
    output: '["1", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,5,10]'
    output: '["2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2,4]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2,-2]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1]'
    output: '[]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,0,0]'
    output: '["9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,0,-2]'
    output: '["7", "7"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,5,6,4]'
    output: '["1", "5"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,5,10]'
    output: '["2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9,8]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2,4]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-2,-2]'
    output: '["1"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (tail (init xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,2,5,1]'
    output: '["2", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,-2,3]'
    output: '["-2"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,4,10]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-1,3,0]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-1,0]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,5,3,-2]'
    output: '["5", "3"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,-1]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,-2,3]'
    output: '["-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,4,10]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,2,5,1]'
    output: '["2", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-1,3,0]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,5,3,-2]'
    output: '["5", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-1,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,-2,3]'
    output: '["-2"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,4,10]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,2,5,1]'
    output: '["2", "5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,-1,3,0]'
    output: '["3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,5,3,-2]'
    output: '["5", "3"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,-1,0]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
- name: mapMaybes
  query: 'f: (a -> Maybe b) -> xs: [a] -> [b]'
  candidate: \f xs -> mapMaybe f (tail (tail xs))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,1,2,9]'
    output: '["2", "9"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,7,5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,6,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,7,-2,4]'
    output: '["4"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,3,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,5,1,7]'
    output: '["1", "7"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,1,2,9]'
    output: '["2", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,6,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,7,5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,7,-2,4]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,3,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,5,1,7]'
    output: '["1", "7"]'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,1,2,9]'
    output: '["2", "9"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2,6,10]'
    output: '["10"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[9,7,5]'
    output: '["5"]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-1]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,7,-2,4]'
    output: '["4"]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,3,-2]'
    output: '[]'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1]'
    output: '[]'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,5,1,7]'
    output: '["1", "7"]'
- name: testEither
  query: 'b: Bool -> vl: a -> vr: b -> Either a b'
  candidate: \b vl vr -> bool (Left vl) (Right vr) b
  sorted_examples:
  - inputs:
    - 'True'
    - '8'
    - '"c"'
    output: Right "c"
  - inputs:
    - 'False'
    - '0'
    - '""'
    output: Left 0
  unsorted_examples:
  - inputs:
    - 'True'
    - '8'
    - '"c"'
    output: Right "c"
  - inputs:
    - 'False'
    - '0'
    - '""'
    output: Left 0
  control_examples:
  - inputs:
    - 'True'
    - '8'
    - '"c"'
    output: Right "c"
  - inputs:
    - 'False'
    - '0'
    - '""'
    output: Left 0
- name: testEither
  query: 'b: Bool -> vl: a -> vr: b -> Either a b'
  candidate: \b vl vr -> bool (Right vr) (Left vl) b
  sorted_examples:
  - inputs:
    - 'True'
    - '8'
    - '"c"'
    output: Left 8
  - inputs:
    - 'False'
    - '0'
    - '""'
    output: Right ""
  unsorted_examples:
  - inputs:
    - 'True'
    - '8'
    - '"c"'
    output: Left 8
  - inputs:
    - 'False'
    - '0'
    - '""'
    output: Right ""
  control_examples:
  - inputs:
    - 'True'
    - '8'
    - '"c"'
    output: Left 8
  - inputs:
    - 'False'
    - '0'
    - '""'
    output: Right ""
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (mapMaybe x y)
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,8,1,-1]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9,10]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,5]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,2]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,8,4,-1]'
    output: '4'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,8,1,-1]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,2]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9,10]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,5]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,-2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,8,4,-1]'
    output: '4'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '0'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,8,1,-1]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,2]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9,10]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,5]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10]'
    output: '2'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (map x y)
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,8,1,-1]'
    output: '4'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,9]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,2,-2]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,1]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,4,4,7]'
    output: '4'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,8,1,-1]'
    output: '4'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,1]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,2,-2]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,9]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10,4,4,7]'
    output: '4'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[2]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,8,1,-1]'
    output: '4'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,1]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,2,-2]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: '1'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (maybeToList (x (head y)))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,5]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,0,5,-2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,2,9,0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,4]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1,9]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,1,7]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,4]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,2]'
    output: '0'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,5]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1,9]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,1,7]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,2,9,0]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,4]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,0,5,-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,4]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,-2,1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,6,2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,5]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1,9]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,1,7]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,2,9,0]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,9]'
    output: '1'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (maybeToList (x (last y)))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,5]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,3,10]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,3]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,2,-2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,9]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,1,7,-2]'
    output: '1'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,2,-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,3]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,3,10]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[2,1,7,-2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[3,9]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,2,-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,3]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,3,10]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2]'
    output: '0'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (mapMaybe x (init y))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,3]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1,9]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6,-1,-2]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1]'
    output: '1'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,3]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1,9]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,6,-1,-2]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2,5]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[0,9,3]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,1,9]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (map x (init y))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,-1,10]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,-1,3]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,9]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,-1,3]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,9]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,-1,10]'
    output: '3'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,9]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,-1,3]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2,9]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,-1,10]'
    output: '3'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (mapMaybe x (tail y))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,0]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,7,3]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8,5,9]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,9,0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,3,10]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,8]'
    output: '1'
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,9,0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,7,3]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,3,10]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[1,8]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,8,5,9]'
    output: '3'
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,9,0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,7,3]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,-1]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-1,3,10]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '0'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (init (mapMaybe x y))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,-1,10]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,4,1]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,5,2]'
    output: '2'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,-1,10]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,4,1]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,5,2]'
    output: '2'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,10,-1,10]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[10]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,10]'
    output: '1'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (maybeToList (listToMaybe (mapMaybe x y)))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,0,3,-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,7,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,2,1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,9,7,0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,4]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,2,1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,7,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,4]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,9,7,0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,0,3,-1]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,2,1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1,7,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[1,4]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2]'
    output: '1'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (maybeToList (Just (mapMaybe x y)))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,9,0,4]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,7,4]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,7]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,6]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7]'
    output: '1'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,7,4]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,7]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[-2,9,0,4]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[4,6]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,7,4]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-1]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,7,7]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[4,7]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[5,5]'
    output: '1'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (maybeToList (listToMaybe (map x y)))
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,5,6,3]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,10]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,1,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,3,9,10]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,8,-1]'
    output: '1'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,1,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,8,-1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,10]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6,5,6,3]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[10,3,9,10]'
    output: '1'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '0'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8,1,5]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,8,-1]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[9,-2]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[0,10]'
    output: '1'
- name: countJusts
  query: 'x: (a -> Maybe b) -> y: [a] -> Int'
  candidate: \x y -> length (scanl (fromJust Nothing) x y)
  sorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,9,8,0]'
    output: '5'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,5,-2,10]'
    output: '5'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,1,7]'
    output: '4'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '2'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,8,6]'
    output: '4'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3]'
    output: '3'
  unsorted_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,1,7]'
    output: '4'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,8,6]'
    output: '4'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[5,9,8,0]'
    output: '5'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,5,-2,10]'
    output: '5'
  control_examples:
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[7,2]'
    output: '3'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[8]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[6]'
    output: '2'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[3,3]'
    output: '3'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[]'
    output: '1'
  - inputs:
    - (\x -> if x == 0 then Nothing else Just (show x))
    - '[7,1,7]'
    output: '4'
  - inputs:
    - (\x -> if x < 0 then Nothing else Just (show x))
    - '[6,8,6]'
    output: '4'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> head (group xs)
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-5,5,-2,2]'
    output: '[-5]'
  - inputs:
    - '[1,5,4,4,0,-2]'
    output: '[1]'
  - inputs:
    - '[0,-2]'
    output: '[0]'
  - inputs:
    - '[3,1,-5]'
    output: '[3]'
  - inputs:
    - '[-4,-3,-2,-4,-2]'
    output: '[-4]'
  - inputs:
    - '[-1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '[-5,4]'
    output: '[-5]'
  - inputs:
    - '[-3,0,-1]'
    output: '[-3]'
  - inputs:
    - '[6,-2,6,3,-2,-1]'
    output: '[6]'
  - inputs:
    - '[3,4,1,0,1]'
    output: '[3]'
  - inputs:
    - '[-3,-2,0]'
    output: '[-3]'
  - inputs:
    - '[4,0,5,4]'
    output: '[4]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[3,2,-4,3]'
    output: '[3]'
  - inputs:
    - '[1,5]'
    output: '[1]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[3,1,3,-3,-2]'
    output: '[3]'
  - inputs:
    - '[5,-4,-4,1]'
    output: '[5]'
  - inputs:
    - '[2,2,-4]'
    output: '[2, 2]'
  - inputs:
    - '[0,4]'
    output: '[0]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[-4,2,-1]'
    output: '[-4]'
  - inputs:
    - '[3,-1,-4]'
    output: '[3]'
  - inputs:
    - '[4,0]'
    output: '[4]'
  - inputs:
    - '[-3,3,5,3]'
    output: '[-3]'
  - inputs:
    - '[1,2,3]'
    output: '[1]'
  - inputs:
    - '[-2,2,1]'
    output: '[-2]'
  unsorted_examples:
  - inputs:
    - '[-2,2,1]'
    output: '[-2]'
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[6,-2,6,3,-2,-1]'
    output: '[6]'
  - inputs:
    - '[3,4,1,0,1]'
    output: '[3]'
  - inputs:
    - '[3,1,-5]'
    output: '[3]'
  - inputs:
    - '[-4,-3,-2,-4,-2]'
    output: '[-4]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[3,-1,-4]'
    output: '[3]'
  - inputs:
    - '[1,2,3]'
    output: '[1]'
  - inputs:
    - '[4,0]'
    output: '[4]'
  - inputs:
    - '[3,2,-4,3]'
    output: '[3]'
  - inputs:
    - '[0,-2]'
    output: '[0]'
  - inputs:
    - '[-3,-2,0]'
    output: '[-3]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[1,5]'
    output: '[1]'
  - inputs:
    - '[1,5,4,4,0,-2]'
    output: '[1]'
  - inputs:
    - '[4,0,5,4]'
    output: '[4]'
  - inputs:
    - '[-3,3,5,3]'
    output: '[-3]'
  - inputs:
    - '[-5,5,-2,2]'
    output: '[-5]'
  - inputs:
    - '[2,2,-4]'
    output: '[2, 2]'
  - inputs:
    - '[0,4]'
    output: '[0]'
  - inputs:
    - '[5,-4,-4,1]'
    output: '[5]'
  - inputs:
    - '[-1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '[3,1,3,-3,-2]'
    output: '[3]'
  - inputs:
    - '[-3,0,-1]'
    output: '[-3]'
  - inputs:
    - '[-5,4]'
    output: '[-5]'
  - inputs:
    - '[-4,2,-1]'
    output: '[-4]'
  control_examples:
  - inputs:
    - '[-2,2,1]'
    output: '[-2]'
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[6,-2,6,3,-2,-1]'
    output: '[6]'
  - inputs:
    - '[3,4,1,0,1]'
    output: '[3]'
  - inputs:
    - '[3,1,-5]'
    output: '[3]'
  - inputs:
    - '[-4,-3,-2,-4,-2]'
    output: '[-4]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[3,-1,-4]'
    output: '[3]'
  - inputs:
    - '[1,2,3]'
    output: '[1]'
  - inputs:
    - '[4,0]'
    output: '[4]'
  - inputs:
    - '[3,2,-4,3]'
    output: '[3]'
  - inputs:
    - '[0,-2]'
    output: '[0]'
  - inputs:
    - '[-3,-2,0]'
    output: '[-3]'
  - inputs:
    - '[1]'
    output: '[1]'
  - inputs:
    - '[1,5]'
    output: '[1]'
  - inputs:
    - '[1,5,4,4,0,-2]'
    output: '[1]'
  - inputs:
    - '[4,0,5,4]'
    output: '[4]'
  - inputs:
    - '[-3,3,5,3]'
    output: '[-3]'
  - inputs:
    - '[-5,5,-2,2]'
    output: '[-5]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> last (group xs)
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[-1,-1,0,3,-4]'
    output: '[-4]'
  - inputs:
    - '[-6,6,3,3,1,1]'
    output: '[1, 1]'
  - inputs:
    - '[2,4,-3,-4]'
    output: '[-4]'
  - inputs:
    - '[1,-1,1,4]'
    output: '[4]'
  - inputs:
    - '[-3,0,-4,-3,2]'
    output: '[2]'
  - inputs:
    - '[2,-3,0]'
    output: '[0]'
  - inputs:
    - '[6,-2,6,3,-2,-1]'
    output: '[-1]'
  - inputs:
    - '[-5]'
    output: '[-5]'
  - inputs:
    - '[2,2]'
    output: '[2, 2]'
  - inputs:
    - '[-1,3,-1]'
    output: '[-1]'
  - inputs:
    - '[1,-3,-4,-3,-2]'
    output: '[-2]'
  - inputs:
    - '[1,0,3]'
    output: '[3]'
  - inputs:
    - '[6,-2,4,2,0]'
    output: '[0]'
  - inputs:
    - '[2,5,0,-6,-5,-3]'
    output: '[-3]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[5]'
    output: '[5]'
  - inputs:
    - '[3,4,1,0,1]'
    output: '[1]'
  - inputs:
    - '[-2,-4,-1,-3]'
    output: '[-3]'
  - inputs:
    - '[1,-1]'
    output: '[-1]'
  - inputs:
    - '[5,1,-3,-3]'
    output: '[-3, -3]'
  - inputs:
    - '[0,-2,2,4]'
    output: '[4]'
  - inputs:
    - '[-3,5,-5,2,4]'
    output: '[4]'
  - inputs:
    - '[-1,-2]'
    output: '[-2]'
  - inputs:
    - '[3,-3,-1,3,5]'
    output: '[5]'
  - inputs:
    - '[3,-2,3,-1]'
    output: '[-1]'
  - inputs:
    - '[2,-3,1,3,-2]'
    output: '[-2]'
  - inputs:
    - '[-2,3,1]'
    output: '[1]'
  - inputs:
    - '[6,1]'
    output: '[1]'
  unsorted_examples:
  - inputs:
    - '[2,-3,0]'
    output: '[0]'
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[6,-2,6,3,-2,-1]'
    output: '[-1]'
  - inputs:
    - '[3,4,1,0,1]'
    output: '[1]'
  - inputs:
    - '[6,-2,4,2,0]'
    output: '[0]'
  - inputs:
    - '[1,-3,-4,-3,-2]'
    output: '[-2]'
  - inputs:
    - '[6,1]'
    output: '[1]'
  - inputs:
    - '[5,1,-3,-3]'
    output: '[-3, -3]'
  - inputs:
    - '[3,-3,-1,3,5]'
    output: '[5]'
  - inputs:
    - '[-6,6,3,3,1,1]'
    output: '[1, 1]'
  - inputs:
    - '[5]'
    output: '[5]'
  - inputs:
    - '[-5]'
    output: '[-5]'
  - inputs:
    - '[-2,-4,-1,-3]'
    output: '[-3]'
  - inputs:
    - '[-1,3,-1]'
    output: '[-1]'
  - inputs:
    - '[2,5,0,-6,-5,-3]'
    output: '[-3]'
  - inputs:
    - '[2,-3,1,3,-2]'
    output: '[-2]'
  - inputs:
    - '[1,-1,1,4]'
    output: '[4]'
  - inputs:
    - '[-2,3,1]'
    output: '[1]'
  - inputs:
    - '[-1,-2]'
    output: '[-2]'
  - inputs:
    - '[1,-1]'
    output: '[-1]'
  - inputs:
    - '[-1,-1,0,3,-4]'
    output: '[-4]'
  - inputs:
    - '[-3,0,-4,-3,2]'
    output: '[2]'
  - inputs:
    - '[3,-2,3,-1]'
    output: '[-1]'
  - inputs:
    - '[2,2]'
    output: '[2, 2]'
  - inputs:
    - '[2,4,-3,-4]'
    output: '[-4]'
  - inputs:
    - '[0,-2,2,4]'
    output: '[4]'
  - inputs:
    - '[0]'
    output: '[0]'
  - inputs:
    - '[1,0,3]'
    output: '[3]'
  - inputs:
    - '[-3,5,-5,2,4]'
    output: '[4]'
  control_examples:
  - inputs:
    - '[2,-3,0]'
    output: '[0]'
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[6,-2,6,3,-2,-1]'
    output: '[-1]'
  - inputs:
    - '[3,4,1,0,1]'
    output: '[1]'
  - inputs:
    - '[6,-2,4,2,0]'
    output: '[0]'
  - inputs:
    - '[1,-3,-4,-3,-2]'
    output: '[-2]'
  - inputs:
    - '[6,1]'
    output: '[1]'
  - inputs:
    - '[5,1,-3,-3]'
    output: '[-3, -3]'
  - inputs:
    - '[3,-3,-1,3,5]'
    output: '[5]'
  - inputs:
    - '[-6,6,3,3,1,1]'
    output: '[1, 1]'
  - inputs:
    - '[5]'
    output: '[5]'
  - inputs:
    - '[-5]'
    output: '[-5]'
  - inputs:
    - '[-2,-4,-1,-3]'
    output: '[-3]'
  - inputs:
    - '[-1,3,-1]'
    output: '[-1]'
  - inputs:
    - '[2,5,0,-6,-5,-3]'
    output: '[-3]'
  - inputs:
    - '[2,-3,1,3,-2]'
    output: '[-2]'
  - inputs:
    - '[1,-1,1,4]'
    output: '[4]'
  - inputs:
    - '[-2,3,1]'
    output: '[1]'
  - inputs:
    - '[-1,-2]'
    output: '[-2]'
  - inputs:
    - '[1,-1]'
    output: '[-1]'
  - inputs:
    - '[-1,-1,0,3,-4]'
    output: '[-4]'
  - inputs:
    - '[5,5,1,-6,-3]'
    output: '[-3]'
  - inputs:
    - '[2,4,-3,-4]'
    output: '[-4]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> concat (group (init xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[3,2,-1,1,-2]'
    output: '[3, 2, -1, 1]'
  - inputs:
    - '[-5,-5,5,-4,-2]'
    output: '[-5, -5, 5, -4]'
  - inputs:
    - '[-6,5,-4,-3,-1,1]'
    output: '[-6, 5, -4, -3, -1]'
  - inputs:
    - '[0,-2,3]'
    output: '[0, -2]'
  - inputs:
    - '[6,-2,4,2,0]'
    output: '[6, -2, 4, 2]'
  - inputs:
    - '[-5,2,-2,0,0]'
    output: '[-5, 2, -2, 0]'
  - inputs:
    - '[3,2,4]'
    output: '[3, 2]'
  - inputs:
    - '[-4,-2,-4,0]'
    output: '[-4, -2, -4]'
  - inputs:
    - '[5,0,5,-3,4]'
    output: '[5, 0, 5, -3]'
  - inputs:
    - '[3,-1,-4,-5,-2,6]'
    output: '[3, -1, -4, -5, -2]'
  - inputs:
    - '[-1,-5]'
    output: '[-1]'
  - inputs:
    - '[-5,0,-4,-4]'
    output: '[-5, 0, -4]'
  - inputs:
    - '[-5,5,6,-2,2]'
    output: '[-5, 5, 6, -2]'
  - inputs:
    - '[-5,1,1,0,-1]'
    output: '[-5, 1, 1, 0]'
  - inputs:
    - '[2,0]'
    output: '[2]'
  - inputs:
    - '[0,3,-2]'
    output: '[0, 3]'
  - inputs:
    - '[-4,-3,-2,-4,-2]'
    output: '[-4, -3, -2, -4]'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[-4,-1,0]'
    output: '[-4, -1]'
  - inputs:
    - '[1,-3,-4,-3,-2]'
    output: '[1, -3, -4, -3]'
  - inputs:
    - '[0,0,3]'
    output: '[0, 0]'
  - inputs:
    - '[4,-4,3]'
    output: '[4, -4]'
  - inputs:
    - '[3,-3,-3]'
    output: '[3, -3]'
  - inputs:
    - '[-3,3,-2]'
    output: '[-3, 3]'
  - inputs:
    - '[-2,-3,5]'
    output: '[-2, -3]'
  - inputs:
    - '[1,-2]'
    output: '[1]'
  - inputs:
    - '[3,1,-5]'
    output: '[3, 1]'
  - inputs:
    - '[3,3]'
    output: '[3]'
  - inputs:
    - '[4]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '[-3,3,-2]'
    output: '[-3, 3]'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[6,-2,4,2,0]'
    output: '[6, -2, 4, 2]'
  - inputs:
    - '[1,-3,-4,-3,-2]'
    output: '[1, -3, -4, -3]'
  - inputs:
    - '[3,1,-5]'
    output: '[3, 1]'
  - inputs:
    - '[-4,-3,-2,-4,-2]'
    output: '[-4, -3, -2, -4]'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[0,3,-2]'
    output: '[0, 3]'
  - inputs:
    - '[-4,-2,-4,0]'
    output: '[-4, -2, -4]'
  - inputs:
    - '[3,2,4]'
    output: '[3, 2]'
  - inputs:
    - '[0,0,3]'
    output: '[0, 0]'
  - inputs:
    - '[2,0]'
    output: '[2]'
  - inputs:
    - '[4,-4,3]'
    output: '[4, -4]'
  - inputs:
    - '[5,0,5,-3,4]'
    output: '[5, 0, 5, -3]'
  - inputs:
    - '[-1,-5]'
    output: '[-1]'
  - inputs:
    - '[-4,-1,0]'
    output: '[-4, -1]'
  - inputs:
    - '[1,-2]'
    output: '[1]'
  - inputs:
    - '[3,-1,-4,-5,-2,6]'
    output: '[3, -1, -4, -5, -2]'
  - inputs:
    - '[-6,5,-4,-3,-1,1]'
    output: '[-6, 5, -4, -3, -1]'
  - inputs:
    - '[-2,-3,5]'
    output: '[-2, -3]'
  - inputs:
    - '[-5,2,-2,0,0]'
    output: '[-5, 2, -2, 0]'
  - inputs:
    - '[4]'
    output: '[]'
  - inputs:
    - '[3,-3,-3]'
    output: '[3, -3]'
  - inputs:
    - '[-5,1,1,0,-1]'
    output: '[-5, 1, 1, 0]'
  - inputs:
    - '[0,-2,3]'
    output: '[0, -2]'
  - inputs:
    - '[3,2,-1,1,-2]'
    output: '[3, 2, -1, 1]'
  - inputs:
    - '[-5,-5,5,-4,-2]'
    output: '[-5, -5, 5, -4]'
  - inputs:
    - '[-5,0,-4,-4]'
    output: '[-5, 0, -4]'
  - inputs:
    - '[-5,5,6,-2,2]'
    output: '[-5, 5, 6, -2]'
  - inputs:
    - '[3,3]'
    output: '[3]'
  control_examples:
  - inputs:
    - '[-3,3,-2]'
    output: '[-3, 3]'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[6,-2,4,2,0]'
    output: '[6, -2, 4, 2]'
  - inputs:
    - '[1,-3,-4,-3,-2]'
    output: '[1, -3, -4, -3]'
  - inputs:
    - '[3,1,-5]'
    output: '[3, 1]'
  - inputs:
    - '[-4,-3,-2,-4,-2]'
    output: '[-4, -3, -2, -4]'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[0,3,-2]'
    output: '[0, 3]'
  - inputs:
    - '[-4,-2,-4,0]'
    output: '[-4, -2, -4]'
  - inputs:
    - '[3,2,4]'
    output: '[3, 2]'
  - inputs:
    - '[0,0,3]'
    output: '[0, 0]'
  - inputs:
    - '[2,0]'
    output: '[2]'
  - inputs:
    - '[4,-4,3]'
    output: '[4, -4]'
  - inputs:
    - '[5,0,5,-3,4]'
    output: '[5, 0, 5, -3]'
  - inputs:
    - '[-1,-5]'
    output: '[-1]'
  - inputs:
    - '[-4,-1,0]'
    output: '[-4, -1]'
  - inputs:
    - '[1,-2]'
    output: '[1]'
  - inputs:
    - '[3,-1,-4,-5,-2,6]'
    output: '[3, -1, -4, -5, -2]'
  - inputs:
    - '[-6,5,-4,-3,-1,1]'
    output: '[-6, 5, -4, -3, -1]'
  - inputs:
    - '[-2,-3,5]'
    output: '[-2, -3]'
  - inputs:
    - '[-5,2,-2,0,0]'
    output: '[-5, 2, -2, 0]'
  - inputs:
    - '[4]'
    output: '[]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[3,3]'
    output: '[3]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> head (group (init xs))
  sorted_examples:
  - inputs:
    - '[1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-5,2,-6,-4,2,3]'
    output: '[-5]'
  - inputs:
    - '[3,3,3]'
    output: '[3, 3]'
  - inputs:
    - '[0,3,-2]'
    output: '[0]'
  - inputs:
    - '[-4,0,-5,-2]'
    output: '[-4]'
  - inputs:
    - '[-4,3]'
    output: '[-4]'
  - inputs:
    - '[-1,2,5,-6,-4,-5]'
    output: '[-1]'
  - inputs:
    - '[5,-4,-1,-6,6,5]'
    output: '[5]'
  - inputs:
    - '[5,1,-3,-3]'
    output: '[5]'
  - inputs:
    - '[6,1]'
    output: '[6]'
  - inputs:
    - '[2,0,3,-3,3]'
    output: '[2]'
  - inputs:
    - '[-2,3,3,-1,5]'
    output: '[-2]'
  - inputs:
    - '[3,-6,-6,4]'
    output: '[3]'
  - inputs:
    - '[5,1,5,-4]'
    output: '[5]'
  - inputs:
    - '[-1,-1,3]'
    output: '[-1, -1]'
  - inputs:
    - '[5,3,-4,3,3]'
    output: '[5]'
  - inputs:
    - '[-2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[-1,-1]'
    output: '[-1]'
  - inputs:
    - '[0,5,2]'
    output: '[0]'
  - inputs:
    - '[0,1]'
    output: '[0]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-4,-5,6]'
    output: '[-4]'
  - inputs:
    - '[1,-2,-3]'
    output: '[1]'
  - inputs:
    - '[4,1,-4]'
    output: '[4]'
  unsorted_examples:
  - inputs:
    - '[1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[-2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[0,3,-2]'
    output: '[0]'
  - inputs:
    - '[6,1]'
    output: '[6]'
  - inputs:
    - '[5,1,-3,-3]'
    output: '[5]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[3,-6,-6,4]'
    output: '[3]'
  - inputs:
    - '[-4,0,-5,-2]'
    output: '[-4]'
  - inputs:
    - '[5,1,5,-4]'
    output: '[5]'
  - inputs:
    - '[-1,2,5,-6,-4,-5]'
    output: '[-1]'
  - inputs:
    - '[-4,3]'
    output: '[-4]'
  - inputs:
    - '[0,5,2]'
    output: '[0]'
  - inputs:
    - '[4,1,-4]'
    output: '[4]'
  - inputs:
    - '[5,-4,-1,-6,6,5]'
    output: '[5]'
  - inputs:
    - '[2,0,3,-3,3]'
    output: '[2]'
  - inputs:
    - '[-2,3,3,-1,5]'
    output: '[-2]'
  - inputs:
    - '[-1,-1]'
    output: '[-1]'
  - inputs:
    - '[3,3,3]'
    output: '[3, 3]'
  - inputs:
    - '[-5,2,-6,-4,2,3]'
    output: '[-5]'
  - inputs:
    - '[-1,-1,3]'
    output: '[-1, -1]'
  - inputs:
    - '[1,-2,-3]'
    output: '[1]'
  - inputs:
    - '[0,1]'
    output: '[0]'
  - inputs:
    - '[5,3,-4,3,3]'
    output: '[5]'
  - inputs:
    - '[-4,-5,6]'
    output: '[-4]'
  control_examples:
  - inputs:
    - '[1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[-2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[0,3,-2]'
    output: '[0]'
  - inputs:
    - '[6,1]'
    output: '[6]'
  - inputs:
    - '[5,1,-3,-3]'
    output: '[5]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[3,-6,-6,4]'
    output: '[3]'
  - inputs:
    - '[-4,0,-5,-2]'
    output: '[-4]'
  - inputs:
    - '[5,1,5,-4]'
    output: '[5]'
  - inputs:
    - '[-1,2,5,-6,-4,-5]'
    output: '[-1]'
  - inputs:
    - '[-4,3]'
    output: '[-4]'
  - inputs:
    - '[0,5,2]'
    output: '[0]'
  - inputs:
    - '[4,1,-4]'
    output: '[4]'
  - inputs:
    - '[5,-4,-1,-6,6,5]'
    output: '[5]'
  - inputs:
    - '[2,0,3,-3,3]'
    output: '[2]'
  - inputs:
    - '[-2,3,3,-1,5]'
    output: '[-2]'
  - inputs:
    - '[-1,-1]'
    output: '[-1]'
  - inputs:
    - '[3,3,3]'
    output: '[3, 3]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> last (group (init xs))
  sorted_examples:
  - inputs:
    - '[1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[2,6,4,-2,-3,6]'
    output: '[-3]'
  - inputs:
    - '[-3,6,3,-6,3,-5]'
    output: '[3]'
  - inputs:
    - '[0,-4,6]'
    output: '[-4]'
  - inputs:
    - '[4,-5,0,-5]'
    output: '[0]'
  - inputs:
    - '[3,-6,-6,4]'
    output: '[-6, -6]'
  - inputs:
    - '[3,0]'
    output: '[3]'
  - inputs:
    - '[-4,-2,-4,0]'
    output: '[-4]'
  - inputs:
    - '[3,2,4]'
    output: '[2]'
  - inputs:
    - '[-1,0]'
    output: '[-1]'
  - inputs:
    - '[2,0,1]'
    output: '[0]'
  - inputs:
    - '[3,-3,-1,3,5]'
    output: '[3]'
  - inputs:
    - '[3,-1,-4]'
    output: '[-1]'
  - inputs:
    - '[-4,0,-5,-2]'
    output: '[-5]'
  - inputs:
    - '[5,-3,2,-5]'
    output: '[2]'
  - inputs:
    - '[-3,-5,-6,-5,1]'
    output: '[-5]'
  - inputs:
    - '[4,3]'
    output: '[4]'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[-4,-3]'
    output: '[-4]'
  - inputs:
    - '[1,-1]'
    output: '[1]'
  - inputs:
    - '[-1,-2,2]'
    output: '[-2]'
  - inputs:
    - '[-2,1]'
    output: '[-2]'
  - inputs:
    - '[0,2]'
    output: '[0]'
  - inputs:
    - '[0]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[-1]'
    output: 'Prelude.last: empty list'
  unsorted_examples:
  - inputs:
    - '[1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[3,-6,-6,4]'
    output: '[-6, -6]'
  - inputs:
    - '[-4,0,-5,-2]'
    output: '[-5]'
  - inputs:
    - '[-4,-2,-4,0]'
    output: '[-4]'
  - inputs:
    - '[3,2,4]'
    output: '[2]'
  - inputs:
    - '[4,3]'
    output: '[4]'
  - inputs:
    - '[3,-3,-1,3,5]'
    output: '[3]'
  - inputs:
    - '[3,-1,-4]'
    output: '[-1]'
  - inputs:
    - '[-2,1]'
    output: '[-2]'
  - inputs:
    - '[5,-3,2,-5]'
    output: '[2]'
  - inputs:
    - '[3,0]'
    output: '[3]'
  - inputs:
    - '[1,-1]'
    output: '[1]'
  - inputs:
    - '[-1,0]'
    output: '[-1]'
  - inputs:
    - '[0,-4,6]'
    output: '[-4]'
  - inputs:
    - '[-1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[2,6,4,-2,-3,6]'
    output: '[-3]'
  - inputs:
    - '[-4,-3]'
    output: '[-4]'
  - inputs:
    - '[0]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[-1,-2,2]'
    output: '[-2]'
  - inputs:
    - '[-3,6,3,-6,3,-5]'
    output: '[3]'
  - inputs:
    - '[2,0,1]'
    output: '[0]'
  - inputs:
    - '[-3,-5,-6,-5,1]'
    output: '[-5]'
  - inputs:
    - '[4,-5,0,-5]'
    output: '[0]'
  - inputs:
    - '[0,2]'
    output: '[0]'
  control_examples:
  - inputs:
    - '[1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[3,-6,-6,4]'
    output: '[-6, -6]'
  - inputs:
    - '[-4,0,-5,-2]'
    output: '[-5]'
  - inputs:
    - '[-4,-2,-4,0]'
    output: '[-4]'
  - inputs:
    - '[3,2,4]'
    output: '[2]'
  - inputs:
    - '[4,3]'
    output: '[4]'
  - inputs:
    - '[3,-3,-1,3,5]'
    output: '[3]'
  - inputs:
    - '[3,-1,-4]'
    output: '[-1]'
  - inputs:
    - '[-2,1]'
    output: '[-2]'
  - inputs:
    - '[5,-3,2,-5]'
    output: '[2]'
  - inputs:
    - '[3,0]'
    output: '[3]'
  - inputs:
    - '[1,-1]'
    output: '[1]'
  - inputs:
    - '[-1,0]'
    output: '[-1]'
  - inputs:
    - '[0,-4,6]'
    output: '[-4]'
  - inputs:
    - '[-1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[2,6,4,-2,-3,6]'
    output: '[-3]'
  - inputs:
    - '[-4,-3]'
    output: '[-4]'
  - inputs:
    - '[0]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[-1,-2,2]'
    output: '[-2]'
  - inputs:
    - '[0,1]'
    output: '[0]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> concat (group (reverse xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[6,3,-1,-5,1,4]'
    output: '[4, 1, -5, -1, 3, 6]'
  - inputs:
    - '[-4,4,1,1,4,-1]'
    output: '[-1, 4, 1, 1, 4, -4]'
  - inputs:
    - '[0,0,3]'
    output: '[3, 0, 0]'
  - inputs:
    - '[-2,2,-2,1]'
    output: '[1, -2, 2, -2]'
  - inputs:
    - '[5,0,-5,-5]'
    output: '[-5, -5, 0, 5]'
  - inputs:
    - '[-3,-2]'
    output: '[-2, -3]'
  - inputs:
    - '[0,3,2,-4,-2]'
    output: '[-2, -4, 2, 3, 0]'
  - inputs:
    - '[3,3,1]'
    output: '[1, 3, 3]'
  - inputs:
    - '[2,0]'
    output: '[0, 2]'
  - inputs:
    - '[-1,3,0,-1,3,-6]'
    output: '[-6, 3, -1, 0, 3, -1]'
  - inputs:
    - '[-2,3,3]'
    output: '[3, 3, -2]'
  - inputs:
    - '[1,5,4,0,-5]'
    output: '[-5, 0, 4, 5, 1]'
  - inputs:
    - '[-2,1]'
    output: '[1, -2]'
  - inputs:
    - '[0,-2]'
    output: '[-2, 0]'
  - inputs:
    - '[-4,0]'
    output: '[0, -4]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  unsorted_examples:
  - inputs:
    - '[0,-2]'
    output: '[-2, 0]'
  - inputs:
    - '[-1,3,0,-1,3,-6]'
    output: '[-6, 3, -1, 0, 3, -1]'
  - inputs:
    - '[-2,1]'
    output: '[1, -2]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[0,0,3]'
    output: '[3, 0, 0]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[-2,3,3]'
    output: '[3, 3, -2]'
  - inputs:
    - '[2,0]'
    output: '[0, 2]'
  - inputs:
    - '[-3,-2]'
    output: '[-2, -3]'
  - inputs:
    - '[6,3,-1,-5,1,4]'
    output: '[4, 1, -5, -1, 3, 6]'
  - inputs:
    - '[1,5,4,0,-5]'
    output: '[-5, 0, 4, 5, 1]'
  - inputs:
    - '[5,0,-5,-5]'
    output: '[-5, -5, 0, 5]'
  - inputs:
    - '[-2,2,-2,1]'
    output: '[1, -2, 2, -2]'
  - inputs:
    - '[3,3,1]'
    output: '[1, 3, 3]'
  - inputs:
    - '[0,3,2,-4,-2]'
    output: '[-2, -4, 2, 3, 0]'
  - inputs:
    - '[-4,0]'
    output: '[0, -4]'
  - inputs:
    - '[-4,4,1,1,4,-1]'
    output: '[-1, 4, 1, 1, 4, -4]'
  control_examples:
  - inputs:
    - '[0,-2]'
    output: '[-2, 0]'
  - inputs:
    - '[-1,3,0,-1,3,-6]'
    output: '[-6, 3, -1, 0, 3, -1]'
  - inputs:
    - '[-2,1]'
    output: '[1, -2]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[0,0,3]'
    output: '[3, 0, 0]'
  - inputs:
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '[-2,3,3]'
    output: '[3, 3, -2]'
  - inputs:
    - '[2,0]'
    output: '[0, 2]'
  - inputs:
    - '[-3,-2]'
    output: '[-2, -3]'
  - inputs:
    - '[5,-2]'
    output: '[-2, 5]'
  - inputs:
    - '[3]'
    output: '[3]'
  - inputs:
    - '[2,1,0,-5]'
    output: '[-5, 0, 1, 2]'
  - inputs:
    - '[0]'
    output: '[0]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> concat (group (tail xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[-2,0,5,-1,-5]'
    output: '[0, 5, -1, -5]'
  - inputs:
    - '[2,4,5,4]'
    output: '[4, 5, 4]'
  - inputs:
    - '[0,-3,-3,4]'
    output: '[-3, -3, 4]'
  - inputs:
    - '[5,-3,2,-5]'
    output: '[-3, 2, -5]'
  - inputs:
    - '[-1,0]'
    output: '[0]'
  - inputs:
    - '[-6,6,3,3,1,1]'
    output: '[6, 3, 3, 1, 1]'
  - inputs:
    - '[-2,5,4,-3,5]'
    output: '[5, 4, -3, 5]'
  - inputs:
    - '[6,2,-1,0,1]'
    output: '[2, -1, 0, 1]'
  - inputs:
    - '[-1,0,-4,3,-2,3]'
    output: '[0, -4, 3, -2, 3]'
  - inputs:
    - '[4,-3]'
    output: '[-3]'
  - inputs:
    - '[-1,3,1]'
    output: '[3, 1]'
  - inputs:
    - '[0,3,-1,0]'
    output: '[3, -1, 0]'
  - inputs:
    - '[5,1,5,-4]'
    output: '[1, 5, -4]'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[2,0,2]'
    output: '[0, 2]'
  - inputs:
    - '[1,1]'
    output: '[1]'
  - inputs:
    - '[4,-4,3]'
    output: '[-4, 3]'
  - inputs:
    - '[4,-4,-5,-6]'
    output: '[-4, -5, -6]'
  - inputs:
    - '[2]'
    output: '[]'
  - inputs:
    - '[-4,3,5,-1]'
    output: '[3, 5, -1]'
  - inputs:
    - '[3,0]'
    output: '[0]'
  - inputs:
    - '[-2,1]'
    output: '[1]'
  - inputs:
    - '[1,2,1]'
    output: '[2, 1]'
  - inputs:
    - '[0]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '[-1,3,1]'
    output: '[3, 1]'
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[5,-3,2,-5]'
    output: '[-3, 2, -5]'
  - inputs:
    - '[3,0]'
    output: '[0]'
  - inputs:
    - '[2]'
    output: '[]'
  - inputs:
    - '[5,1,5,-4]'
    output: '[1, 5, -4]'
  - inputs:
    - '[4,-4,3]'
    output: '[-4, 3]'
  - inputs:
    - '[-6,6,3,3,1,1]'
    output: '[6, 3, 3, 1, 1]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[-1,0]'
    output: '[0]'
  - inputs:
    - '[1,2,1]'
    output: '[2, 1]'
  - inputs:
    - '[6,2,-1,0,1]'
    output: '[2, -1, 0, 1]'
  - inputs:
    - '[-2,5,4,-3,5]'
    output: '[5, 4, -3, 5]'
  - inputs:
    - '[-1,0,-4,3,-2,3]'
    output: '[0, -4, 3, -2, 3]'
  - inputs:
    - '[-2,0,5,-1,-5]'
    output: '[0, 5, -1, -5]'
  - inputs:
    - '[1,1]'
    output: '[1]'
  - inputs:
    - '[-4,3,5,-1]'
    output: '[3, 5, -1]'
  - inputs:
    - '[2,0,2]'
    output: '[0, 2]'
  - inputs:
    - '[4,-4,-5,-6]'
    output: '[-4, -5, -6]'
  - inputs:
    - '[4,-3]'
    output: '[-3]'
  - inputs:
    - '[-2,1]'
    output: '[1]'
  - inputs:
    - '[0,3,-1,0]'
    output: '[3, -1, 0]'
  - inputs:
    - '[0,-3,-3,4]'
    output: '[-3, -3, 4]'
  - inputs:
    - '[2,4,5,4]'
    output: '[4, 5, 4]'
  control_examples:
  - inputs:
    - '[-1,3,1]'
    output: '[3, 1]'
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[5,-3,2,-5]'
    output: '[-3, 2, -5]'
  - inputs:
    - '[3,0]'
    output: '[0]'
  - inputs:
    - '[2]'
    output: '[]'
  - inputs:
    - '[5,1,5,-4]'
    output: '[1, 5, -4]'
  - inputs:
    - '[4,-4,3]'
    output: '[-4, 3]'
  - inputs:
    - '[-6,6,3,3,1,1]'
    output: '[6, 3, 3, 1, 1]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[-1,0]'
    output: '[0]'
  - inputs:
    - '[1,2,1]'
    output: '[2, 1]'
  - inputs:
    - '[6,2,-1,0,1]'
    output: '[2, -1, 0, 1]'
  - inputs:
    - '[-2,5,4,-3,5]'
    output: '[5, 4, -3, 5]'
  - inputs:
    - '[-1,0,-4,3,-2,3]'
    output: '[0, -4, 3, -2, 3]'
  - inputs:
    - '[-2,0,5,-1,-5]'
    output: '[0, 5, -1, -5]'
  - inputs:
    - '[1,1]'
    output: '[1]'
  - inputs:
    - '[3,-1,0]'
    output: '[-1, 0]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> head (group (tail xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[-1,2,5,-6,-4,-5]'
    output: '[2]'
  - inputs:
    - '[4,0,-2]'
    output: '[0]'
  - inputs:
    - '[0,-3,-2,-4,-3]'
    output: '[-3]'
  - inputs:
    - '[-5,3,3,4]'
    output: '[3, 3]'
  - inputs:
    - '[0,-3]'
    output: '[-3]'
  - inputs:
    - '[4,2]'
    output: '[2]'
  - inputs:
    - '[1,-2,1,6,-4]'
    output: '[-2]'
  - inputs:
    - '[1,-3,-4,0]'
    output: '[-3]'
  - inputs:
    - '[-2,-2,0,-4,-1,-1]'
    output: '[-2]'
  - inputs:
    - '[3,2,-4,3]'
    output: '[2]'
  - inputs:
    - '[-2,3,0,4]'
    output: '[3]'
  - inputs:
    - '[-3,-2,-1]'
    output: '[-2]'
  - inputs:
    - '[1,-1]'
    output: '[-1]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-5,3]'
    output: '[3]'
  - inputs:
    - '[5,0,5,-3,4]'
    output: '[0]'
  - inputs:
    - '[0,-3,-1]'
    output: '[-3]'
  - inputs:
    - '[0,0,-1]'
    output: '[0]'
  - inputs:
    - '[-1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-2,-4,-1,-3]'
    output: '[-4]'
  - inputs:
    - '[1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-4,1,5]'
    output: '[1]'
  unsorted_examples:
  - inputs:
    - '[0,-3]'
    output: '[-3]'
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-5,3]'
    output: '[3]'
  - inputs:
    - '[1,-1]'
    output: '[-1]'
  - inputs:
    - '[-1,2,5,-6,-4,-5]'
    output: '[2]'
  - inputs:
    - '[5,0,5,-3,4]'
    output: '[0]'
  - inputs:
    - '[-2,-4,-1,-3]'
    output: '[-4]'
  - inputs:
    - '[3,2,-4,3]'
    output: '[2]'
  - inputs:
    - '[-3,-2,-1]'
    output: '[-2]'
  - inputs:
    - '[-2,-2,0,-4,-1,-1]'
    output: '[-2]'
  - inputs:
    - '[-5,3,3,4]'
    output: '[3, 3]'
  - inputs:
    - '[4,2]'
    output: '[2]'
  - inputs:
    - '[4,0,-2]'
    output: '[0]'
  - inputs:
    - '[0,-3,-1]'
    output: '[-3]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,-3,-4,0]'
    output: '[-3]'
  - inputs:
    - '[0,0,-1]'
    output: '[0]'
  - inputs:
    - '[-2,3,0,4]'
    output: '[3]'
  - inputs:
    - '[1,-2,1,6,-4]'
    output: '[-2]'
  - inputs:
    - '[0,-3,-2,-4,-3]'
    output: '[-3]'
  - inputs:
    - '[-4,1,5]'
    output: '[1]'
  control_examples:
  - inputs:
    - '[0,-3]'
    output: '[-3]'
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-5,3]'
    output: '[3]'
  - inputs:
    - '[1,-1]'
    output: '[-1]'
  - inputs:
    - '[-1,2,5,-6,-4,-5]'
    output: '[2]'
  - inputs:
    - '[5,0,5,-3,4]'
    output: '[0]'
  - inputs:
    - '[-2,-4,-1,-3]'
    output: '[-4]'
  - inputs:
    - '[3,2,-4,3]'
    output: '[2]'
  - inputs:
    - '[-3,-2,-1]'
    output: '[-2]'
  - inputs:
    - '[-2,-2,0,-4,-1,-1]'
    output: '[-2]'
  - inputs:
    - '[-5,3,3,4]'
    output: '[3, 3]'
  - inputs:
    - '[4,2]'
    output: '[2]'
  - inputs:
    - '[4,0,-2]'
    output: '[0]'
  - inputs:
    - '[0,-3,-1]'
    output: '[-3]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,-3,-4,0]'
    output: '[-3]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> last (group (tail xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[3,3,0,0]'
    output: '[0, 0]'
  - inputs:
    - '[-2,-2,0,-4,-1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '[1,0,0,-1,-6,5]'
    output: '[5]'
  - inputs:
    - '[1,6,6]'
    output: '[6, 6]'
  - inputs:
    - '[-4,-1,3,0]'
    output: '[0]'
  - inputs:
    - '[-3,-2,-1]'
    output: '[-1]'
  - inputs:
    - '[-3,1]'
    output: '[1]'
  - inputs:
    - '[0,3,3,6,-3]'
    output: '[-3]'
  - inputs:
    - '[1,-2]'
    output: '[-2]'
  - inputs:
    - '[-1,0]'
    output: '[0]'
  - inputs:
    - '[0,2]'
    output: '[2]'
  - inputs:
    - '[-1,4,4,-6,0]'
    output: '[0]'
  - inputs:
    - '[0,-4,6]'
    output: '[6]'
  - inputs:
    - '[-4,-1,0]'
    output: '[0]'
  - inputs:
    - '[-3,3,3]'
    output: '[3, 3]'
  - inputs:
    - '[4,1,-4]'
    output: '[-4]'
  - inputs:
    - '[-6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[0,5,2]'
    output: '[2]'
  - inputs:
    - '[1,3]'
    output: '[3]'
  - inputs:
    - '[0]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[0,-3]'
    output: '[-3]'
  - inputs:
    - '[-1,-5]'
    output: '[-5]'
  - inputs:
    - '[1]'
    output: 'Prelude.last: empty list'
  unsorted_examples:
  - inputs:
    - '[1,-2]'
    output: '[-2]'
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[-3,-2,-1]'
    output: '[-1]'
  - inputs:
    - '[-2,-2,0,-4,-1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '[1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[0]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[0,-3]'
    output: '[-3]'
  - inputs:
    - '[-1,0]'
    output: '[0]'
  - inputs:
    - '[0,-4,6]'
    output: '[6]'
  - inputs:
    - '[0,5,2]'
    output: '[2]'
  - inputs:
    - '[4,1,-4]'
    output: '[-4]'
  - inputs:
    - '[-1,-5]'
    output: '[-5]'
  - inputs:
    - '[-4,-1,0]'
    output: '[0]'
  - inputs:
    - '[-6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[1,6,6]'
    output: '[6, 6]'
  - inputs:
    - '[1,3]'
    output: '[3]'
  - inputs:
    - '[-4,-1,3,0]'
    output: '[0]'
  - inputs:
    - '[-3,1]'
    output: '[1]'
  - inputs:
    - '[0,2]'
    output: '[2]'
  - inputs:
    - '[0,3,3,6,-3]'
    output: '[-3]'
  - inputs:
    - '[1,0,0,-1,-6,5]'
    output: '[5]'
  - inputs:
    - '[-3,3,3]'
    output: '[3, 3]'
  - inputs:
    - '[-1,4,4,-6,0]'
    output: '[0]'
  - inputs:
    - '[3,3,0,0]'
    output: '[0, 0]'
  control_examples:
  - inputs:
    - '[1,-2]'
    output: '[-2]'
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[-3,-2,-1]'
    output: '[-1]'
  - inputs:
    - '[-2,-2,0,-4,-1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '[1]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[0]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[0,-3]'
    output: '[-3]'
  - inputs:
    - '[-1,0]'
    output: '[0]'
  - inputs:
    - '[0,-4,6]'
    output: '[6]'
  - inputs:
    - '[0,5,2]'
    output: '[2]'
  - inputs:
    - '[4,1,-4]'
    output: '[-4]'
  - inputs:
    - '[-1,-5]'
    output: '[-5]'
  - inputs:
    - '[-4,-1,0]'
    output: '[0]'
  - inputs:
    - '[-6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[1,6,6]'
    output: '[6, 6]'
  - inputs:
    - '[1,3]'
    output: '[3]'
  - inputs:
    - '[-4,-1,3,0]'
    output: '[0]'
  - inputs:
    - '[-3,1]'
    output: '[1]'
  - inputs:
    - '[0,2]'
    output: '[2]'
  - inputs:
    - '[0,3,3,6,-3]'
    output: '[-3]'
  - inputs:
    - '[1,-2,0,-2]'
    output: '[-2]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> map head (group xs)
  sorted_examples:
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-3,0,-3,5,6,-1]'
    output: '[-3, 0, -3, 5, 6, -1]'
  - inputs:
    - '[5,2,-2,4]'
    output: '[5, 2, -2, 4]'
  - inputs:
    - '[-4,1,0,-5]'
    output: '[-4, 1, 0, -5]'
  - inputs:
    - '[5,-3,-3]'
    output: '[5, -3]'
  - inputs:
    - '[0,2]'
    output: '[0, 2]'
  - inputs:
    - '[-4,-4,-6,1,-2,-1]'
    output: '[-4, -6, 1, -2, -1]'
  - inputs:
    - '[-2,5,5,5]'
    output: '[-2, 5]'
  - inputs:
    - '[-1,0]'
    output: '[-1, 0]'
  - inputs:
    - '[1,3]'
    output: '[1, 3]'
  - inputs:
    - '[4,-4,4,4]'
    output: '[4, -4, 4]'
  - inputs:
    - '[-2,-3,-1]'
    output: '[-2, -3, -1]'
  - inputs:
    - '[1,5,1,-3,2,-6]'
    output: '[1, 5, 1, -3, 2, -6]'
  - inputs:
    - '[0,2,-1]'
    output: '[0, 2, -1]'
  - inputs:
    - '[-1,3,-1]'
    output: '[-1, 3, -1]'
  - inputs:
    - '[2,6,6,2]'
    output: '[2, 6, 2]'
  - inputs:
    - '[-2,1]'
    output: '[-2, 1]'
  - inputs:
    - '[1,0,2]'
    output: '[1, 0, 2]'
  - inputs:
    - '[2]'
    output: diverge
  - inputs:
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '[1,5,5]'
    output: '[1, 5]'
  - inputs:
    - '[-2,3,3]'
    output: '[-2, 3]'
  - inputs:
    - '[1,3,2]'
    output: '[1, 3, 2]'
  - inputs:
    - '[-2,-2,3]'
    output: '[-2, 3]'
  - inputs:
    - '[2,2]'
    output: '[2]'
  unsorted_examples:
  - inputs:
    - '[4,-4,4,4]'
    output: '[4, -4, 4]'
  - inputs:
    - '[5,-3,-3]'
    output: '[5, -3]'
  - inputs:
    - '[1,3]'
    output: '[1, 3]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1,0]'
    output: '[-1, 0]'
  - inputs:
    - '[-2,3,3]'
    output: '[-2, 3]'
  - inputs:
    - '[-2,1]'
    output: '[-2, 1]'
  - inputs:
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '[0,2,-1]'
    output: '[0, 2, -1]'
  - inputs:
    - '[-1,3,-1]'
    output: '[-1, 3, -1]'
  - inputs:
    - '[0,2]'
    output: '[0, 2]'
  - inputs:
    - '[1,5,1,-3,2,-6]'
    output: '[1, 5, 1, -3, 2, -6]'
  - inputs:
    - '[1,0,2]'
    output: '[1, 0, 2]'
  - inputs:
    - '[-2,-3,-1]'
    output: '[-2, -3, -1]'
  - inputs:
    - '[-4,1,0,-5]'
    output: '[-4, 1, 0, -5]'
  - inputs:
    - '[-3,0,-3,5,6,-1]'
    output: '[-3, 0, -3, 5, 6, -1]'
  - inputs:
    - '[5,2,-2,4]'
    output: '[5, 2, -2, 4]'
  - inputs:
    - '[-2,5,5,5]'
    output: '[-2, 5]'
  - inputs:
    - '[-4,-4,-6,1,-2,-1]'
    output: '[-4, -6, 1, -2, -1]'
  - inputs:
    - '[2]'
    output: diverge
  - inputs:
    - '[2,6,6,2]'
    output: '[2, 6, 2]'
  - inputs:
    - '[2,2]'
    output: '[2]'
  - inputs:
    - '[-2,-2,3]'
    output: '[-2, 3]'
  - inputs:
    - '[1,5,5]'
    output: '[1, 5]'
  - inputs:
    - '[1,3,2]'
    output: '[1, 3, 2]'
  control_examples:
  - inputs:
    - '[4,-4,4,4]'
    output: '[4, -4, 4]'
  - inputs:
    - '[5,-3,-3]'
    output: '[5, -3]'
  - inputs:
    - '[1,3]'
    output: '[1, 3]'
  - inputs:
    - '[]'
    output: '[]'
  - inputs:
    - '[-1,0]'
    output: '[-1, 0]'
  - inputs:
    - '[-2,3,3]'
    output: '[-2, 3]'
  - inputs:
    - '[-2,1]'
    output: '[-2, 1]'
  - inputs:
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '[0,2,-1]'
    output: '[0, 2, -1]'
  - inputs:
    - '[-1,3,-1]'
    output: '[-1, 3, -1]'
  - inputs:
    - '[0,2]'
    output: '[0, 2]'
  - inputs:
    - '[-3,0,-3,5,6,-1]'
    output: '[-3, 0, -3, 5, 6, -1]'
  - inputs:
    - '[3,-2,3]'
    output: '[3, -2, 3]'
  - inputs:
    - '[-2,5,5,5]'
    output: '[-2, 5]'
  - inputs:
    - '[1,1]'
    output: '[1]'
  - inputs:
    - '[3]'
    output: '[3]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> init (head (group xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[2,5,0,-6,-5,-3]'
    output: '[]'
  - inputs:
    - '[-5,-1,0,4,5]'
    output: '[]'
  - inputs:
    - '[3,-1,-4,-5,-2,6]'
    output: '[]'
  - inputs:
    - '[-4,-4]'
    output: '[-4]'
  - inputs:
    - '[1,2,1]'
    output: '[]'
  - inputs:
    - '[0,0,-2,-1]'
    output: '[0]'
  - inputs:
    - '[4,2,1,0,2,5]'
    output: '[]'
  - inputs:
    - '[-2,2,-3,-4]'
    output: '[]'
  - inputs:
    - '[-1,2]'
    output: '[]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[2,6,4,-2,-3,6]'
    output: '[]'
  - inputs:
    - '[2,-3,1,3,-2]'
    output: '[]'
  - inputs:
    - '[1,-2]'
    output: '[]'
  - inputs:
    - '[2,0,3,-3,3]'
    output: '[]'
  - inputs:
    - '[-1,-1,4,-3]'
    output: '[-1]'
  - inputs:
    - '[-2,5,0,4,2,-6]'
    output: '[]'
  - inputs:
    - '[6,-4,-5,-4,-6]'
    output: '[]'
  - inputs:
    - '[-5,-4,-1,-5,4]'
    output: '[]'
  - inputs:
    - '[1,5]'
    output: '[]'
  - inputs:
    - '[-4,-2,-2]'
    output: '[]'
  - inputs:
    - '[-5,3,3,4]'
    output: '[]'
  - inputs:
    - '[3,4,0]'
    output: '[]'
  - inputs:
    - '[-4,0]'
    output: '[]'
  - inputs:
    - '[5]'
    output: '[]'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[2,0]'
    output: '[]'
  - inputs:
    - '[5,-4,-1,-6,6,5]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[-5,3,3,4]'
    output: '[]'
  - inputs:
    - '[-4,0]'
    output: '[]'
  - inputs:
    - '[1,2,1]'
    output: '[]'
  - inputs:
    - '[2,0]'
    output: '[]'
  - inputs:
    - '[2,6,4,-2,-3,6]'
    output: '[]'
  - inputs:
    - '[5]'
    output: '[]'
  - inputs:
    - '[5,-4,-1,-6,6,5]'
    output: '[]'
  - inputs:
    - '[2,0,3,-3,3]'
    output: '[]'
  - inputs:
    - '[1,-2]'
    output: '[]'
  - inputs:
    - '[3,-1,-4,-5,-2,6]'
    output: '[]'
  - inputs:
    - '[2,5,0,-6,-5,-3]'
    output: '[]'
  - inputs:
    - '[2,-3,1,3,-2]'
    output: '[]'
  - inputs:
    - '[1,5]'
    output: '[]'
  - inputs:
    - '[-4,-2,-2]'
    output: '[]'
  - inputs:
    - '[0,0,-2,-1]'
    output: '[0]'
  - inputs:
    - '[-5,-4,-1,-5,4]'
    output: '[]'
  - inputs:
    - '[-2,2,-3,-4]'
    output: '[]'
  - inputs:
    - '[6,-4,-5,-4,-6]'
    output: '[]'
  - inputs:
    - '[-2,5,0,4,2,-6]'
    output: '[]'
  - inputs:
    - '[-1,-1,4,-3]'
    output: '[-1]'
  - inputs:
    - '[3,4,0]'
    output: '[]'
  - inputs:
    - '[-4,-4]'
    output: '[-4]'
  - inputs:
    - '[4,2,1,0,2,5]'
    output: '[]'
  - inputs:
    - '[-1,2]'
    output: '[]'
  - inputs:
    - '[-5,-1,0,4,5]'
    output: '[]'
  control_examples:
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-2]'
    output: '[]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[-5,3,3,4]'
    output: '[]'
  - inputs:
    - '[-4,0]'
    output: '[]'
  - inputs:
    - '[1,2,1]'
    output: '[]'
  - inputs:
    - '[2,0]'
    output: '[]'
  - inputs:
    - '[2,6,4,-2,-3,6]'
    output: '[]'
  - inputs:
    - '[5]'
    output: '[]'
  - inputs:
    - '[5,-4,-1,-6,6,5]'
    output: '[]'
  - inputs:
    - '[2,0,3,-3,3]'
    output: '[]'
  - inputs:
    - '[1,-2]'
    output: '[]'
  - inputs:
    - '[3,-1,-4,-5,-2,6]'
    output: '[]'
  - inputs:
    - '[2,5,0,-6,-5,-3]'
    output: '[]'
  - inputs:
    - '[2,-3,1,3,-2]'
    output: '[]'
  - inputs:
    - '[1,5]'
    output: '[]'
  - inputs:
    - '[-4,-2,-2]'
    output: '[]'
  - inputs:
    - '[0,0,-2,-1]'
    output: '[0]'
  - inputs:
    - '[-5,-4,-1,-5,4]'
    output: '[]'
  - inputs:
    - '[-2,2,-3,-4]'
    output: '[]'
  - inputs:
    - '[6,-4,-5,-4,-6]'
    output: '[]'
  - inputs:
    - '[3,1,-3,-1]'
    output: '[]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> init (last (group xs))
  sorted_examples:
  - inputs:
    - '[2,1,3]'
    output: '[]'
  - inputs:
    - '[-4,-1,3,0]'
    output: '[]'
  - inputs:
    - '[0,0,-2,-1]'
    output: '[]'
  - inputs:
    - '[-6,5,-4,-3,-1,1]'
    output: '[]'
  - inputs:
    - '[4,-6,1,2,4,1]'
    output: '[]'
  - inputs:
    - '[0,-4,5,5]'
    output: '[5]'
  - inputs:
    - '[1,5,4,4,0,-2]'
    output: '[]'
  - inputs:
    - '[-4,0,5,-1,4]'
    output: '[]'
  - inputs:
    - '[3,-1,-1,1]'
    output: '[]'
  - inputs:
    - '[-4,-2,-2]'
    output: '[-2]'
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[-3,1]'
    output: '[]'
  - inputs:
    - '[4,0,-2]'
    output: '[]'
  - inputs:
    - '[-4,-3]'
    output: '[]'
  - inputs:
    - '[6,2,-1,0,1]'
    output: '[]'
  - inputs:
    - '[4,0,5,4]'
    output: '[]'
  - inputs:
    - '[-2,5,4,-3,5]'
    output: '[]'
  - inputs:
    - '[0,-1,2]'
    output: '[]'
  - inputs:
    - '[-3,3,-4,-2,-4,-5]'
    output: '[]'
  - inputs:
    - '[-4,4,5,4]'
    output: '[]'
  - inputs:
    - '[-2,4,-3,0,2]'
    output: '[]'
  - inputs:
    - '[6,3,-6]'
    output: '[]'
  - inputs:
    - '[-1,0,-2]'
    output: '[]'
  - inputs:
    - '[-2,-3,5]'
    output: '[]'
  - inputs:
    - '[1,-1,1,4]'
    output: '[]'
  - inputs:
    - '[4,2]'
    output: '[]'
  - inputs:
    - '[5]'
    output: '[]'
  - inputs:
    - '[0,-1]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '[2,1,3]'
    output: '[]'
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[-4,-2,-2]'
    output: '[-2]'
  - inputs:
    - '[0,0,-2,-1]'
    output: '[]'
  - inputs:
    - '[-4,-1,3,0]'
    output: '[]'
  - inputs:
    - '[-3,1]'
    output: '[]'
  - inputs:
    - '[4,2]'
    output: '[]'
  - inputs:
    - '[4,0,-2]'
    output: '[]'
  - inputs:
    - '[6,2,-1,0,1]'
    output: '[]'
  - inputs:
    - '[-2,5,4,-3,5]'
    output: '[]'
  - inputs:
    - '[-4,-3]'
    output: '[]'
  - inputs:
    - '[6,3,-6]'
    output: '[]'
  - inputs:
    - '[-6,5,-4,-3,-1,1]'
    output: '[]'
  - inputs:
    - '[-2,-3,5]'
    output: '[]'
  - inputs:
    - '[5]'
    output: '[]'
  - inputs:
    - '[1,-1,1,4]'
    output: '[]'
  - inputs:
    - '[1,5,4,4,0,-2]'
    output: '[]'
  - inputs:
    - '[4,0,5,4]'
    output: '[]'
  - inputs:
    - '[0,-1]'
    output: '[]'
  - inputs:
    - '[-4,4,5,4]'
    output: '[]'
  - inputs:
    - '[-2,4,-3,0,2]'
    output: '[]'
  - inputs:
    - '[4,-6,1,2,4,1]'
    output: '[]'
  - inputs:
    - '[0,-4,5,5]'
    output: '[5]'
  - inputs:
    - '[-3,3,-4,-2,-4,-5]'
    output: '[]'
  - inputs:
    - '[0,-1,2]'
    output: '[]'
  - inputs:
    - '[3,-1,-1,1]'
    output: '[]'
  - inputs:
    - '[-4,0,5,-1,4]'
    output: '[]'
  - inputs:
    - '[-1,0,-2]'
    output: '[]'
  control_examples:
  - inputs:
    - '[2,1,3]'
    output: '[]'
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[-4,-2,-2]'
    output: '[-2]'
  - inputs:
    - '[0,0,-2,-1]'
    output: '[]'
  - inputs:
    - '[-4,-1,3,0]'
    output: '[]'
  - inputs:
    - '[-3,1]'
    output: '[]'
  - inputs:
    - '[4,2]'
    output: '[]'
  - inputs:
    - '[4,0,-2]'
    output: '[]'
  - inputs:
    - '[6,2,-1,0,1]'
    output: '[]'
  - inputs:
    - '[-2,5,4,-3,5]'
    output: '[]'
  - inputs:
    - '[-4,-3]'
    output: '[]'
  - inputs:
    - '[6,3,-6]'
    output: '[]'
  - inputs:
    - '[-6,5,-4,-3,-1,1]'
    output: '[]'
  - inputs:
    - '[-2,-3,5]'
    output: '[]'
  - inputs:
    - '[5]'
    output: '[]'
  - inputs:
    - '[1,-1,1,4]'
    output: '[]'
  - inputs:
    - '[1,5,4,4,0,-2]'
    output: '[]'
  - inputs:
    - '[4,0,5,4]'
    output: '[]'
  - inputs:
    - '[0,-1]'
    output: '[]'
  - inputs:
    - '[-4,4,5,4]'
    output: '[]'
  - inputs:
    - '[-2,4,-3,0,2]'
    output: '[]'
  - inputs:
    - '[1,-1,-5,0]'
    output: '[]'
  - inputs:
    - '[-1]'
    output: '[]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> concat (init (group xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[3,-3,6,4,-3]'
    output: '[3, -3, 6, 4]'
  - inputs:
    - '[-1,0,-4,3,-2,3]'
    output: '[-1, 0, -4, 3, -2]'
  - inputs:
    - '[-5,2,-2,0,0]'
    output: '[-5, 2, -2]'
  - inputs:
    - '[1,0,4,4]'
    output: '[1, 0]'
  - inputs:
    - '[6,-1,-1,3]'
    output: '[6, -1, -1]'
  - inputs:
    - '[0,-3,-1]'
    output: '[0, -3]'
  - inputs:
    - '[-5,-4,-1,-5,4]'
    output: '[-5, -4, -1, -5]'
  - inputs:
    - '[-2,3,1]'
    output: '[-2, 3]'
  - inputs:
    - '[0,2,6,0,-4,5]'
    output: '[0, 2, 6, 0, -4]'
  - inputs:
    - '[3,-1,-5,-4,6,-4]'
    output: '[3, -1, -5, -4, 6]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[2,-2]'
    output: '[2]'
  - inputs:
    - '[-2,0,5,-1,-5]'
    output: '[-2, 0, 5, -1]'
  - inputs:
    - '[-3,-1,2,5,-1]'
    output: '[-3, -1, 2, 5]'
  - inputs:
    - '[-5,5,-2,2]'
    output: '[-5, 5, -2]'
  - inputs:
    - '[-1,0,1]'
    output: '[-1, 0]'
  - inputs:
    - '[-5,-2,1,5]'
    output: '[-5, -2, 1]'
  - inputs:
    - '[-2,2]'
    output: '[-2]'
  - inputs:
    - '[-3,3,5,3]'
    output: '[-3, 3, 5]'
  - inputs:
    - '[6,1,-6]'
    output: '[6, 1]'
  - inputs:
    - '[1,4,4,-4]'
    output: '[1, 4, 4]'
  - inputs:
    - '[0,3,3]'
    output: '[0]'
  - inputs:
    - '[0,-1]'
    output: '[0]'
  - inputs:
    - '[-4,-1,-4]'
    output: '[-4, -1]'
  - inputs:
    - '[-1,-2]'
    output: '[-1]'
  - inputs:
    - '[-1]'
    output: '[]'
  - inputs:
    - '[2]'
    output: '[]'
  - inputs:
    - '[-2,2,-3,-4]'
    output: '[-2, 2, -3]'
  unsorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[0,-1]'
    output: '[0]'
  - inputs:
    - '[6,1,-6]'
    output: '[6, 1]'
  - inputs:
    - '[-5,-4,-1,-5,4]'
    output: '[-5, -4, -1, -5]'
  - inputs:
    - '[-2,2,-3,-4]'
    output: '[-2, 2, -3]'
  - inputs:
    - '[-2,2]'
    output: '[-2]'
  - inputs:
    - '[-1]'
    output: '[]'
  - inputs:
    - '[0,-3,-1]'
    output: '[0, -3]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[-1,0,-4,3,-2,3]'
    output: '[-1, 0, -4, 3, -2]'
  - inputs:
    - '[-2,0,5,-1,-5]'
    output: '[-2, 0, 5, -1]'
  - inputs:
    - '[2]'
    output: '[]'
  - inputs:
    - '[-5,2,-2,0,0]'
    output: '[-5, 2, -2]'
  - inputs:
    - '[-2,3,1]'
    output: '[-2, 3]'
  - inputs:
    - '[-1,-2]'
    output: '[-1]'
  - inputs:
    - '[-3,3,5,3]'
    output: '[-3, 3, 5]'
  - inputs:
    - '[-5,5,-2,2]'
    output: '[-5, 5, -2]'
  - inputs:
    - '[-4,-1,-4]'
    output: '[-4, -1]'
  - inputs:
    - '[3,-1,-5,-4,6,-4]'
    output: '[3, -1, -5, -4, 6]'
  - inputs:
    - '[-1,0,1]'
    output: '[-1, 0]'
  - inputs:
    - '[1,4,4,-4]'
    output: '[1, 4, 4]'
  - inputs:
    - '[0,2,6,0,-4,5]'
    output: '[0, 2, 6, 0, -4]'
  - inputs:
    - '[2,-2]'
    output: '[2]'
  - inputs:
    - '[6,-1,-1,3]'
    output: '[6, -1, -1]'
  - inputs:
    - '[-3,-1,2,5,-1]'
    output: '[-3, -1, 2, 5]'
  - inputs:
    - '[1,0,4,4]'
    output: '[1, 0]'
  - inputs:
    - '[0,3,3]'
    output: '[0]'
  - inputs:
    - '[-5,-2,1,5]'
    output: '[-5, -2, 1]'
  - inputs:
    - '[3,-3,6,4,-3]'
    output: '[3, -3, 6, 4]'
  control_examples:
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[0,-1]'
    output: '[0]'
  - inputs:
    - '[6,1,-6]'
    output: '[6, 1]'
  - inputs:
    - '[-5,-4,-1,-5,4]'
    output: '[-5, -4, -1, -5]'
  - inputs:
    - '[-2,2,-3,-4]'
    output: '[-2, 2, -3]'
  - inputs:
    - '[-2,2]'
    output: '[-2]'
  - inputs:
    - '[-1]'
    output: '[]'
  - inputs:
    - '[0,-3,-1]'
    output: '[0, -3]'
  - inputs:
    - '[0]'
    output: '[]'
  - inputs:
    - '[-1,0,-4,3,-2,3]'
    output: '[-1, 0, -4, 3, -2]'
  - inputs:
    - '[-2,0,5,-1,-5]'
    output: '[-2, 0, 5, -1]'
  - inputs:
    - '[2]'
    output: '[]'
  - inputs:
    - '[-5,2,-2,0,0]'
    output: '[-5, 2, -2]'
  - inputs:
    - '[-2,3,1]'
    output: '[-2, 3]'
  - inputs:
    - '[-1,-2]'
    output: '[-1]'
  - inputs:
    - '[-3,3,5,3]'
    output: '[-3, 3, 5]'
  - inputs:
    - '[-5,5,-2,2]'
    output: '[-5, 5, -2]'
  - inputs:
    - '[-4,-1,-4]'
    output: '[-4, -1]'
  - inputs:
    - '[2,-2]'
    output: '[2]'
- name: dedupe
  query: 'Eq a => xs: [a] -> [a]'
  candidate: \xs -> head (init (group xs))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[1,-3,-4,0]'
    output: '[1]'
  - inputs:
    - '[-1,-1,0,3,-4]'
    output: '[-1, -1]'
  - inputs:
    - '[-2,4,-3,0,2]'
    output: '[-2]'
  - inputs:
    - '[0,3,3,6,-3]'
    output: '[0]'
  - inputs:
    - '[2,4,6]'
    output: '[2]'
  - inputs:
    - '[-4,-1,-4]'
    output: '[-4]'
  - inputs:
    - '[0,2]'
    output: '[0]'
  - inputs:
    - '[3,3,3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,-1]'
    output: '[1]'
  - inputs:
    - '[-1,2]'
    output: '[-1]'
  - inputs:
    - '[3,-4,-2,5,3]'
    output: '[3]'
  - inputs:
    - '[-4,4,5,4]'
    output: '[-4]'
  - inputs:
    - '[6,-4,-5,-4,-6]'
    output: '[6]'
  - inputs:
    - '[4]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,3]'
    output: '[1]'
  - inputs:
    - '[-1,-1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[2,0,-1]'
    output: '[2]'
  - inputs:
    - '[-3,-2]'
    output: '[-3]'
  - inputs:
    - '[-1,0]'
    output: '[-1]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-1,-2,2]'
    output: '[-1]'
  - inputs:
    - '[-1]'
    output: 'Prelude.head: empty list'
  unsorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[-4,-1,-4]'
    output: '[-4]'
  - inputs:
    - '[-1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-4,4,5,4]'
    output: '[-4]'
  - inputs:
    - '[-2,4,-3,0,2]'
    output: '[-2]'
  - inputs:
    - '[6,-4,-5,-4,-6]'
    output: '[6]'
  - inputs:
    - '[0,2]'
    output: '[0]'
  - inputs:
    - '[0,3,3,6,-3]'
    output: '[0]'
  - inputs:
    - '[-1,2]'
    output: '[-1]'
  - inputs:
    - '[1,-3,-4,0]'
    output: '[1]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-3,-2]'
    output: '[-3]'
  - inputs:
    - '[-1,-1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-1,-2,2]'
    output: '[-1]'
  - inputs:
    - '[3,3,3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[2,4,6]'
    output: '[2]'
  - inputs:
    - '[4]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,-1]'
    output: '[1]'
  - inputs:
    - '[-1,-1,0,3,-4]'
    output: '[-1, -1]'
  - inputs:
    - '[2,0,-1]'
    output: '[2]'
  - inputs:
    - '[3,-4,-2,5,3]'
    output: '[3]'
  - inputs:
    - '[-1,0]'
    output: '[-1]'
  - inputs:
    - '[1,3]'
    output: '[1]'
  control_examples:
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[-4,-1,-4]'
    output: '[-4]'
  - inputs:
    - '[-1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-4,4,5,4]'
    output: '[-4]'
  - inputs:
    - '[-2,4,-3,0,2]'
    output: '[-2]'
  - inputs:
    - '[6,-4,-5,-4,-6]'
    output: '[6]'
  - inputs:
    - '[0,2]'
    output: '[0]'
  - inputs:
    - '[0,3,3,6,-3]'
    output: '[0]'
  - inputs:
    - '[-1,2]'
    output: '[-1]'
  - inputs:
    - '[1,-3,-4,0]'
    output: '[1]'
  - inputs:
    - '[0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-3,-2]'
    output: '[-3]'
  - inputs:
    - '[-1,-1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[-1,-2,2]'
    output: '[-1]'
  - inputs:
    - '[3,3,3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[2,4,6]'
    output: '[2]'
  - inputs:
    - '[4]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[1,-1]'
    output: '[1]'
  - inputs:
    - '[-1,-1,0,3,-4]'
    output: '[-1, -1]'
  - inputs:
    - '[2,-2,-2]'
    output: '[2]'
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool Nothing (Just v) b
  sorted_examples:
  - inputs:
    - 'False'
    - '1'
    output: Nothing
  - inputs:
    - 'True'
    - '9'
    output: Just 9
  unsorted_examples:
  - inputs:
    - 'False'
    - '1'
    output: Nothing
  - inputs:
    - 'True'
    - '9'
    output: Just 9
  control_examples:
  - inputs:
    - 'False'
    - '1'
    output: Nothing
  - inputs:
    - 'True'
    - '9'
    output: Just 9
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool (Just v) Nothing b
  sorted_examples:
  - inputs:
    - 'True'
    - '5'
    output: Nothing
  - inputs:
    - 'False'
    - '1'
    output: Just 1
  unsorted_examples:
  - inputs:
    - 'False'
    - '1'
    output: Just 1
  - inputs:
    - 'True'
    - '5'
    output: Nothing
  control_examples:
  - inputs:
    - 'False'
    - '1'
    output: Just 1
  - inputs:
    - 'True'
    - '5'
    output: Nothing
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool (Just v) (Just v) b
  sorted_examples:
  - inputs:
    - 'True'
    - '5'
    output: Just 5
  - inputs:
    - 'False'
    - '4'
    output: Just 4
  unsorted_examples:
  - inputs:
    - 'True'
    - '5'
    output: Just 5
  - inputs:
    - 'False'
    - '4'
    output: Just 4
  control_examples:
  - inputs:
    - 'True'
    - '5'
    output: Just 5
  - inputs:
    - 'False'
    - '4'
    output: Just 4
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool (Just v) (fromJust Nothing) b
  sorted_examples:
  - inputs:
    - 'True'
    - '6'
    output: "Maybe.fromJust: Nothing\nCallStack (from HasCallStack):\n  error, called\
      \ at libraries/base/Data/Maybe.hs:148:21 in base:Data.Maybe\n  fromJust, called\
      \ at <interactive>:2:62 in interactive:Ghci1"
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  unsorted_examples:
  - inputs:
    - 'True'
    - '6'
    output: "Maybe.fromJust: Nothing\nCallStack (from HasCallStack):\n  error, called\
      \ at libraries/base/Data/Maybe.hs:148:21 in base:Data.Maybe\n  fromJust, called\
      \ at <interactive>:2:62 in interactive:Ghci1"
  - inputs:
    - 'False'
    - '9'
    output: Just 9
  control_examples:
  - inputs:
    - 'True'
    - '6'
    output: "Maybe.fromJust: Nothing\nCallStack (from HasCallStack):\n  error, called\
      \ at libraries/base/Data/Maybe.hs:148:21 in base:Data.Maybe\n  fromJust, called\
      \ at <interactive>:2:62 in interactive:Ghci1"
  - inputs:
    - 'False'
    - '9'
    output: Just 9
- name: test
  query: 'b: Bool -> v: a -> Maybe a'
  candidate: \b v -> bool (head []) (Just v) b
  sorted_examples:
  - inputs:
    - 'False'
    - '4'
    output: 'Prelude.head: empty list'
  - inputs:
    - 'True'
    - '2'
    output: Just 2
  unsorted_examples:
  - inputs:
    - 'False'
    - '4'
    output: 'Prelude.head: empty list'
  - inputs:
    - 'True'
    - '2'
    output: Just 2
  control_examples:
  - inputs:
    - 'False'
    - '4'
    output: 'Prelude.head: empty list'
  - inputs:
    - 'True'
    - '2'
    output: Just 2
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> drop n xs
  sorted_examples:
  - inputs:
    - '5'
    - '[5,5]'
    output: '[]'
  - inputs:
    - '1'
    - '[2,6,-2,1,0]'
    output: '[6, -2, 1, 0]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[4,0]'
    output: '[4, 0]'
  - inputs:
    - '7'
    - '[3,9,8,8,0]'
    output: '[]'
  - inputs:
    - '2'
    - '[2,9,0,0]'
    output: '[0, 0]'
  - inputs:
    - '-1'
    - '[6,3,-1,-2,8]'
    output: '[6, 3, -1, -2, 8]'
  - inputs:
    - '-1'
    - '[8,7,6]'
    output: '[8, 7, 6]'
  - inputs:
    - '0'
    - '[-2,9,4,3]'
    output: '[-2, 9, 4, 3]'
  - inputs:
    - '0'
    - '[0]'
    output: '[0]'
  - inputs:
    - '9'
    - '[8]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[6,1]'
    output: '[1]'
  - inputs:
    - '3'
    - '[7,7,1,1]'
    output: '[1]'
  - inputs:
    - '-1'
    - '[2]'
    output: '[2]'
  - inputs:
    - '4'
    - '[8,2,10,2]'
    output: '[]'
  - inputs:
    - '0'
    - '[5,-2,1,0,3]'
    output: '[5, -2, 1, 0, 3]'
  - inputs:
    - '9'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[10,2,3]'
    output: '[]'
  - inputs:
    - '0'
    - '[-2,6]'
    output: '[-2, 6]'
  - inputs:
    - '4'
    - '[4,9,3,1,-1]'
    output: '[-1]'
  unsorted_examples:
  - inputs:
    - '5'
    - '[5,5]'
    output: '[]'
  - inputs:
    - '4'
    - '[4,9,3,1,-1]'
    output: '[-1]'
  - inputs:
    - '9'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[8]'
    output: '[]'
  - inputs:
    - '-1'
    - '[8,7,6]'
    output: '[8, 7, 6]'
  - inputs:
    - '3'
    - '[7,7,1,1]'
    output: '[1]'
  - inputs:
    - '1'
    - '[6,1]'
    output: '[1]'
  - inputs:
    - '4'
    - '[8,2,10,2]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[0]'
    output: '[0]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[-2,6]'
    output: '[-2, 6]'
  - inputs:
    - '7'
    - '[3,9,8,8,0]'
    output: '[]'
  - inputs:
    - '-1'
    - '[6,3,-1,-2,8]'
    output: '[6, 3, -1, -2, 8]'
  - inputs:
    - '-1'
    - '[2]'
    output: '[2]'
  - inputs:
    - '-1'
    - '[4,0]'
    output: '[4, 0]'
  - inputs:
    - '8'
    - '[10,2,3]'
    output: '[]'
  - inputs:
    - '1'
    - '[2,6,-2,1,0]'
    output: '[6, -2, 1, 0]'
  - inputs:
    - '2'
    - '[2,9,0,0]'
    output: '[0, 0]'
  - inputs:
    - '0'
    - '[-2,9,4,3]'
    output: '[-2, 9, 4, 3]'
  - inputs:
    - '0'
    - '[5,-2,1,0,3]'
    output: '[5, -2, 1, 0, 3]'
  control_examples:
  - inputs:
    - '5'
    - '[5,5]'
    output: '[]'
  - inputs:
    - '4'
    - '[4,9,3,1,-1]'
    output: '[-1]'
  - inputs:
    - '9'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[8]'
    output: '[]'
  - inputs:
    - '-1'
    - '[8,7,6]'
    output: '[8, 7, 6]'
  - inputs:
    - '3'
    - '[7,7,1,1]'
    output: '[1]'
  - inputs:
    - '1'
    - '[6,1]'
    output: '[1]'
  - inputs:
    - '4'
    - '[8,2,10,2]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[0]'
    output: '[0]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[-2,6]'
    output: '[-2, 6]'
  - inputs:
    - '7'
    - '[3,9,8,8,0]'
    output: '[]'
  - inputs:
    - '-1'
    - '[6,3,-1,-2,8]'
    output: '[6, 3, -1, -2, 8]'
  - inputs:
    - '-1'
    - '[2]'
    output: '[2]'
  - inputs:
    - '-1'
    - '[4,0]'
    output: '[4, 0]'
  - inputs:
    - '8'
    - '[10,2,3]'
    output: '[]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> take n xs
  sorted_examples:
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[4,9,3,1,-1]'
    output: '[4, 9, 3, 1]'
  - inputs:
    - '1'
    - '[8,10,1,2]'
    output: '[8]'
  - inputs:
    - '-1'
    - '[3,6,9,3,-2,-2]'
    output: '[]'
  - inputs:
    - '8'
    - '[1,-1,8]'
    output: '[1, -1, 8]'
  - inputs:
    - '0'
    - '[3,9]'
    output: '[]'
  - inputs:
    - '2'
    - '[2,6,8,4,0,8]'
    output: '[2, 6]'
  - inputs:
    - '6'
    - '[10,-1,-1,4,6,2]'
    output: '[10, -1, -1, 4, 6, 2]'
  - inputs:
    - '1'
    - '[10,2]'
    output: '[10]'
  - inputs:
    - '3'
    - '[2,8,6,10,10]'
    output: '[2, 8, 6]'
  - inputs:
    - '-2'
    - '[-2,4,-2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[0]'
    output: '[]'
  - inputs:
    - '7'
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '-2'
    - '[3,2]'
    output: '[]'
  - inputs:
    - '1'
    - '[0,8,7,1,6]'
    output: '[0]'
  - inputs:
    - '5'
    - '[5,5]'
    output: '[5, 5]'
  - inputs:
    - '2'
    - '[7,7,7,0,6]'
    output: '[7, 7]'
  - inputs:
    - '8'
    - '[8,6,8,8,8]'
    output: '[8, 6, 8, 8, 8]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[9,4,7]'
    output: '[]'
  - inputs:
    - '3'
    - '[9,7,8,2]'
    output: '[9, 7, 8]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[3,7,2,6]'
    output: '[3, 7, 2, 6]'
  unsorted_examples:
  - inputs:
    - '5'
    - '[5,5]'
    output: '[5, 5]'
  - inputs:
    - '4'
    - '[4,9,3,1,-1]'
    output: '[4, 9, 3, 1]'
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[1,-1,8]'
    output: '[1, -1, 8]'
  - inputs:
    - '7'
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '0'
    - '[9,4,7]'
    output: '[]'
  - inputs:
    - '7'
    - '[3,7,2,6]'
    output: '[3, 7, 2, 6]'
  - inputs:
    - '2'
    - '[7,7,7,0,6]'
    output: '[7, 7]'
  - inputs:
    - '-2'
    - '[3,2]'
    output: '[]'
  - inputs:
    - '1'
    - '[8,10,1,2]'
    output: '[8]'
  - inputs:
    - '0'
    - '[3,9]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[10,-1,-1,4,6,2]'
    output: '[10, -1, -1, 4, 6, 2]'
  - inputs:
    - '3'
    - '[2,8,6,10,10]'
    output: '[2, 8, 6]'
  - inputs:
    - '1'
    - '[0,8,7,1,6]'
    output: '[0]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[-2,4,-2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[0]'
    output: '[]'
  - inputs:
    - '3'
    - '[9,7,8,2]'
    output: '[9, 7, 8]'
  - inputs:
    - '-1'
    - '[3,6,9,3,-2,-2]'
    output: '[]'
  - inputs:
    - '2'
    - '[2,6,8,4,0,8]'
    output: '[2, 6]'
  - inputs:
    - '8'
    - '[8,6,8,8,8]'
    output: '[8, 6, 8, 8, 8]'
  - inputs:
    - '1'
    - '[10,2]'
    output: '[10]'
  control_examples:
  - inputs:
    - '5'
    - '[5,5]'
    output: '[5, 5]'
  - inputs:
    - '4'
    - '[4,9,3,1,-1]'
    output: '[4, 9, 3, 1]'
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[1,-1,8]'
    output: '[1, -1, 8]'
  - inputs:
    - '7'
    - '[-1]'
    output: '[-1]'
  - inputs:
    - '0'
    - '[9,4,7]'
    output: '[]'
  - inputs:
    - '7'
    - '[3,7,2,6]'
    output: '[3, 7, 2, 6]'
  - inputs:
    - '2'
    - '[7,7,7,0,6]'
    output: '[7, 7]'
  - inputs:
    - '-2'
    - '[3,2]'
    output: '[]'
  - inputs:
    - '1'
    - '[8,10,1,2]'
    output: '[8]'
  - inputs:
    - '0'
    - '[3,9]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[10,-1,-1,4,6,2]'
    output: '[10, -1, -1, 4, 6, 2]'
  - inputs:
    - '3'
    - '[2,8,6,10,10]'
    output: '[2, 8, 6]'
  - inputs:
    - '1'
    - '[0,8,7,1,6]'
    output: '[0]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[-2,4,-2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[0]'
    output: '[]'
  - inputs:
    - '2'
    - '[2,6,8,4,0,8]'
    output: '[2, 6]'
  - inputs:
    - '1'
    - '[-1,2]'
    output: '[-1]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> replicate n (head xs)
  sorted_examples:
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[1,7,2,0,-2]'
    output: '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]'
  - inputs:
    - '6'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10]'
  - inputs:
    - '1'
    - '[-1,0,-1,3]'
    output: '[-1]'
  - inputs:
    - '3'
    - '[10,2]'
    output: '[10, 10, 10]'
  - inputs:
    - '8'
    - '[4,0,8]'
    output: '[4, 4, 4, 4, 4, 4, 4, 4]'
  - inputs:
    - '10'
    - '[8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '3'
    - '[7,1,10,1,3,0]'
    output: '[7, 7, 7]'
  - inputs:
    - '0'
    - '[10,-2,1]'
    output: '[]'
  - inputs:
    - '2'
    - '[-1,5,8]'
    output: '[-1, -1]'
  - inputs:
    - '-1'
    - '[-2]'
    output: '[]'
  - inputs:
    - '8'
    - '[7]'
    output: '[7, 7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '9'
    - '[9,0]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9]'
  - inputs:
    - '5'
    - '[4,0,6]'
    output: '[4, 4, 4, 4, 4]'
  - inputs:
    - '4'
    - '[5,4,7,5,-1]'
    output: '[5, 5, 5, 5]'
  - inputs:
    - '9'
    - '[0,4,6,0]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '10'
    - '[5,8,10]'
    output: '[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[-1,2]'
    output: '[-1]'
  - inputs:
    - '7'
    - '[4,-2]'
    output: '[4, 4, 4, 4, 4, 4, 4]'
  - inputs:
    - '2'
    - '[7]'
    output: '[7, 7]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '3'
    - '[1,-2,4]'
    output: '[1, 1, 1]'
  - inputs:
    - '6'
    - '[3,-2,5]'
    output: '[3, 3, 3, 3, 3, 3]'
  - inputs:
    - '-1'
    - '[-1,7]'
    output: '[]'
  - inputs:
    - '-1'
    - '[4,0,8]'
    output: '[]'
  - inputs:
    - '5'
    - '[7,4]'
    output: '[7, 7, 7, 7, 7]'
  - inputs:
    - '9'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3]'
  - inputs:
    - '3'
    - '[7]'
    output: '[7, 7, 7]'
  - inputs:
    - '9'
    - '[5,-1,8]'
    output: '[5, 5, 5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '10'
    - '[9,10]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]'
  - inputs:
    - '9'
    - '[5,1,2,-2,7]'
    output: '[5, 5, 5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '4'
    - '[0,8]'
    output: '[0, 0, 0, 0]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '5'
    - '[10]'
    output: '[10, 10, 10, 10, 10]'
  unsorted_examples:
  - inputs:
    - '7'
    - '[4,-2]'
    output: '[4, 4, 4, 4, 4, 4, 4]'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[9,0]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9]'
  - inputs:
    - '5'
    - '[4,0,6]'
    output: '[4, 4, 4, 4, 4]'
  - inputs:
    - '3'
    - '[7,1,10,1,3,0]'
    output: '[7, 7, 7]'
  - inputs:
    - '-1'
    - '[-1,7]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '5'
    - '[10]'
    output: '[10, 10, 10, 10, 10]'
  - inputs:
    - '9'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3]'
  - inputs:
    - '3'
    - '[10,2]'
    output: '[10, 10, 10]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '10'
    - '[9,10]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]'
  - inputs:
    - '0'
    - '[10,-2,1]'
    output: '[]'
  - inputs:
    - '8'
    - '[4,0,8]'
    output: '[4, 4, 4, 4, 4, 4, 4, 4]'
  - inputs:
    - '6'
    - '[3,-2,5]'
    output: '[3, 3, 3, 3, 3, 3]'
  - inputs:
    - '-1'
    - '[-2]'
    output: '[]'
  - inputs:
    - '3'
    - '[1,-2,4]'
    output: '[1, 1, 1]'
  - inputs:
    - '10'
    - '[5,8,10]'
    output: '[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '1'
    - '[-1,2]'
    output: '[-1]'
  - inputs:
    - '10'
    - '[1,7,2,0,-2]'
    output: '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]'
  - inputs:
    - '5'
    - '[7,4]'
    output: '[7, 7, 7, 7, 7]'
  - inputs:
    - '1'
    - '[-1,0,-1,3]'
    output: '[-1]'
  - inputs:
    - '10'
    - '[8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '9'
    - '[5,-1,8]'
    output: '[5, 5, 5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '4'
    - '[5,4,7,5,-1]'
    output: '[5, 5, 5, 5]'
  - inputs:
    - '8'
    - '[7]'
    output: '[7, 7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '2'
    - '[7]'
    output: '[7, 7]'
  - inputs:
    - '-1'
    - '[4,0,8]'
    output: '[]'
  - inputs:
    - '3'
    - '[7]'
    output: '[7, 7, 7]'
  - inputs:
    - '9'
    - '[0,4,6,0]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '9'
    - '[5,1,2,-2,7]'
    output: '[5, 5, 5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '4'
    - '[0,8]'
    output: '[0, 0, 0, 0]'
  - inputs:
    - '2'
    - '[-1,5,8]'
    output: '[-1, -1]'
  control_examples:
  - inputs:
    - '7'
    - '[4,-2]'
    output: '[4, 4, 4, 4, 4, 4, 4]'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '9'
    - '[9,0]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9]'
  - inputs:
    - '5'
    - '[4,0,6]'
    output: '[4, 4, 4, 4, 4]'
  - inputs:
    - '3'
    - '[7,1,10,1,3,0]'
    output: '[7, 7, 7]'
  - inputs:
    - '-1'
    - '[-1,7]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '5'
    - '[10]'
    output: '[10, 10, 10, 10, 10]'
  - inputs:
    - '9'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3]'
  - inputs:
    - '3'
    - '[10,2]'
    output: '[10, 10, 10]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '10'
    - '[9,10]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9]'
  - inputs:
    - '0'
    - '[10,-2,1]'
    output: '[]'
  - inputs:
    - '8'
    - '[4,0,8]'
    output: '[4, 4, 4, 4, 4, 4, 4, 4]'
  - inputs:
    - '6'
    - '[3,-2,5]'
    output: '[3, 3, 3, 3, 3, 3]'
  - inputs:
    - '-1'
    - '[-2]'
    output: '[]'
  - inputs:
    - '3'
    - '[1,-2,4]'
    output: '[1, 1, 1]'
  - inputs:
    - '10'
    - '[5,8,10]'
    output: '[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '1'
    - '[-1,2]'
    output: '[-1]'
  - inputs:
    - '-1'
    - '[4,0,8]'
    output: '[]'
  - inputs:
    - '8'
    - '[2]'
    output: '[2, 2, 2, 2, 2, 2, 2, 2]'
  - inputs:
    - '3'
    - '[7]'
    output: '[7, 7, 7]'
  - inputs:
    - '1'
    - '[2,9,10,5]'
    output: '[2]'
  - inputs:
    - '2'
    - '[6,-1,5]'
    output: '[6, 6]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> replicate n (last xs)
  sorted_examples:
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '7'
    - '[7,0,6]'
    output: '[6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '-1'
    - '[2,4,-2,8,-1]'
    output: '[]'
  - inputs:
    - '3'
    - '[7,1,10,1,3,0]'
    output: '[0, 0, 0]'
  - inputs:
    - '3'
    - '[-1]'
    output: '[-1, -1, -1]'
  - inputs:
    - '10'
    - '[3,5,0]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '9'
    - '[8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '-1'
    - '[3]'
    output: '[]'
  - inputs:
    - '-1'
    - '[9,5,-1]'
    output: '[]'
  - inputs:
    - '6'
    - '[7,8]'
    output: '[8, 8, 8, 8, 8, 8]'
  - inputs:
    - '2'
    - '[10,1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '1'
    - '[1,3,1,4,-2,9]'
    output: '[9]'
  - inputs:
    - '10'
    - '[6,-1,4,5,5,8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '0'
    - '[6,-2]'
    output: '[]'
  - inputs:
    - '5'
    - '[4,0,6]'
    output: '[6, 6, 6, 6, 6]'
  - inputs:
    - '9'
    - '[9,2,-2]'
    output: '[-2, -2, -2, -2, -2, -2, -2, -2, -2]'
  - inputs:
    - '7'
    - '[6,7]'
    output: '[7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '3'
    - '[-2,10,2,7]'
    output: '[7, 7, 7]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[9,3]'
    output: '[3]'
  - inputs:
    - '0'
    - '[6,8,5,1]'
    output: '[]'
  - inputs:
    - '9'
    - '[6,0]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '2'
    - '[3,2]'
    output: '[2, 2]'
  - inputs:
    - '1'
    - '[1,6,4,5,3]'
    output: '[3]'
  - inputs:
    - '10'
    - '[0,1,4,7]'
    output: '[7, 7, 7, 7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '8'
    - '[1,-1,8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[-1,6]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,8,9]'
    output: '[9]'
  - inputs:
    - '3'
    - '[-1,3,7,-2,0]'
    output: '[0, 0, 0]'
  - inputs:
    - '3'
    - '[8,1,0]'
    output: '[0, 0, 0]'
  - inputs:
    - '8'
    - '[2]'
    output: '[2, 2, 2, 2, 2, 2, 2, 2]'
  - inputs:
    - '2'
    - '[7]'
    output: '[7, 7]'
  unsorted_examples:
  - inputs:
    - '5'
    - '[4,0,6]'
    output: '[6, 6, 6, 6, 6]'
  - inputs:
    - '3'
    - '[7,1,10,1,3,0]'
    output: '[0, 0, 0]'
  - inputs:
    - '8'
    - '[1,-1,8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '9'
    - '[8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '2'
    - '[10,1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,8,9]'
    output: '[9]'
  - inputs:
    - '0'
    - '[6,-2]'
    output: '[]'
  - inputs:
    - '7'
    - '[7,0,6]'
    output: '[6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '9'
    - '[9,2,-2]'
    output: '[-2, -2, -2, -2, -2, -2, -2, -2, -2]'
  - inputs:
    - '10'
    - '[6,-1,4,5,5,8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '10'
    - '[0,1,4,7]'
    output: '[7, 7, 7, 7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '8'
    - '[2]'
    output: '[2, 2, 2, 2, 2, 2, 2, 2]'
  - inputs:
    - '-1'
    - '[9,5,-1]'
    output: '[]'
  - inputs:
    - '3'
    - '[-1]'
    output: '[-1, -1, -1]'
  - inputs:
    - '-1'
    - '[-1,6]'
    output: '[]'
  - inputs:
    - '-1'
    - '[3]'
    output: '[]'
  - inputs:
    - '10'
    - '[3,5,0]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '9'
    - '[6,0]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '1'
    - '[1,3,1,4,-2,9]'
    output: '[9]'
  - inputs:
    - '3'
    - '[-2,10,2,7]'
    output: '[7, 7, 7]'
  - inputs:
    - '1'
    - '[9,3]'
    output: '[3]'
  - inputs:
    - '0'
    - '[6,8,5,1]'
    output: '[]'
  - inputs:
    - '6'
    - '[7,8]'
    output: '[8, 8, 8, 8, 8, 8]'
  - inputs:
    - '2'
    - '[7]'
    output: '[7, 7]'
  - inputs:
    - '3'
    - '[-1,3,7,-2,0]'
    output: '[0, 0, 0]'
  - inputs:
    - '-1'
    - '[2,4,-2,8,-1]'
    output: '[]'
  - inputs:
    - '2'
    - '[3,2]'
    output: '[2, 2]'
  - inputs:
    - '3'
    - '[8,1,0]'
    output: '[0, 0, 0]'
  - inputs:
    - '1'
    - '[1,6,4,5,3]'
    output: '[3]'
  - inputs:
    - '7'
    - '[6,7]'
    output: '[7, 7, 7, 7, 7, 7, 7]'
  control_examples:
  - inputs:
    - '5'
    - '[4,0,6]'
    output: '[6, 6, 6, 6, 6]'
  - inputs:
    - '3'
    - '[7,1,10,1,3,0]'
    output: '[0, 0, 0]'
  - inputs:
    - '8'
    - '[1,-1,8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '9'
    - '[8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '2'
    - '[10,1,-1]'
    output: '[-1, -1]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,8,9]'
    output: '[9]'
  - inputs:
    - '0'
    - '[6,-2]'
    output: '[]'
  - inputs:
    - '7'
    - '[7,0,6]'
    output: '[6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '9'
    - '[9,2,-2]'
    output: '[-2, -2, -2, -2, -2, -2, -2, -2, -2]'
  - inputs:
    - '10'
    - '[6,-1,4,5,5,8]'
    output: '[8, 8, 8, 8, 8, 8, 8, 8, 8, 8]'
  - inputs:
    - '10'
    - '[0,1,4,7]'
    output: '[7, 7, 7, 7, 7, 7, 7, 7, 7, 7]'
  - inputs:
    - '8'
    - '[2]'
    output: '[2, 2, 2, 2, 2, 2, 2, 2]'
  - inputs:
    - '-1'
    - '[9,5,-1]'
    output: '[]'
  - inputs:
    - '3'
    - '[-1]'
    output: '[-1, -1, -1]'
  - inputs:
    - '-1'
    - '[-1,6]'
    output: '[]'
  - inputs:
    - '-1'
    - '[3]'
    output: '[]'
  - inputs:
    - '10'
    - '[3,5,0]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '7'
    - '[5]'
    output: '[5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '9'
    - '[6,0]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '5'
    - '[3,6,-1,3,8,-1]'
    output: '[-1, -1, -1, -1, -1]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> repeat (xs !! n)
  sorted_examples:
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '-1'
    - '[0,7,4,10]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '2'
    - '[10,1,-1]'
    output: '[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, _'
  - inputs:
    - '10'
    - '[-1,9,0,8,2]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '0'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      _'
  - inputs:
    - '1'
    - '[-2]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '7'
    - '[8,7,-2]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '3'
    - '[7,10,2,-2,5,7]'
    output: '[-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, _'
  - inputs:
    - '-1'
    - '[-1,7]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '-1'
    - '[3]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '-1'
    - '[8,7,6]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[9,-1]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      _'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '2'
    - '[7,5]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '2'
    - '[6,7,10,4]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
      10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
      10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, _'
  - inputs:
    - '1'
    - '[10,-2]'
    output: '[-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, _'
  unsorted_examples:
  - inputs:
    - '2'
    - '[10,1,-1]'
    output: '[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, _'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '-1'
    - '[-1,7]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '2'
    - '[7,5]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[8,7,6]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[9,-1]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      _'
  - inputs:
    - '1'
    - '[-2]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '7'
    - '[8,7,-2]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '2'
    - '[6,7,10,4]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
      10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
      10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, _'
  - inputs:
    - '1'
    - '[10,-2]'
    output: '[-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, _'
  - inputs:
    - '0'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      _'
  - inputs:
    - '3'
    - '[7,10,2,-2,5,7]'
    output: '[-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, _'
  - inputs:
    - '-1'
    - '[0,7,4,10]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '10'
    - '[-1,9,0,8,2]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[3]'
    output: 'Prelude.!!: negative index'
  control_examples:
  - inputs:
    - '2'
    - '[10,1,-1]'
    output: '[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, _'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '-1'
    - '[-1,7]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '2'
    - '[7,5]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[8,7,6]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[9,-1]'
    output: '[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
      _'
  - inputs:
    - '1'
    - '[-2]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '7'
    - '[8,7,-2]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '2'
    - '[6,7,10,4]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
      10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
      10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, _'
  - inputs:
    - '1'
    - '[10,-2]'
    output: '[-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
      -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, _'
  - inputs:
    - '0'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
      _'
  - inputs:
    - '-1'
    - '[0,7,4,10]'
    output: 'Prelude.!!: negative index'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> drop n (init xs)
  sorted_examples:
  - inputs:
    - '8'
    - '[9,5,1]'
    output: '[]'
  - inputs:
    - '-2'
    - '[-1,8,1,10,9]'
    output: '[-1, 8, 1, 10]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[7,-2,0,7]'
    output: '[7, -2, 0]'
  - inputs:
    - '0'
    - '[-2,10,10,9,3,3]'
    output: '[-2, 10, 10, 9, 3]'
  - inputs:
    - '6'
    - '[10]'
    output: '[]'
  - inputs:
    - '0'
    - '[9,-1]'
    output: '[9]'
  - inputs:
    - '-1'
    - '[1,0,7]'
    output: '[1, 0]'
  - inputs:
    - '2'
    - '[7,4,6,7,2,5]'
    output: '[6, 7, 2]'
  - inputs:
    - '0'
    - '[8]'
    output: '[]'
  - inputs:
    - '4'
    - '[4,3,3,6,9]'
    output: '[]'
  - inputs:
    - '10'
    - '[6,9]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '5'
    - '[6,10,-2,10]'
    output: '[]'
  - inputs:
    - '3'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '1'
    - '[5,4,6]'
    output: '[4]'
  - inputs:
    - '-1'
    - '[9]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '-1'
    - '[1,0,7]'
    output: '[1, 0]'
  - inputs:
    - '0'
    - '[9,-1]'
    output: '[9]'
  - inputs:
    - '8'
    - '[9,5,1]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '6'
    - '[10]'
    output: '[]'
  - inputs:
    - '3'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[-2,10,10,9,3,3]'
    output: '[-2, 10, 10, 9, 3]'
  - inputs:
    - '-2'
    - '[-1,8,1,10,9]'
    output: '[-1, 8, 1, 10]'
  - inputs:
    - '4'
    - '[4,3,3,6,9]'
    output: '[]'
  - inputs:
    - '0'
    - '[7,-2,0,7]'
    output: '[7, -2, 0]'
  - inputs:
    - '10'
    - '[6,9]'
    output: '[]'
  - inputs:
    - '5'
    - '[6,10,-2,10]'
    output: '[]'
  - inputs:
    - '1'
    - '[5,4,6]'
    output: '[4]'
  - inputs:
    - '2'
    - '[7,4,6,7,2,5]'
    output: '[6, 7, 2]'
  - inputs:
    - '-1'
    - '[9]'
    output: '[]'
  - inputs:
    - '0'
    - '[8]'
    output: '[]'
  control_examples:
  - inputs:
    - '-1'
    - '[1,0,7]'
    output: '[1, 0]'
  - inputs:
    - '0'
    - '[9,-1]'
    output: '[9]'
  - inputs:
    - '8'
    - '[9,5,1]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '6'
    - '[10]'
    output: '[]'
  - inputs:
    - '3'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[-2,10,10,9,3,3]'
    output: '[-2, 10, 10, 9, 3]'
  - inputs:
    - '-2'
    - '[-1,8,1,10,9]'
    output: '[-1, 8, 1, 10]'
  - inputs:
    - '4'
    - '[4,3,3,6,9]'
    output: '[]'
  - inputs:
    - '0'
    - '[7,-2,0,7]'
    output: '[7, -2, 0]'
  - inputs:
    - '10'
    - '[6,9]'
    output: '[]'
  - inputs:
    - '5'
    - '[6,10,-2,10]'
    output: '[]'
  - inputs:
    - '1'
    - '[5,4,6]'
    output: '[4]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> take n (init xs)
  sorted_examples:
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '3'
    - '[6,8,9,4,1,5]'
    output: '[6, 8, 9]'
  - inputs:
    - '4'
    - '[10,4]'
    output: '[10]'
  - inputs:
    - '-1'
    - '[-2,10,7,6,9]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,-2,0,0]'
    output: '[7]'
  - inputs:
    - '0'
    - '[-2]'
    output: '[]'
  - inputs:
    - '9'
    - '[1,5,0]'
    output: '[1, 5]'
  - inputs:
    - '8'
    - '[6,9,-1,6]'
    output: '[6, 9, -1]'
  - inputs:
    - '9'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '10'
    - '[-1,7,0,2,-1]'
    output: '[-1, 7, 0, 2]'
  - inputs:
    - '2'
    - '[5,0,9,1,-2]'
    output: '[5, 0]'
  - inputs:
    - '0'
    - '[-1,7,4,9]'
    output: '[]'
  - inputs:
    - '-1'
    - '[8,1]'
    output: '[]'
  - inputs:
    - '3'
    - '[1,3,2,2,8]'
    output: '[1, 3, 2]'
  - inputs:
    - '-2'
    - '[3,9,1,-1]'
    output: '[]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[1,10,8,3,1,6]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,8,9]'
    output: '[7]'
  unsorted_examples:
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[1,5,0]'
    output: '[1, 5]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,8,9]'
    output: '[7]'
  - inputs:
    - '9'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '4'
    - '[10,4]'
    output: '[10]'
  - inputs:
    - '-1'
    - '[1,10,8,3,1,6]'
    output: '[]'
  - inputs:
    - '3'
    - '[6,8,9,4,1,5]'
    output: '[6, 8, 9]'
  - inputs:
    - '-1'
    - '[8,1]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[-2,10,7,6,9]'
    output: '[]'
  - inputs:
    - '8'
    - '[6,9,-1,6]'
    output: '[6, 9, -1]'
  - inputs:
    - '0'
    - '[-2]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,-2,0,0]'
    output: '[7]'
  - inputs:
    - '0'
    - '[-1,7,4,9]'
    output: '[]'
  - inputs:
    - '10'
    - '[-1,7,0,2,-1]'
    output: '[-1, 7, 0, 2]'
  - inputs:
    - '-2'
    - '[3,9,1,-1]'
    output: '[]'
  - inputs:
    - '2'
    - '[5,0,9,1,-2]'
    output: '[5, 0]'
  - inputs:
    - '3'
    - '[1,3,2,2,8]'
    output: '[1, 3, 2]'
  control_examples:
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[1,5,0]'
    output: '[1, 5]'
  - inputs:
    - '1'
    - '[-2]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,8,9]'
    output: '[7]'
  - inputs:
    - '9'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '4'
    - '[10,4]'
    output: '[10]'
  - inputs:
    - '-1'
    - '[1,10,8,3,1,6]'
    output: '[]'
  - inputs:
    - '3'
    - '[6,8,9,4,1,5]'
    output: '[6, 8, 9]'
  - inputs:
    - '-1'
    - '[8,1]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[-2,10,7,6,9]'
    output: '[]'
  - inputs:
    - '0'
    - '[-1,9,1]'
    output: '[]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> drop n (reverse xs)
  sorted_examples:
  - inputs:
    - '4'
    - '[10,4]'
    output: '[]'
  - inputs:
    - '-1'
    - '[3,2,1,-1]'
    output: '[-1, 1, 2, 3]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[1,3,4,3,8,6]'
    output: '[]'
  - inputs:
    - '-1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '3'
    - '[3,3,-2,10,3]'
    output: '[3, 3]'
  - inputs:
    - '1'
    - '[5,8,5,2,7]'
    output: '[2, 5, 8, 5]'
  - inputs:
    - '0'
    - '[9,4,7]'
    output: '[7, 4, 9]'
  - inputs:
    - '0'
    - '[6,-2]'
    output: '[-2, 6]'
  - inputs:
    - '2'
    - '[8,-2,-1]'
    output: '[8]'
  - inputs:
    - '9'
    - '[7,0,4,9]'
    output: '[]'
  - inputs:
    - '0'
    - '[6]'
    output: '[6]'
  - inputs:
    - '3'
    - '[7,7,1,1]'
    output: '[7]'
  - inputs:
    - '10'
    - '[5]'
    output: '[]'
  - inputs:
    - '-2'
    - '[3,0]'
    output: '[0, 3]'
  - inputs:
    - '1'
    - '[6,1]'
    output: '[6]'
  - inputs:
    - '2'
    - '[4,5,-2,10]'
    output: '[5, 4]'
  - inputs:
    - '7'
    - '[8,7,-2]'
    output: '[]'
  - inputs:
    - '0'
    - '[9,8,8,7]'
    output: '[7, 8, 8, 9]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '4'
    - '[10,4]'
    output: '[]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[8,7,-2]'
    output: '[]'
  - inputs:
    - '0'
    - '[6,-2]'
    output: '[-2, 6]'
  - inputs:
    - '0'
    - '[9,4,7]'
    output: '[7, 4, 9]'
  - inputs:
    - '10'
    - '[5]'
    output: '[]'
  - inputs:
    - '3'
    - '[7,7,1,1]'
    output: '[7]'
  - inputs:
    - '1'
    - '[6,1]'
    output: '[6]'
  - inputs:
    - '-1'
    - '[3,2,1,-1]'
    output: '[-1, 1, 2, 3]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[6]'
    output: '[6]'
  - inputs:
    - '3'
    - '[3,3,-2,10,3]'
    output: '[3, 3]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[7,0,4,9]'
    output: '[]'
  - inputs:
    - '1'
    - '[5,8,5,2,7]'
    output: '[2, 5, 8, 5]'
  - inputs:
    - '-1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '7'
    - '[1,3,4,3,8,6]'
    output: '[]'
  - inputs:
    - '-2'
    - '[3,0]'
    output: '[0, 3]'
  - inputs:
    - '0'
    - '[9,8,8,7]'
    output: '[7, 8, 8, 9]'
  - inputs:
    - '2'
    - '[4,5,-2,10]'
    output: '[5, 4]'
  - inputs:
    - '2'
    - '[8,-2,-1]'
    output: '[8]'
  control_examples:
  - inputs:
    - '4'
    - '[10,4]'
    output: '[]'
  - inputs:
    - '1'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[8,7,-2]'
    output: '[]'
  - inputs:
    - '0'
    - '[6,-2]'
    output: '[-2, 6]'
  - inputs:
    - '0'
    - '[9,4,7]'
    output: '[7, 4, 9]'
  - inputs:
    - '10'
    - '[5]'
    output: '[]'
  - inputs:
    - '3'
    - '[7,7,1,1]'
    output: '[7]'
  - inputs:
    - '1'
    - '[6,1]'
    output: '[6]'
  - inputs:
    - '-1'
    - '[3,2,1,-1]'
    output: '[-1, 1, 2, 3]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[6]'
    output: '[6]'
  - inputs:
    - '3'
    - '[3,3,-2,10,3]'
    output: '[3, 3]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[7,0,4,9]'
    output: '[]'
  - inputs:
    - '1'
    - '[5,8,5,2,7]'
    output: '[2, 5, 8, 5]'
  - inputs:
    - '-1'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '7'
    - '[1,3,4,3,8,6]'
    output: '[]'
  - inputs:
    - '2'
    - '[4,5,-2,10]'
    output: '[5, 4]'
  - inputs:
    - '1'
    - '[7,3,4]'
    output: '[3, 7]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> take n (reverse xs)
  sorted_examples:
  - inputs:
    - '-1'
    - '[3,2,1,-1]'
    output: '[]'
  - inputs:
    - '5'
    - '[2,3,3,8,7,1]'
    output: '[1, 7, 8, 3, 3]'
  - inputs:
    - '8'
    - '[2,8,2]'
    output: '[2, 8, 2]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '2'
    - '[7,7,7,0,6]'
    output: '[6, 0]'
  - inputs:
    - '0'
    - '[9]'
    output: '[]'
  - inputs:
    - '1'
    - '[4,0]'
    output: '[0]'
  - inputs:
    - '3'
    - '[7,7,6,6,-1,4]'
    output: '[4, -1, 6]'
  - inputs:
    - '0'
    - '[0,2,-1,5,3]'
    output: '[]'
  - inputs:
    - '0'
    - '[3,-1,3]'
    output: '[]'
  - inputs:
    - '7'
    - '[3,7,2,6]'
    output: '[6, 2, 7, 3]'
  - inputs:
    - '-1'
    - '[6,3]'
    output: '[]'
  - inputs:
    - '5'
    - '[4,-1,3,1,-1]'
    output: '[-1, 1, 3, -1, 4]'
  - inputs:
    - '2'
    - '[]'
    output: diverge
  - inputs:
    - '1'
    - '[3,5,1,2]'
    output: '[2]'
  - inputs:
    - '1'
    - '[8,10,8]'
    output: '[8]'
  - inputs:
    - '2'
    - '[10,3,2]'
    output: '[2, 3]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[4,6,0]'
    output: '[]'
  - inputs:
    - '2'
    - '[-1,0,10,10]'
    output: '[10, 10]'
  - inputs:
    - '4'
    - '[7,-1]'
    output: '[-1, 7]'
  - inputs:
    - '7'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[-2,9,3,3,2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[8]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '8'
    - '[2,8,2]'
    output: '[2, 8, 2]'
  - inputs:
    - '-1'
    - '[3,2,1,-1]'
    output: '[]'
  - inputs:
    - '2'
    - '[10,3,2]'
    output: '[2, 3]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[3,7,2,6]'
    output: '[6, 2, 7, 3]'
  - inputs:
    - '2'
    - '[7,7,7,0,6]'
    output: '[6, 0]'
  - inputs:
    - '7'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '-1'
    - '[4,6,0]'
    output: '[]'
  - inputs:
    - '4'
    - '[7,-1]'
    output: '[-1, 7]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[9]'
    output: '[]'
  - inputs:
    - '-1'
    - '[6,3]'
    output: '[]'
  - inputs:
    - '1'
    - '[4,0]'
    output: '[0]'
  - inputs:
    - '0'
    - '[3,-1,3]'
    output: '[]'
  - inputs:
    - '5'
    - '[2,3,3,8,7,1]'
    output: '[1, 7, 8, 3, 3]'
  - inputs:
    - '-2'
    - '[-2,9,3,3,2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[8]'
    output: '[]'
  - inputs:
    - '1'
    - '[3,5,1,2]'
    output: '[2]'
  - inputs:
    - '1'
    - '[8,10,8]'
    output: '[8]'
  - inputs:
    - '3'
    - '[7,7,6,6,-1,4]'
    output: '[4, -1, 6]'
  - inputs:
    - '2'
    - '[]'
    output: diverge
  - inputs:
    - '0'
    - '[0,2,-1,5,3]'
    output: '[]'
  - inputs:
    - '5'
    - '[4,-1,3,1,-1]'
    output: '[-1, 1, 3, -1, 4]'
  - inputs:
    - '2'
    - '[-1,0,10,10]'
    output: '[10, 10]'
  control_examples:
  - inputs:
    - '8'
    - '[2,8,2]'
    output: '[2, 8, 2]'
  - inputs:
    - '-1'
    - '[3,2,1,-1]'
    output: '[]'
  - inputs:
    - '2'
    - '[10,3,2]'
    output: '[2, 3]'
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[3,7,2,6]'
    output: '[6, 2, 7, 3]'
  - inputs:
    - '2'
    - '[7,7,7,0,6]'
    output: '[6, 0]'
  - inputs:
    - '7'
    - '[-2]'
    output: '[-2]'
  - inputs:
    - '-1'
    - '[4,6,0]'
    output: '[]'
  - inputs:
    - '4'
    - '[7,-1]'
    output: '[-1, 7]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[9]'
    output: '[]'
  - inputs:
    - '-1'
    - '[6,3]'
    output: '[]'
  - inputs:
    - '1'
    - '[4,0]'
    output: '[0]'
  - inputs:
    - '0'
    - '[3,-1,3]'
    output: '[]'
  - inputs:
    - '5'
    - '[2,3,3,8,7,1]'
    output: '[1, 7, 8, 3, 3]'
  - inputs:
    - '-2'
    - '[6]'
    output: '[]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> drop n (tail xs)
  sorted_examples:
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-1'
    - '[1,10,8,3,1,6]'
    output: '[10, 8, 3, 1, 6]'
  - inputs:
    - '-1'
    - '[4,6,0]'
    output: '[6, 0]'
  - inputs:
    - '4'
    - '[6,0,2,3,10,3]'
    output: '[3]'
  - inputs:
    - '2'
    - '[-2,8]'
    output: '[]'
  - inputs:
    - '1'
    - '[2,10,6]'
    output: '[6]'
  - inputs:
    - '-2'
    - '[3,2]'
    output: '[2]'
  - inputs:
    - '0'
    - '[7,3,-1,8,-1]'
    output: '[3, -1, 8, -1]'
  - inputs:
    - '5'
    - '[4,7,5,9,7]'
    output: '[]'
  - inputs:
    - '2'
    - '[5,9,3,2]'
    output: '[2]'
  - inputs:
    - '0'
    - '[-2,10,10,9,3,3]'
    output: '[10, 10, 9, 3, 3]'
  - inputs:
    - '-2'
    - '[-1,8,1,10,9]'
    output: '[8, 1, 10, 9]'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '5'
    - '[5,9,-1]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '6'
    - '[3]'
    output: '[]'
  - inputs:
    - '9'
    - '[-2,-2,6,10]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '-1'
    - '[4,6,0]'
    output: '[6, 0]'
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-1'
    - '[1,10,8,3,1,6]'
    output: '[10, 8, 3, 1, 6]'
  - inputs:
    - '0'
    - '[-2,10,10,9,3,3]'
    output: '[10, 10, 9, 3, 3]'
  - inputs:
    - '-2'
    - '[-1,8,1,10,9]'
    output: '[8, 1, 10, 9]'
  - inputs:
    - '5'
    - '[5,9,-1]'
    output: '[]'
  - inputs:
    - '2'
    - '[-2,8]'
    output: '[]'
  - inputs:
    - '-2'
    - '[3,2]'
    output: '[2]'
  - inputs:
    - '6'
    - '[3]'
    output: '[]'
  - inputs:
    - '9'
    - '[-2,-2,6,10]'
    output: '[]'
  - inputs:
    - '1'
    - '[2,10,6]'
    output: '[6]'
  - inputs:
    - '0'
    - '[7,3,-1,8,-1]'
    output: '[3, -1, 8, -1]'
  - inputs:
    - '5'
    - '[4,7,5,9,7]'
    output: '[]'
  - inputs:
    - '2'
    - '[5,9,3,2]'
    output: '[2]'
  - inputs:
    - '4'
    - '[6,0,2,3,10,3]'
    output: '[3]'
  control_examples:
  - inputs:
    - '-1'
    - '[4,6,0]'
    output: '[6, 0]'
  - inputs:
    - '10'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-1'
    - '[1,10,8,3,1,6]'
    output: '[10, 8, 3, 1, 6]'
  - inputs:
    - '0'
    - '[-2,10,10,9,3,3]'
    output: '[10, 10, 9, 3, 3]'
  - inputs:
    - '-2'
    - '[-1,8,1,10,9]'
    output: '[8, 1, 10, 9]'
  - inputs:
    - '5'
    - '[5,9,-1]'
    output: '[]'
  - inputs:
    - '2'
    - '[-2,8]'
    output: '[]'
  - inputs:
    - '-2'
    - '[3,2]'
    output: '[2]'
  - inputs:
    - '6'
    - '[3]'
    output: '[]'
  - inputs:
    - '9'
    - '[-2,-2,6,10]'
    output: '[]'
  - inputs:
    - '1'
    - '[2,10,6]'
    output: '[6]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> take n (tail xs)
  sorted_examples:
  - inputs:
    - '-2'
    - '[6,7,0,6,3]'
    output: '[]'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '4'
    - '[4,3,3,6,9]'
    output: '[3, 3, 6, 9]'
  - inputs:
    - '1'
    - '[6,8,0]'
    output: '[8]'
  - inputs:
    - '1'
    - '[2,10,4,8,-2,9]'
    output: '[10]'
  - inputs:
    - '0'
    - '[6]'
    output: '[]'
  - inputs:
    - '3'
    - '[6,8,9,4,1,5]'
    output: '[8, 9, 4]'
  - inputs:
    - '2'
    - '[5,-1,4,8]'
    output: '[-1, 4]'
  - inputs:
    - '0'
    - '[7,-2,0,7]'
    output: '[]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[6,-1,4,5,5,8]'
    output: '[-1, 4, 5, 5, 8]'
  - inputs:
    - '1'
    - '[-2,4,4,2]'
    output: '[4]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[6,3,-2]'
    output: '[]'
  - inputs:
    - '0'
    - '[1,9]'
    output: '[]'
  - inputs:
    - '3'
    - '[3,6,1,-1,2]'
    output: '[6, 1, -1]'
  - inputs:
    - '10'
    - '[0,1,4,7]'
    output: '[1, 4, 7]'
  - inputs:
    - '-2'
    - '[8,4,0,-1]'
    output: '[]'
  - inputs:
    - '7'
    - '[4]'
    output: '[]'
  - inputs:
    - '10'
    - '[9,5,-1]'
    output: '[5, -1]'
  - inputs:
    - '-2'
    - '[2]'
    output: '[]'
  - inputs:
    - '4'
    - '[7,-1]'
    output: '[-1]'
  unsorted_examples:
  - inputs:
    - '-2'
    - '[6,7,0,6,3]'
    output: '[]'
  - inputs:
    - '10'
    - '[9,5,-1]'
    output: '[5, -1]'
  - inputs:
    - '4'
    - '[7,-1]'
    output: '[-1]'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[6]'
    output: '[]'
  - inputs:
    - '3'
    - '[6,8,9,4,1,5]'
    output: '[8, 9, 4]'
  - inputs:
    - '4'
    - '[4,3,3,6,9]'
    output: '[3, 3, 6, 9]'
  - inputs:
    - '0'
    - '[7,-2,0,7]'
    output: '[]'
  - inputs:
    - '7'
    - '[4]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[6,-1,4,5,5,8]'
    output: '[-1, 4, 5, 5, 8]'
  - inputs:
    - '10'
    - '[0,1,4,7]'
    output: '[1, 4, 7]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[-2,4,4,2]'
    output: '[4]'
  - inputs:
    - '2'
    - '[5,-1,4,8]'
    output: '[-1, 4]'
  - inputs:
    - '-2'
    - '[6,3,-2]'
    output: '[]'
  - inputs:
    - '1'
    - '[2,10,4,8,-2,9]'
    output: '[10]'
  - inputs:
    - '0'
    - '[1,9]'
    output: '[]'
  - inputs:
    - '-2'
    - '[2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[8,4,0,-1]'
    output: '[]'
  - inputs:
    - '3'
    - '[3,6,1,-1,2]'
    output: '[6, 1, -1]'
  - inputs:
    - '1'
    - '[6,8,0]'
    output: '[8]'
  control_examples:
  - inputs:
    - '-2'
    - '[6,7,0,6,3]'
    output: '[]'
  - inputs:
    - '10'
    - '[9,5,-1]'
    output: '[5, -1]'
  - inputs:
    - '4'
    - '[7,-1]'
    output: '[-1]'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[6]'
    output: '[]'
  - inputs:
    - '3'
    - '[6,8,9,4,1,5]'
    output: '[8, 9, 4]'
  - inputs:
    - '4'
    - '[4,3,3,6,9]'
    output: '[3, 3, 6, 9]'
  - inputs:
    - '0'
    - '[7,-2,0,7]'
    output: '[]'
  - inputs:
    - '7'
    - '[4]'
    output: '[]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[6,-1,4,5,5,8]'
    output: '[-1, 4, 5, 5, 8]'
  - inputs:
    - '10'
    - '[0,1,4,7]'
    output: '[1, 4, 7]'
  - inputs:
    - '-2'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[-2,4,4,2]'
    output: '[4]'
  - inputs:
    - '-1'
    - '[-2,8]'
    output: '[]'
  - inputs:
    - '1'
    - '[6,8,0]'
    output: '[8]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> init (drop n xs)
  sorted_examples:
  - inputs:
    - '2'
    - '[10,3,8]'
    output: '[]'
  - inputs:
    - '0'
    - '[1,3,0,3,4]'
    output: '[1, 3, 0, 3]'
  - inputs:
    - '7'
    - '[2,5,7,-2,8,7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[5,2,8,-1,9,1]'
    output: '[5, 2, 8, -1, 9]'
  - inputs:
    - '2'
    - '[0,10,6,-1,-1]'
    output: '[6, -1]'
  - inputs:
    - '-2'
    - '[4,2]'
    output: '[4]'
  - inputs:
    - '-2'
    - '[4,6,-2,6]'
    output: '[4, 6, -2]'
  - inputs:
    - '6'
    - '[3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-2'
    - '[5,9,7]'
    output: '[5, 9]'
  - inputs:
    - '9'
    - '[-2,-2,6,10]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[0]'
    output: '[]'
  - inputs:
    - '2'
    - '[6,7,10,4]'
    output: '[10]'
  - inputs:
    - '1'
    - '[7,10]'
    output: '[]'
  - inputs:
    - '3'
    - '[8,-1,2,8]'
    output: '[]'
  - inputs:
    - '6'
    - '[3,9]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[4,5]'
    output: '[4]'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '9'
    - '[-1,2,7,6,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '5'
    - '[4,7,7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.init: empty list'
  unsorted_examples:
  - inputs:
    - '2'
    - '[10,3,8]'
    output: '[]'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '6'
    - '[3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '9'
    - '[-2,-2,6,10]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '1'
    - '[7,10]'
    output: '[]'
  - inputs:
    - '6'
    - '[3,9]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[6,7,10,4]'
    output: '[10]'
  - inputs:
    - '0'
    - '[0]'
    output: '[]'
  - inputs:
    - '-2'
    - '[4,6,-2,6]'
    output: '[4, 6, -2]'
  - inputs:
    - '0'
    - '[1,3,0,3,4]'
    output: '[1, 3, 0, 3]'
  - inputs:
    - '7'
    - '[2,5,7,-2,8,7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '5'
    - '[4,7,7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[0,10,6,-1,-1]'
    output: '[6, -1]'
  - inputs:
    - '-1'
    - '[5,2,8,-1,9,1]'
    output: '[5, 2, 8, -1, 9]'
  - inputs:
    - '3'
    - '[8,-1,2,8]'
    output: '[]'
  - inputs:
    - '9'
    - '[-1,2,7,6,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[4,5]'
    output: '[4]'
  - inputs:
    - '-2'
    - '[5,9,7]'
    output: '[5, 9]'
  - inputs:
    - '-2'
    - '[4,2]'
    output: '[4]'
  control_examples:
  - inputs:
    - '2'
    - '[10,3,8]'
    output: '[]'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '6'
    - '[3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '9'
    - '[-2,-2,6,10]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '6'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '1'
    - '[7,10]'
    output: '[]'
  - inputs:
    - '6'
    - '[3,9]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[6,7,10,4]'
    output: '[10]'
  - inputs:
    - '0'
    - '[0]'
    output: '[]'
  - inputs:
    - '-2'
    - '[4,6,-2,6]'
    output: '[4, 6, -2]'
  - inputs:
    - '0'
    - '[1,3,0,3,4]'
    output: '[1, 3, 0, 3]'
  - inputs:
    - '7'
    - '[2,5,7,-2,8,7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '5'
    - '[4,7,7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[0,10,6,-1,-1]'
    output: '[6, -1]'
  - inputs:
    - '-1'
    - '[5,2,8,-1,9,1]'
    output: '[5, 2, 8, -1, 9]'
  - inputs:
    - '3'
    - '[8,-1,2,8]'
    output: '[]'
  - inputs:
    - '9'
    - '[-1,2,7,6,4]'
    output: 'Prelude.init: empty list'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> reverse (drop n xs)
  sorted_examples:
  - inputs:
    - '8'
    - '[2,8]'
    output: '[]'
  - inputs:
    - '0'
    - '[7,-2,-2,-1,2]'
    output: '[2, -1, -2, -2, 7]'
  - inputs:
    - '-1'
    - '[10,-2,-1]'
    output: '[-1, -2, 10]'
  - inputs:
    - '3'
    - '[-1,3,1,4,6,-2]'
    output: '[-2, 6, 4]'
  - inputs:
    - '-1'
    - '[8,8,3,9,1,9]'
    output: '[9, 1, 9, 3, 8, 8]'
  - inputs:
    - '3'
    - '[3,5,3,0]'
    output: '[0]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[9]'
    output: '[9]'
  - inputs:
    - '9'
    - '[5,8,8,1,-1,4]'
    output: '[]'
  - inputs:
    - '-1'
    - '[4,1,6,7]'
    output: '[7, 6, 1, 4]'
  - inputs:
    - '-2'
    - '[5,3]'
    output: '[3, 5]'
  - inputs:
    - '3'
    - '[3,3,-2,10,3]'
    output: '[3, 10]'
  - inputs:
    - '1'
    - '[8,10,1,2]'
    output: '[2, 1, 10]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[-2,6]'
    output: '[6, -2]'
  - inputs:
    - '8'
    - '[9,-1,4,1]'
    output: '[]'
  - inputs:
    - '4'
    - '[3,7,4,0,6]'
    output: '[6]'
  - inputs:
    - '2'
    - '[6,10,6,0,1]'
    output: '[1, 0, 6]'
  - inputs:
    - '2'
    - '[9,5,0]'
    output: '[0]'
  - inputs:
    - '8'
    - '[]'
    output: '[]'
  - inputs:
    - '4'
    - '[9,-2,10]'
    output: '[]'
  - inputs:
    - '4'
    - '[-1]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '8'
    - '[2,8]'
    output: '[]'
  - inputs:
    - '8'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[5,3]'
    output: '[3, 5]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[9]'
    output: '[9]'
  - inputs:
    - '4'
    - '[-1]'
    output: '[]'
  - inputs:
    - '3'
    - '[3,5,3,0]'
    output: '[0]'
  - inputs:
    - '3'
    - '[3,3,-2,10,3]'
    output: '[3, 10]'
  - inputs:
    - '2'
    - '[9,5,0]'
    output: '[0]'
  - inputs:
    - '1'
    - '[8,10,1,2]'
    output: '[2, 1, 10]'
  - inputs:
    - '4'
    - '[3,7,4,0,6]'
    output: '[6]'
  - inputs:
    - '-1'
    - '[10,-2,-1]'
    output: '[-1, -2, 10]'
  - inputs:
    - '0'
    - '[-2,6]'
    output: '[6, -2]'
  - inputs:
    - '4'
    - '[9,-2,10]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[8,8,3,9,1,9]'
    output: '[9, 1, 9, 3, 8, 8]'
  - inputs:
    - '2'
    - '[6,10,6,0,1]'
    output: '[1, 0, 6]'
  - inputs:
    - '9'
    - '[5,8,8,1,-1,4]'
    output: '[]'
  - inputs:
    - '-1'
    - '[4,1,6,7]'
    output: '[7, 6, 1, 4]'
  - inputs:
    - '0'
    - '[7,-2,-2,-1,2]'
    output: '[2, -1, -2, -2, 7]'
  - inputs:
    - '3'
    - '[-1,3,1,4,6,-2]'
    output: '[-2, 6, 4]'
  - inputs:
    - '8'
    - '[9,-1,4,1]'
    output: '[]'
  control_examples:
  - inputs:
    - '8'
    - '[2,8]'
    output: '[]'
  - inputs:
    - '8'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[5,3]'
    output: '[3, 5]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[9]'
    output: '[9]'
  - inputs:
    - '4'
    - '[-1]'
    output: '[]'
  - inputs:
    - '3'
    - '[3,5,3,0]'
    output: '[0]'
  - inputs:
    - '3'
    - '[3,3,-2,10,3]'
    output: '[3, 10]'
  - inputs:
    - '2'
    - '[9,5,0]'
    output: '[0]'
  - inputs:
    - '1'
    - '[8,10,1,2]'
    output: '[2, 1, 10]'
  - inputs:
    - '4'
    - '[3,7,4,0,6]'
    output: '[6]'
  - inputs:
    - '-1'
    - '[10,-2,-1]'
    output: '[-1, -2, 10]'
  - inputs:
    - '0'
    - '[-2,6]'
    output: '[6, -2]'
  - inputs:
    - '4'
    - '[9,-2,10]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[2,2,2,10]'
    output: '[10, 2, 2, 2]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> tail (drop n xs)
  sorted_examples:
  - inputs:
    - '1'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[2,1,1,9,3]'
    output: '[1, 1, 9, 3]'
  - inputs:
    - '5'
    - '[8,4,-2,1,4,7]'
    output: '[]'
  - inputs:
    - '0'
    - '[1,-2]'
    output: '[-2]'
  - inputs:
    - '6'
    - '[5,7,10,10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[5,1,-1]'
    output: '[1, -1]'
  - inputs:
    - '2'
    - '[10,5,6]'
    output: '[]'
  - inputs:
    - '-2'
    - '[8]'
    output: '[]'
  - inputs:
    - '5'
    - '[3,2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[4,6,-2,6]'
    output: '[6, -2, 6]'
  - inputs:
    - '2'
    - '[8,8,9,2]'
    output: '[2]'
  - inputs:
    - '3'
    - '[9,6,7,3,2,2]'
    output: '[2, 2]'
  - inputs:
    - '1'
    - '[2,9,8]'
    output: '[8]'
  - inputs:
    - '1'
    - '[4,9]'
    output: '[]'
  - inputs:
    - '-1'
    - '[5,4]'
    output: '[4]'
  - inputs:
    - '9'
    - '[4,1,-1,1,5,6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[1,3,0,3,4]'
    output: '[3, 0, 3, 4]'
  - inputs:
    - '0'
    - '[10,-2,1]'
    output: '[-2, 1]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '6'
    - '[1,0,2,0,10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[3]'
    output: '[]'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '7'
    - '[9,3,5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '8'
    - '[2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '4'
    - '[-1,-2,-2,3,10]'
    output: '[]'
  unsorted_examples:
  - inputs:
    - '1'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[4,6,-2,6]'
    output: '[6, -2, 6]'
  - inputs:
    - '0'
    - '[1,3,0,3,4]'
    output: '[3, 0, 3, 4]'
  - inputs:
    - '7'
    - '[9,3,5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '5'
    - '[3,2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[2,1,1,9,3]'
    output: '[1, 1, 9, 3]'
  - inputs:
    - '-1'
    - '[5,4]'
    output: '[4]'
  - inputs:
    - '0'
    - '[3]'
    output: '[]'
  - inputs:
    - '0'
    - '[10,-2,1]'
    output: '[-2, 1]'
  - inputs:
    - '8'
    - '[2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[8]'
    output: '[]'
  - inputs:
    - '6'
    - '[5,7,10,10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[1,-2]'
    output: '[-2]'
  - inputs:
    - '3'
    - '[9,6,7,3,2,2]'
    output: '[2, 2]'
  - inputs:
    - '2'
    - '[8,8,9,2]'
    output: '[2]'
  - inputs:
    - '4'
    - '[-1,-2,-2,3,10]'
    output: '[]'
  - inputs:
    - '9'
    - '[4,1,-1,1,5,6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[5,1,-1]'
    output: '[1, -1]'
  - inputs:
    - '1'
    - '[4,9]'
    output: '[]'
  - inputs:
    - '1'
    - '[2,9,8]'
    output: '[8]'
  - inputs:
    - '6'
    - '[1,0,2,0,10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '2'
    - '[10,5,6]'
    output: '[]'
  - inputs:
    - '5'
    - '[8,4,-2,1,4,7]'
    output: '[]'
  control_examples:
  - inputs:
    - '1'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[4,6,-2,6]'
    output: '[6, -2, 6]'
  - inputs:
    - '0'
    - '[1,3,0,3,4]'
    output: '[3, 0, 3, 4]'
  - inputs:
    - '7'
    - '[9,3,5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '5'
    - '[3,2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[2,1,1,9,3]'
    output: '[1, 1, 9, 3]'
  - inputs:
    - '-1'
    - '[5,4]'
    output: '[4]'
  - inputs:
    - '0'
    - '[3]'
    output: '[]'
  - inputs:
    - '0'
    - '[10,-2,1]'
    output: '[-2, 1]'
  - inputs:
    - '8'
    - '[2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[8]'
    output: '[]'
  - inputs:
    - '6'
    - '[5,7,10,10]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[1,-2]'
    output: '[-2]'
  - inputs:
    - '3'
    - '[9,6,7,3,2,2]'
    output: '[2, 2]'
  - inputs:
    - '2'
    - '[8,8,9,2]'
    output: '[2]'
  - inputs:
    - '1'
    - '[10,8,-1]'
    output: '[-1]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> init (take n xs)
  sorted_examples:
  - inputs:
    - '8'
    - '[2]'
    output: '[]'
  - inputs:
    - '5'
    - '[6,10,-2,10]'
    output: '[6, 10, -2]'
  - inputs:
    - '2'
    - '[8,7,4,-2,0,4]'
    output: '[8]'
  - inputs:
    - '-2'
    - '[2,8,3,8,6]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[10,1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '7'
    - '[2,5,7,-2,8,7]'
    output: '[2, 5, 7, -2, 8]'
  - inputs:
    - '1'
    - '[-2,4,4,2]'
    output: '[]'
  - inputs:
    - '2'
    - '[10,3,2]'
    output: '[10]'
  - inputs:
    - '0'
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[9,5,-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[7,5,-2,-2,8]'
    output: '[7]'
  - inputs:
    - '1'
    - '[-2,7]'
    output: '[]'
  - inputs:
    - '-1'
    - '[6,3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '4'
    - '[3,-2]'
    output: '[3]'
  - inputs:
    - '-2'
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '1'
    - '[8,0,4]'
    output: '[]'
  - inputs:
    - '5'
    - '[4,7,7]'
    output: '[4, 7]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  unsorted_examples:
  - inputs:
    - '8'
    - '[2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[10,1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '7'
    - '[2,5,7,-2,8,7]'
    output: '[2, 5, 7, -2, 8]'
  - inputs:
    - '5'
    - '[4,7,7]'
    output: '[4, 7]'
  - inputs:
    - '4'
    - '[3,-2]'
    output: '[3]'
  - inputs:
    - '1'
    - '[-2,4,4,2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[2,8,3,8,6]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[6,3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '5'
    - '[6,10,-2,10]'
    output: '[6, 10, -2]'
  - inputs:
    - '-1'
    - '[9,5,-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '1'
    - '[8,0,4]'
    output: '[]'
  - inputs:
    - '2'
    - '[7,5,-2,-2,8]'
    output: '[7]'
  - inputs:
    - '2'
    - '[8,7,4,-2,0,4]'
    output: '[8]'
  - inputs:
    - '1'
    - '[-2,7]'
    output: '[]'
  - inputs:
    - '2'
    - '[10,3,2]'
    output: '[10]'
  control_examples:
  - inputs:
    - '8'
    - '[2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[8]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[10,1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '7'
    - '[2,5,7,-2,8,7]'
    output: '[2, 5, 7, -2, 8]'
  - inputs:
    - '5'
    - '[4,7,7]'
    output: '[4, 7]'
  - inputs:
    - '4'
    - '[3,-2]'
    output: '[3]'
  - inputs:
    - '1'
    - '[-2,4,4,2]'
    output: '[]'
  - inputs:
    - '-2'
    - '[2,8,3,8,6]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[6,3]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '5'
    - '[6,10,-2,10]'
    output: '[6, 10, -2]'
  - inputs:
    - '-1'
    - '[9,5,-1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '0'
    - '[2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '1'
    - '[8,0,4]'
    output: '[]'
  - inputs:
    - '3'
    - '[9,1,8,8,5]'
    output: '[9, 1]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> reverse (take n xs)
  sorted_examples:
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[10,-1,-1,4,6,2]'
    output: '[2, 6, 4, -1, -1, 10]'
  - inputs:
    - '0'
    - '[-2,2,0,4,8]'
    output: '[]'
  - inputs:
    - '3'
    - '[-1,-2,9,7]'
    output: '[9, -2, -1]'
  - inputs:
    - '1'
    - '[7,-2,3]'
    output: '[7]'
  - inputs:
    - '-2'
    - '[3,3]'
    output: '[]'
  - inputs:
    - '7'
    - '[3,9,8,8,0]'
    output: '[0, 8, 8, 9, 3]'
  - inputs:
    - '0'
    - '[6]'
    output: '[]'
  - inputs:
    - '0'
    - '[7,-1,-1]'
    output: '[]'
  - inputs:
    - '4'
    - '[9,2,3,2,5,-1]'
    output: '[2, 3, 2, 9]'
  - inputs:
    - '6'
    - '[1,-2]'
    output: '[-2, 1]'
  - inputs:
    - '9'
    - '[7,0,4,9]'
    output: '[9, 4, 0, 7]'
  - inputs:
    - '2'
    - '[7,8,7]'
    output: '[8, 7]'
  - inputs:
    - '8'
    - '[9]'
    output: '[9]'
  - inputs:
    - '3'
    - '[2,8,6,10,10]'
    output: '[6, 8, 2]'
  - inputs:
    - '0'
    - '[5,5,10,9]'
    output: '[]'
  - inputs:
    - '1'
    - '[4,0]'
    output: '[4]'
  - inputs:
    - '-2'
    - '[0]'
    output: '[]'
  - inputs:
    - '7'
    - '[4,3,2]'
    output: '[2, 3, 4]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[6,3,-1,-2,8]'
    output: '[]'
  - inputs:
    - '1'
    - '[10,-1,-1,4]'
    output: '[10]'
  unsorted_examples:
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[7,-1,-1]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[10,-1,-1,4]'
    output: '[10]'
  - inputs:
    - '7'
    - '[4,3,2]'
    output: '[2, 3, 4]'
  - inputs:
    - '2'
    - '[7,8,7]'
    output: '[8, 7]'
  - inputs:
    - '1'
    - '[4,0]'
    output: '[4]'
  - inputs:
    - '6'
    - '[1,-2]'
    output: '[-2, 1]'
  - inputs:
    - '9'
    - '[7,0,4,9]'
    output: '[9, 4, 0, 7]'
  - inputs:
    - '8'
    - '[9]'
    output: '[9]'
  - inputs:
    - '6'
    - '[10,-1,-1,4,6,2]'
    output: '[2, 6, 4, -1, -1, 10]'
  - inputs:
    - '3'
    - '[2,8,6,10,10]'
    output: '[6, 8, 2]'
  - inputs:
    - '7'
    - '[3,9,8,8,0]'
    output: '[0, 8, 8, 9, 3]'
  - inputs:
    - '-1'
    - '[6,3,-1,-2,8]'
    output: '[]'
  - inputs:
    - '-2'
    - '[0]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,-2,3]'
    output: '[7]'
  - inputs:
    - '0'
    - '[-2,2,0,4,8]'
    output: '[]'
  - inputs:
    - '4'
    - '[9,2,3,2,5,-1]'
    output: '[2, 3, 2, 9]'
  - inputs:
    - '0'
    - '[6]'
    output: '[]'
  - inputs:
    - '-2'
    - '[3,3]'
    output: '[]'
  - inputs:
    - '3'
    - '[-1,-2,9,7]'
    output: '[9, -2, -1]'
  - inputs:
    - '0'
    - '[5,5,10,9]'
    output: '[]'
  control_examples:
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[7,-1,-1]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '1'
    - '[10,-1,-1,4]'
    output: '[10]'
  - inputs:
    - '7'
    - '[4,3,2]'
    output: '[2, 3, 4]'
  - inputs:
    - '2'
    - '[7,8,7]'
    output: '[8, 7]'
  - inputs:
    - '1'
    - '[4,0]'
    output: '[4]'
  - inputs:
    - '6'
    - '[1,-2]'
    output: '[-2, 1]'
  - inputs:
    - '9'
    - '[7,0,4,9]'
    output: '[9, 4, 0, 7]'
  - inputs:
    - '8'
    - '[9]'
    output: '[9]'
  - inputs:
    - '6'
    - '[10,-1,-1,4,6,2]'
    output: '[2, 6, 4, -1, -1, 10]'
  - inputs:
    - '3'
    - '[2,8,6,10,10]'
    output: '[6, 8, 2]'
  - inputs:
    - '7'
    - '[3,9,8,8,0]'
    output: '[0, 8, 8, 9, 3]'
  - inputs:
    - '-1'
    - '[6,3,-1,-2,8]'
    output: '[]'
  - inputs:
    - '-2'
    - '[0]'
    output: '[]'
  - inputs:
    - '1'
    - '[7,-2,3]'
    output: '[7]'
  - inputs:
    - '-2'
    - '[3,3]'
    output: '[]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> tail (take n xs)
  sorted_examples:
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '6'
    - '[5,7,10,10]'
    output: '[7, 10, 10]'
  - inputs:
    - '0'
    - '[6,3,2,10,6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-2'
    - '[8,4,9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '2'
    - '[2,2]'
    output: '[2]'
  - inputs:
    - '10'
    - '[8,0,-1,8,4,9]'
    output: '[0, -1, 8, 4, 9]'
  - inputs:
    - '2'
    - '[0,10,6,-1,-1]'
    output: '[10]'
  - inputs:
    - '-1'
    - '[-2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '3'
    - '[1]'
    output: '[]'
  - inputs:
    - '1'
    - '[2,10,6]'
    output: '[]'
  - inputs:
    - '0'
    - '[1,-2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '10'
    - '[-1,1,6]'
    output: '[1, 6]'
  - inputs:
    - '1'
    - '[0,7]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '4'
    - '[2,6,8,7,7]'
    output: '[6, 8, 7]'
  unsorted_examples:
  - inputs:
    - '2'
    - '[2,2]'
    output: '[2]'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '10'
    - '[8,0,-1,8,4,9]'
    output: '[0, -1, 8, 4, 9]'
  - inputs:
    - '6'
    - '[5,7,10,10]'
    output: '[7, 10, 10]'
  - inputs:
    - '0'
    - '[1,-2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '2'
    - '[0,10,6,-1,-1]'
    output: '[10]'
  - inputs:
    - '3'
    - '[1]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '4'
    - '[2,6,8,7,7]'
    output: '[6, 8, 7]'
  - inputs:
    - '1'
    - '[2,10,6]'
    output: '[]'
  - inputs:
    - '-2'
    - '[8,4,9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-1'
    - '[-2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '10'
    - '[-1,1,6]'
    output: '[1, 6]'
  - inputs:
    - '0'
    - '[6,3,2,10,6]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '1'
    - '[0,7]'
    output: '[]'
  control_examples:
  - inputs:
    - '2'
    - '[2,2]'
    output: '[2]'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '10'
    - '[8,0,-1,8,4,9]'
    output: '[0, -1, 8, 4, 9]'
  - inputs:
    - '6'
    - '[5,7,10,10]'
    output: '[7, 10, 10]'
  - inputs:
    - '0'
    - '[1,-2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '2'
    - '[0,10,6,-1,-1]'
    output: '[10]'
  - inputs:
    - '3'
    - '[1]'
    output: '[]'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '4'
    - '[2,6,8,7,7]'
    output: '[6, 8, 7]'
  - inputs:
    - '1'
    - '[2,10,6]'
    output: '[]'
  - inputs:
    - '-2'
    - '[8,4,9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '-1'
    - '[-2]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '10'
    - '[-1,1,6]'
    output: '[1, 6]'
  - inputs:
    - '0'
    - '[6,3,2,10,6]'
    output: 'Prelude.tail: empty list'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> concat (replicate n xs)
  sorted_examples:
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '3'
    - '[1,2,3,9,5]'
    output: '[1, 2, 3, 9, 5, 1, 2, 3, 9, 5, 1, 2, 3, 9, 5]'
  - inputs:
    - '3'
    - '[3,9]'
    output: '[3, 9, 3, 9, 3, 9]'
  - inputs:
    - '3'
    - '[6,9,10]'
    output: '[6, 9, 10, 6, 9, 10, 6, 9, 10]'
  - inputs:
    - '10'
    - '[4]'
    output: '[4, 4, 4, 4, 4, 4, 4, 4, 4, 4]'
  - inputs:
    - '1'
    - '[5,8,5,2,7]'
    output: '[5, 8, 5, 2, 7]'
  - inputs:
    - '-1'
    - '[1,9,10,-1]'
    output: '[]'
  - inputs:
    - '8'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '4'
    - '[1]'
    output: '[1, 1, 1, 1]'
  - inputs:
    - '7'
    - '[-1,1,3]'
    output: '[-1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3]'
  - inputs:
    - '-1'
    - '[6]'
    output: '[]'
  - inputs:
    - '2'
    - '[6,8]'
    output: '[6, 8, 6, 8]'
  - inputs:
    - '2'
    - '[1]'
    output: '[1, 1]'
  - inputs:
    - '9'
    - '[7,0]'
    output: '[7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0]'
  - inputs:
    - '-2'
    - '[1,-2,3]'
    output: '[]'
  - inputs:
    - '7'
    - '[5,-1,9,-2]'
    output: '[5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2,
      5, -1, 9, -2, 5, -1, 9, -2]'
  - inputs:
    - '4'
    - '[9,7]'
    output: '[9, 7, 9, 7, 9, 7, 9, 7]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '10'
    - '[8,-1,5,2,6,5]'
    output: '[8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2,
      6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2,
      6, 5, 8, _'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10]'
  unsorted_examples:
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '3'
    - '[3,9]'
    output: '[3, 9, 3, 9, 3, 9]'
  - inputs:
    - '7'
    - '[-1,1,3]'
    output: '[-1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[7,0]'
    output: '[7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0]'
  - inputs:
    - '3'
    - '[6,9,10]'
    output: '[6, 9, 10, 6, 9, 10, 6, 9, 10]'
  - inputs:
    - '1'
    - '[5,8,5,2,7]'
    output: '[5, 8, 5, 2, 7]'
  - inputs:
    - '3'
    - '[1,2,3,9,5]'
    output: '[1, 2, 3, 9, 5, 1, 2, 3, 9, 5, 1, 2, 3, 9, 5]'
  - inputs:
    - '8'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '7'
    - '[5,-1,9,-2]'
    output: '[5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2,
      5, -1, 9, -2, 5, -1, 9, -2]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '2'
    - '[6,8]'
    output: '[6, 8, 6, 8]'
  - inputs:
    - '-2'
    - '[1,-2,3]'
    output: '[]'
  - inputs:
    - '10'
    - '[8,-1,5,2,6,5]'
    output: '[8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2,
      6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2,
      6, 5, 8, _'
  - inputs:
    - '2'
    - '[1]'
    output: '[1, 1]'
  - inputs:
    - '-1'
    - '[6]'
    output: '[]'
  - inputs:
    - '10'
    - '[4]'
    output: '[4, 4, 4, 4, 4, 4, 4, 4, 4, 4]'
  - inputs:
    - '4'
    - '[1]'
    output: '[1, 1, 1, 1]'
  - inputs:
    - '-1'
    - '[1,9,10,-1]'
    output: '[]'
  - inputs:
    - '4'
    - '[9,7]'
    output: '[9, 7, 9, 7, 9, 7, 9, 7]'
  control_examples:
  - inputs:
    - '7'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '3'
    - '[3,9]'
    output: '[3, 9, 3, 9, 3, 9]'
  - inputs:
    - '7'
    - '[-1,1,3]'
    output: '[-1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3, -1, 1, 3]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '9'
    - '[7,0]'
    output: '[7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7, 0]'
  - inputs:
    - '3'
    - '[6,9,10]'
    output: '[6, 9, 10, 6, 9, 10, 6, 9, 10]'
  - inputs:
    - '1'
    - '[5,8,5,2,7]'
    output: '[5, 8, 5, 2, 7]'
  - inputs:
    - '3'
    - '[1,2,3,9,5]'
    output: '[1, 2, 3, 9, 5, 1, 2, 3, 9, 5, 1, 2, 3, 9, 5]'
  - inputs:
    - '8'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '7'
    - '[5,-1,9,-2]'
    output: '[5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2, 5, -1, 9, -2,
      5, -1, 9, -2, 5, -1, 9, -2]'
  - inputs:
    - '-1'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[9]'
    output: '[]'
  - inputs:
    - '-1'
    - '[6]'
    output: '[]'
  - inputs:
    - '-2'
    - '[5,-1]'
    output: '[]'
  - inputs:
    - '10'
    - '[5]'
    output: '[5, 5, 5, 5, 5, 5, 5, 5, 5, 5]'
  - inputs:
    - '10'
    - '[8,-1,5,2,6,5]'
    output: '[8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2,
      6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2, 6, 5, 8, -1, 5, 2,
      6, 5, 8, _'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> head (replicate n xs)
  sorted_examples:
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[1,3,7,6,10,0]'
    output: '[1, 3, 7, 6, 10, 0]'
  - inputs:
    - '10'
    - '[-2,8]'
    output: '[-2, 8]'
  - inputs:
    - '-2'
    - '[8,9,7,10,4,1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[5,6,8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[8,0,10]'
    output: '[8, 0, 10]'
  - inputs:
    - '0'
    - '[6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-1'
    - '[-1,6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[0,2,-1,0,9]'
    output: '[0, 2, -1, 0, 9]'
  - inputs:
    - '0'
    - '[2,2,2,4,1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[4]'
    output: '[4]'
  - inputs:
    - '-2'
    - '[-2,1,6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-1'
    - '[2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[10,1,-2,-2,8]'
    output: 'Prelude.head: empty list'
  unsorted_examples:
  - inputs:
    - '10'
    - '[-2,8]'
    output: '[-2, 8]'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[4]'
    output: '[4]'
  - inputs:
    - '10'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[0,2,-1,0,9]'
    output: '[0, 2, -1, 0, 9]'
  - inputs:
    - '8'
    - '[8,0,10]'
    output: '[8, 0, 10]'
  - inputs:
    - '-1'
    - '[-1,6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-1'
    - '[2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[5,6,8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[2,2,2,4,1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[1,3,7,6,10,0]'
    output: '[1, 3, 7, 6, 10, 0]'
  - inputs:
    - '-2'
    - '[8,9,7,10,4,1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[-2,1,6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[10,1,-2,-2,8]'
    output: 'Prelude.head: empty list'
  control_examples:
  - inputs:
    - '10'
    - '[-2,8]'
    output: '[-2, 8]'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[4]'
    output: '[4]'
  - inputs:
    - '10'
    - '[]'
    output: '[]'
  - inputs:
    - '7'
    - '[0,2,-1,0,9]'
    output: '[0, 2, -1, 0, 9]'
  - inputs:
    - '8'
    - '[8,0,10]'
    output: '[8, 0, 10]'
  - inputs:
    - '-1'
    - '[-1,6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-1'
    - '[2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[5,6,8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[-2,1,6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '0'
    - '[8,3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '-2'
    - '[9,2,10,1,-2]'
    output: 'Prelude.head: empty list'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> (repeat xs) !! n
  sorted_examples:
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '3'
    - '[10,4,7,7]'
    output: '[10, 4, 7, 7]'
  - inputs:
    - '2'
    - '[9]'
    output: '[9]'
  - inputs:
    - '6'
    - '[7,0,5,5,9,3]'
    output: '[7, 0, 5, 5, 9, 3]'
  - inputs:
    - '-1'
    - '[-1,5,8,9]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[5,6,8]'
    output: '[5, 6, 8]'
  - inputs:
    - '0'
    - '[8,6,1,4,4]'
    output: '[8, 6, 1, 4, 4]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '-1'
    - '[5,4]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[-1,5]'
    output: '[-1, 5]'
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '0'
    - '[6]'
    output: '[6]'
  - inputs:
    - '8'
    - '[0,7]'
    output: '[0, 7]'
  - inputs:
    - '-2'
    - '[0]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '-2'
    - '[-2,4,-2]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '1'
    - '[5,4,6]'
    output: '[5, 4, 6]'
  unsorted_examples:
  - inputs:
    - '0'
    - '[6]'
    output: '[6]'
  - inputs:
    - '0'
    - '[5,6,8]'
    output: '[5, 6, 8]'
  - inputs:
    - '8'
    - '[0,7]'
    output: '[0, 7]'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[0]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '3'
    - '[10,4,7,7]'
    output: '[10, 4, 7, 7]'
  - inputs:
    - '2'
    - '[9]'
    output: '[9]'
  - inputs:
    - '-1'
    - '[5,4]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '1'
    - '[5,4,6]'
    output: '[5, 4, 6]'
  - inputs:
    - '-2'
    - '[-2,4,-2]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[-1,5]'
    output: '[-1, 5]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '6'
    - '[7,0,5,5,9,3]'
    output: '[7, 0, 5, 5, 9, 3]'
  - inputs:
    - '0'
    - '[8,6,1,4,4]'
    output: '[8, 6, 1, 4, 4]'
  - inputs:
    - '-1'
    - '[-1,5,8,9]'
    output: 'Prelude.!!: negative index'
  control_examples:
  - inputs:
    - '0'
    - '[6]'
    output: '[6]'
  - inputs:
    - '0'
    - '[5,6,8]'
    output: '[5, 6, 8]'
  - inputs:
    - '8'
    - '[0,7]'
    output: '[0, 7]'
  - inputs:
    - '-2'
    - '[]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '6'
    - '[]'
    output: '[]'
  - inputs:
    - '-2'
    - '[0]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '3'
    - '[10,4,7,7]'
    output: '[10, 4, 7, 7]'
  - inputs:
    - '2'
    - '[9]'
    output: '[9]'
  - inputs:
    - '-1'
    - '[5,4]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '1'
    - '[5,4,6]'
    output: '[5, 4, 6]'
  - inputs:
    - '-2'
    - '[-2,4,-2]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[-1,5]'
    output: '[-1, 5]'
  - inputs:
    - '4'
    - '[8,9,5,0,3,1]'
    output: '[8, 9, 5, 0, 3, 1]'
  - inputs:
    - '0'
    - '[]'
    output: '[]'
  - inputs:
    - '8'
    - '[10,1,10,2,6]'
    output: '[10, 1, 10, 2, 6]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: '\n xs -> (xs !! n) : []'
  sorted_examples:
  - inputs:
    - '5'
    - '[7,1,3]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '3'
    - '[9,6,7,3,2,2]'
    output: '[3]'
  - inputs:
    - '0'
    - '[4,8]'
    output: '[4]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[6,5]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '2'
    - '[8,8,9,2]'
    output: '[9]'
  - inputs:
    - '9'
    - '[9,-1,5,0,6]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '4'
    - '[-1]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '8'
    - '[10,5,3,9]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[5,2,8,-1,9,1]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '1'
    - '[7,-2,3]'
    output: '[-2]'
  - inputs:
    - '1'
    - '[-1,2]'
    output: '[2]'
  - inputs:
    - '-1'
    - '[3]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '6'
    - '[7,8]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '0'
    - '[4]'
    output: '[4]'
  - inputs:
    - '4'
    - '[8,3,8,3,2]'
    output: '[2]'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.!!: negative index'
  unsorted_examples:
  - inputs:
    - '5'
    - '[7,1,3]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '4'
    - '[-1]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '1'
    - '[7,-2,3]'
    output: '[-2]'
  - inputs:
    - '3'
    - '[9,6,7,3,2,2]'
    output: '[3]'
  - inputs:
    - '2'
    - '[8,8,9,2]'
    output: '[9]'
  - inputs:
    - '6'
    - '[7,8]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[5,2,8,-1,9,1]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[6,5]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '4'
    - '[8,3,8,3,2]'
    output: '[2]'
  - inputs:
    - '-1'
    - '[3]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '1'
    - '[-1,2]'
    output: '[2]'
  - inputs:
    - '0'
    - '[4]'
    output: '[4]'
  - inputs:
    - '9'
    - '[9,-1,5,0,6]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '0'
    - '[4,8]'
    output: '[4]'
  - inputs:
    - '8'
    - '[10,5,3,9]'
    output: 'Prelude.!!: index too large'
  control_examples:
  - inputs:
    - '5'
    - '[7,1,3]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '4'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '4'
    - '[-1]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '1'
    - '[7,-2,3]'
    output: '[-2]'
  - inputs:
    - '3'
    - '[9,6,7,3,2,2]'
    output: '[3]'
  - inputs:
    - '2'
    - '[8,8,9,2]'
    output: '[9]'
  - inputs:
    - '6'
    - '[7,8]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[5,2,8,-1,9,1]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.!!: index too large'
  - inputs:
    - '-1'
    - '[6,5]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '4'
    - '[8,3,8,3,2]'
    output: '[2]'
  - inputs:
    - '-1'
    - '[3]'
    output: 'Prelude.!!: negative index'
  - inputs:
    - '1'
    - '[-1,2]'
    output: '[2]'
- name: concatNTimes
  query: 'n: Int -> xs: [a] -> [a]'
  candidate: \n xs -> init (replicate n (head xs))
  sorted_examples:
  - inputs:
    - '8'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '7'
    - '[2,8,5,2,8,2]'
    output: '[2, 2, 2, 2, 2, 2]'
  - inputs:
    - '10'
    - '[0,3]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '3'
    - '[2,-1]'
    output: '[2, 2]'
  - inputs:
    - '6'
    - '[0,0,-2]'
    output: '[0, 0, 0, 0, 0]'
  - inputs:
    - '5'
    - '[9]'
    output: '[9, 9, 9, 9]'
  - inputs:
    - '9'
    - '[-1,2,7,6,4]'
    output: '[-1, -1, -1, -1, -1, -1, -1, -1]'
  - inputs:
    - '0'
    - '[2,5,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[5,4,2,10]'
    output: '[5]'
  - inputs:
    - '8'
    - '[6,-2,0]'
    output: '[6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '4'
    - '[1,4,7]'
    output: '[1, 1, 1]'
  - inputs:
    - '-2'
    - '[9,7,0,7,6,1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '10'
    - '[6,6,2,6]'
    output: '[6, 6, 6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '1'
    - '[9]'
    output: '[]'
  - inputs:
    - '8'
    - '[0,-2]'
    output: '[0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '2'
    - '[4,7,1]'
    output: '[4]'
  - inputs:
    - '7'
    - '[0,10]'
    output: '[0, 0, 0, 0, 0, 0]'
  - inputs:
    - '5'
    - '[7,7]'
    output: '[7, 7, 7, 7]'
  - inputs:
    - '-2'
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[6,8,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '2'
    - '[1]'
    output: '[1]'
  - inputs:
    - '10'
    - '[3,5,0]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '7'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3]'
  - inputs:
    - '3'
    - '[4]'
    output: '[4, 4]'
  - inputs:
    - '10'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '7'
    - '[7,7,9]'
    output: '[7, 7, 7, 7, 7, 7]'
  - inputs:
    - '4'
    - '[1]'
    output: '[1, 1, 1]'
  - inputs:
    - '8'
    - '[1,5,3,10]'
    output: '[1, 1, 1, 1, 1, 1, 1]'
  - inputs:
    - '6'
    - '[2,10]'
    output: '[2, 2, 2, 2, 2]'
  - inputs:
    - '3'
    - '[9,1,2,7]'
    output: '[9, 9]'
  unsorted_examples:
  - inputs:
    - '2'
    - '[5,4,2,10]'
    output: '[5]'
  - inputs:
    - '10'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '2'
    - '[4,7,1]'
    output: '[4]'
  - inputs:
    - '8'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[0,3]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '3'
    - '[4]'
    output: '[4, 4]'
  - inputs:
    - '7'
    - '[2,8,5,2,8,2]'
    output: '[2, 2, 2, 2, 2, 2]'
  - inputs:
    - '5'
    - '[9]'
    output: '[9, 9, 9, 9]'
  - inputs:
    - '5'
    - '[7,7]'
    output: '[7, 7, 7, 7]'
  - inputs:
    - '10'
    - '[6,6,2,6]'
    output: '[6, 6, 6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '3'
    - '[2,-1]'
    output: '[2, 2]'
  - inputs:
    - '8'
    - '[0,-2]'
    output: '[0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '4'
    - '[1]'
    output: '[1, 1, 1]'
  - inputs:
    - '9'
    - '[-1,2,7,6,4]'
    output: '[-1, -1, -1, -1, -1, -1, -1, -1]'
  - inputs:
    - '6'
    - '[0,0,-2]'
    output: '[0, 0, 0, 0, 0]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '8'
    - '[1,5,3,10]'
    output: '[1, 1, 1, 1, 1, 1, 1]'
  - inputs:
    - '-1'
    - '[6,8,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '7'
    - '[7,7,9]'
    output: '[7, 7, 7, 7, 7, 7]'
  - inputs:
    - '7'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3]'
  - inputs:
    - '10'
    - '[3,5,0]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3]'
  - inputs:
    - '8'
    - '[6,-2,0]'
    output: '[6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '-2'
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '4'
    - '[1,4,7]'
    output: '[1, 1, 1]'
  - inputs:
    - '-2'
    - '[9,7,0,7,6,1]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '7'
    - '[0,10]'
    output: '[0, 0, 0, 0, 0, 0]'
  - inputs:
    - '3'
    - '[9,1,2,7]'
    output: '[9, 9]'
  - inputs:
    - '0'
    - '[2,5,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '1'
    - '[9]'
    output: '[]'
  - inputs:
    - '6'
    - '[2,10]'
    output: '[2, 2, 2, 2, 2]'
  - inputs:
    - '2'
    - '[1]'
    output: '[1]'
  control_examples:
  - inputs:
    - '2'
    - '[5,4,2,10]'
    output: '[5]'
  - inputs:
    - '10'
    - '[10]'
    output: '[10, 10, 10, 10, 10, 10, 10, 10, 10]'
  - inputs:
    - '2'
    - '[4,7,1]'
    output: '[4]'
  - inputs:
    - '8'
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '10'
    - '[0,3]'
    output: '[0, 0, 0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '3'
    - '[4]'
    output: '[4, 4]'
  - inputs:
    - '7'
    - '[2,8,5,2,8,2]'
    output: '[2, 2, 2, 2, 2, 2]'
  - inputs:
    - '5'
    - '[9]'
    output: '[9, 9, 9, 9]'
  - inputs:
    - '5'
    - '[7,7]'
    output: '[7, 7, 7, 7]'
  - inputs:
    - '10'
    - '[6,6,2,6]'
    output: '[6, 6, 6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '3'
    - '[2,-1]'
    output: '[2, 2]'
  - inputs:
    - '8'
    - '[0,-2]'
    output: '[0, 0, 0, 0, 0, 0, 0]'
  - inputs:
    - '4'
    - '[1]'
    output: '[1, 1, 1]'
  - inputs:
    - '9'
    - '[-1,2,7,6,4]'
    output: '[-1, -1, -1, -1, -1, -1, -1, -1]'
  - inputs:
    - '6'
    - '[0,0,-2]'
    output: '[0, 0, 0, 0, 0]'
  - inputs:
    - '0'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '8'
    - '[1,5,3,10]'
    output: '[1, 1, 1, 1, 1, 1, 1]'
  - inputs:
    - '-1'
    - '[6,8,4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '-1'
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '7'
    - '[7,7,9]'
    output: '[7, 7, 7, 7, 7, 7]'
  - inputs:
    - '7'
    - '[3]'
    output: '[3, 3, 3, 3, 3, 3]'
  - inputs:
    - '10'
    - '[3,5,0]'
    output: '[3, 3, 3, 3, 3, 3, 3, 3, 3]'
  - inputs:
    - '8'
    - '[6,-2,0]'
    output: '[6, 6, 6, 6, 6, 6, 6]'
  - inputs:
    - '-2'
    - '[0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '4'
    - '[1,4,7]'
    output: '[1, 1, 1]'
  - inputs:
    - '6'
    - '[5,4]'
    output: '[5, 5, 5, 5, 5]'
  - inputs:
    - '1'
    - '[4,-1]'
    output: '[]'
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: \f xs -> partitionEithers (map f xs)
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0,7,-1]'
    output: (["Zero"], [True, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,2,0]'
    output: (["Zero", "Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,5]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,0]'
    output: (["Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[1,0,0,6]'
    output: (["Zero", "Zero"], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,2]'
    output: ([], [False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0,7]'
    output: (["Zero"], [True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,7,1]'
    output: ([], [False, False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5]'
    output: ([], [False])
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,5]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0,7]'
    output: (["Zero"], [True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,2]'
    output: ([], [False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,7,1]'
    output: ([], [False, False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,2,0]'
    output: (["Zero", "Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0,7,-1]'
    output: (["Zero"], [True, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,0]'
    output: (["Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[1,0,0,6]'
    output: (["Zero", "Zero"], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5]'
    output: ([], [False])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,5]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0,7]'
    output: (["Zero"], [True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,2]'
    output: ([], [False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,7,1]'
    output: ([], [False, False, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8]'
    output: ([], [False])
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: \f xs -> partitionEithers (init (map f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,0,3,7]'
    output: (["Zero", "Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,5]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,1,-1,7]'
    output: ([], [False, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,7,5]'
    output: (["Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,8,2]'
    output: ([], [True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,8]'
    output: (["Zero"], [])
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,5]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,8,2]'
    output: ([], [True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,7,5]'
    output: (["Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,1,-1,7]'
    output: ([], [False, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,8]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,0,3,7]'
    output: (["Zero", "Zero"], [False])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7,5]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,8,2]'
    output: ([], [True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,7,5]'
    output: (["Zero"], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,1,-1,7]'
    output: ([], [False, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,8]'
    output: (["Zero"], [])
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: \f xs -> partitionEithers (reverse (map f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,-1,6,4]'
    output: ([], [False, False, True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,6]'
    output: ([], [False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,8,2]'
    output: ([], [False, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0]'
    output: (["Zero"], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0,7]'
    output: (["Zero"], [False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4]'
    output: ([], [False])
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,8,2]'
    output: ([], [False, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0,7]'
    output: (["Zero"], [False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,6]'
    output: ([], [False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0]'
    output: (["Zero"], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[5,-1,6,4]'
    output: ([], [False, False, True, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,8,2]'
    output: ([], [False, False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,0,7]'
    output: (["Zero"], [False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-1,6]'
    output: ([], [False, True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[7]'
    output: ([], [False])
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: \f xs -> partitionEithers (tail (map f xs))
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,-2,8,4]'
    output: ([], [True, False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,-2]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,2]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,7,10,0]'
    output: (["Zero"], [False, False])
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,-2]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,2]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,7,10,0]'
    output: (["Zero"], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,-2,8,4]'
    output: ([], [True, False, False])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,-2]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,9,2]'
    output: ([], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,7,10,0]'
    output: (["Zero"], [False, False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4]'
    output: ([], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,-2,8,4]'
    output: ([], [True, False, False])
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: '\f xs -> partitionEithers ((f (head xs)) : [])'
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,7,10,0]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,7,5]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,10,2]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [True])
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,7,10,0]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,10,2]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,7,5]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,7,10,0]'
    output: ([], [True])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[4]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[3,10,2]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0,7,5]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [True])
- name: mapEither
  query: 'f: (a -> Either b c) -> xs: [a] -> ([b], [c])'
  candidate: '\f xs -> partitionEithers ((f (last xs)) : [])'
  sorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,3,3,0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,2,2]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,-2,8,4]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  unsorted_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,-2,8,4]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,2,2]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,3,3,0]'
    output: (["Zero"], [])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
  control_examples:
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[-2,8]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[6,-2,8,4]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[8,2,2]'
    output: ([], [False])
  - inputs:
    - (\x -> if x == 0 then Left "Zero" else Right (x < 0))
    - '[0]'
    output: (["Zero"], [])
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (rights es)
  sorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 5,Right "bbbbb",Right "b",Right "dca",Right "ac"]'
    output: Right ["bbbbb", "b", "dca", "ac"]
  - inputs:
    - '[Right "ccd",Left 0,Right "b",Left 3,Left 8,Left 10]'
    output: Right ["ccd", "b"]
  - inputs:
    - '[Right "",Left -1,Left 9]'
    output: Right [""]
  - inputs:
    - '[Right "cbba",Left 8,Left 8,Left 9,Right "bcbcd",Right "dddadd"]'
    output: Right ["cbba", "bcbcd", "dddadd"]
  - inputs:
    - '[Right "",Left 1,Right "a",Right "bdc"]'
    output: Right ["", "a", "bdc"]
  - inputs:
    - '[Right "d",Right "cdd"]'
    output: Right ["d", "cdd"]
  - inputs:
    - '[Right "bbda",Right "aba",Left -2,Left 10]'
    output: Right ["bbda", "aba"]
  - inputs:
    - '[Left 0,Left 7,Right "c",Left 10,Left 2]'
    output: Right ["c"]
  - inputs:
    - '[Right "",Right "ccd",Left 6,Left 0,Right "dcdcb",Right "cddcd"]'
    output: Right ["", "ccd", "dcdcb", "cddcd"]
  - inputs:
    - '[Left 1,Left 6,Right "da"]'
    output: Right ["da"]
  - inputs:
    - '[Left 10,Left 5,Left 4]'
    output: Right []
  - inputs:
    - '[Right "cabbb",Left 4,Left 2,Left 9,Left 2,Left -1]'
    output: Right ["cabbb"]
  - inputs:
    - '[Right "",Right "bc",Left 8]'
    output: Right ["", "bc"]
  - inputs:
    - '[Right "dccc",Left 5,Right "",Left 7,Left 7]'
    output: Right ["dccc", ""]
  - inputs:
    - '[Left 8]'
    output: Right []
  - inputs:
    - '[Right "",Left 4]'
    output: Right [""]
  unsorted_examples:
  - inputs:
    - '[Right "d",Right "cdd"]'
    output: Right ["d", "cdd"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 8]'
    output: Right []
  - inputs:
    - '[Right "",Right "bc",Left 8]'
    output: Right ["", "bc"]
  - inputs:
    - '[Right "dccc",Left 5,Right "",Left 7,Left 7]'
    output: Right ["dccc", ""]
  - inputs:
    - '[Right "",Left -1,Left 9]'
    output: Right [""]
  - inputs:
    - '[Right "bbda",Right "aba",Left -2,Left 10]'
    output: Right ["bbda", "aba"]
  - inputs:
    - '[Left 1,Left 6,Right "da"]'
    output: Right ["da"]
  - inputs:
    - '[Right "",Right "ccd",Left 6,Left 0,Right "dcdcb",Right "cddcd"]'
    output: Right ["", "ccd", "dcdcb", "cddcd"]
  - inputs:
    - '[Right "cbba",Left 8,Left 8,Left 9,Right "bcbcd",Right "dddadd"]'
    output: Right ["cbba", "bcbcd", "dddadd"]
  - inputs:
    - '[Left 0,Left 7,Right "c",Left 10,Left 2]'
    output: Right ["c"]
  - inputs:
    - '[Left 5,Right "bbbbb",Right "b",Right "dca",Right "ac"]'
    output: Right ["bbbbb", "b", "dca", "ac"]
  - inputs:
    - '[Left 10,Left 5,Left 4]'
    output: Right []
  - inputs:
    - '[Right "",Left 1,Right "a",Right "bdc"]'
    output: Right ["", "a", "bdc"]
  - inputs:
    - '[Right "ccd",Left 0,Right "b",Left 3,Left 8,Left 10]'
    output: Right ["ccd", "b"]
  - inputs:
    - '[Right "cabbb",Left 4,Left 2,Left 9,Left 2,Left -1]'
    output: Right ["cabbb"]
  - inputs:
    - '[Right "",Left 4]'
    output: Right [""]
  control_examples:
  - inputs:
    - '[Right "d",Right "cdd"]'
    output: Right ["d", "cdd"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 8]'
    output: Right []
  - inputs:
    - '[Right "",Right "bc",Left 8]'
    output: Right ["", "bc"]
  - inputs:
    - '[Right "dccc",Left 5,Right "",Left 7,Left 7]'
    output: Right ["dccc", ""]
  - inputs:
    - '[Right "",Left -1,Left 9]'
    output: Right [""]
  - inputs:
    - '[Right "bbda",Right "aba",Left -2,Left 10]'
    output: Right ["bbda", "aba"]
  - inputs:
    - '[Left 1,Left 6,Right "da"]'
    output: Right ["da"]
  - inputs:
    - '[Right "",Right "ccd",Left 6,Left 0,Right "dcdcb",Right "cddcd"]'
    output: Right ["", "ccd", "dcdcb", "cddcd"]
  - inputs:
    - '[Right "cdd",Right "dc",Right "a",Right "cb"]'
    output: Right ["cdd", "dc", "a", "cb"]
  - inputs:
    - '[Right "bc",Left -1,Right "ba",Left -1]'
    output: Right ["bc", "ba"]
  - inputs:
    - '[Right "bad"]'
    output: Right ["bad"]
  - inputs:
    - '[Left 0,Left 7,Right "c",Left 10,Left 2]'
    output: Right ["c"]
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Left (head (lefts es))
  sorted_examples:
  - inputs:
    - '[Right "d",Right "cdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cdcac",Right "aaabc",Left 5,Left 4,Left -1]'
    output: Left 5
  - inputs:
    - '[Right "cadccd",Right "caaad",Right "cc",Right "dccdcd",Left 0,Right "dd"]'
    output: Left 0
  - inputs:
    - '[Left 8,Left 0,Right "aacdd"]'
    output: Left 8
  - inputs:
    - '[Left -1,Left 5,Left 10,Left 1,Right "cc"]'
    output: Left -1
  - inputs:
    - '[Right "",Right "",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "caccd",Left 2,Right "b",Right "b"]'
    output: Left 2
  - inputs:
    - '[Left 5,Left -1,Right "a",Left 3,Left 9,Left 3]'
    output: Left 5
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cdb",Left 4]'
    output: Left 4
  - inputs:
    - '[Right "dcb",Right "bd",Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 4,Right "",Right "bb",Left 2,Right "dbc"]'
    output: Left 4
  - inputs:
    - '[Left -2,Right "ab"]'
    output: Left -2
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 1,Right "aab",Right "a"]'
    output: Left 1
  - inputs:
    - '[Right "a",Left -1,Left 7,Right "da"]'
    output: Left -1
  - inputs:
    - '[Left 8,Right "b",Left 5]'
    output: Left 8
  - inputs:
    - '[Left 2,Left 1,Left 0]'
    output: Left 2
  unsorted_examples:
  - inputs:
    - '[Right "d",Right "cdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cdcac",Right "aaabc",Left 5,Left 4,Left -1]'
    output: Left 5
  - inputs:
    - '[Left 8,Left 0,Right "aacdd"]'
    output: Left 8
  - inputs:
    - '[Right "a",Left -1,Left 7,Right "da"]'
    output: Left -1
  - inputs:
    - '[Left 2,Left 1,Left 0]'
    output: Left 2
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cadccd",Right "caaad",Right "cc",Right "dccdcd",Left 0,Right "dd"]'
    output: Left 0
  - inputs:
    - '[Right "caccd",Left 2,Right "b",Right "b"]'
    output: Left 2
  - inputs:
    - '[Right "cdb",Left 4]'
    output: Left 4
  - inputs:
    - '[Right "",Right "",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 8,Right "b",Left 5]'
    output: Left 8
  - inputs:
    - '[Left -1,Left 5,Left 10,Left 1,Right "cc"]'
    output: Left -1
  - inputs:
    - '[Left -2,Right "ab"]'
    output: Left -2
  - inputs:
    - '[Right "dcb",Right "bd",Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 5,Left -1,Right "a",Left 3,Left 9,Left 3]'
    output: Left 5
  - inputs:
    - '[Left 4,Right "",Right "bb",Left 2,Right "dbc"]'
    output: Left 4
  - inputs:
    - '[Left 1,Right "aab",Right "a"]'
    output: Left 1
  control_examples:
  - inputs:
    - '[Right "d",Right "cdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cdcac",Right "aaabc",Left 5,Left 4,Left -1]'
    output: Left 5
  - inputs:
    - '[Left 8,Left 0,Right "aacdd"]'
    output: Left 8
  - inputs:
    - '[Right "a",Left -1,Left 7,Right "da"]'
    output: Left -1
  - inputs:
    - '[Left 2,Left 1,Left 0]'
    output: Left 2
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cadccd",Right "caaad",Right "cc",Right "dccdcd",Left 0,Right "dd"]'
    output: Left 0
  - inputs:
    - '[Right "caccd",Left 2,Right "b",Right "b"]'
    output: Left 2
  - inputs:
    - '[Right "cdb",Left 4]'
    output: Left 4
  - inputs:
    - '[Right "",Right "",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 8,Right "b",Left 5]'
    output: Left 8
  - inputs:
    - '[Right "ddac",Left 6,Left 7,Left 8,Right "aaaba"]'
    output: Left 6
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Left (last (lefts es))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left -1,Right "ada",Right "cddcbd",Right "",Left -2,Right "acaddd"]'
    output: Left -2
  - inputs:
    - '[Left -2,Left 0,Left 4,Left 6]'
    output: Left 6
  - inputs:
    - '[Right "a",Right "",Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "acc",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 2,Right "dba",Right ""]'
    output: Left 2
  - inputs:
    - '[Right "cdcac",Right "aaabc",Left 5,Left 4,Left -1]'
    output: Left -1
  - inputs:
    - '[Right "caccca",Left 10,Right "dd",Left -1,Right "db"]'
    output: Left -1
  - inputs:
    - '[Right "d",Right "ddc"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "cdb",Right "bccd",Right "bcbb",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 1,Right "cb"]'
    output: Left 1
  - inputs:
    - '[Left 10,Right "ddac",Right "ccac",Right "cc"]'
    output: Left 10
  - inputs:
    - '[Right "bc",Left 7,Left 1]'
    output: Left 1
  - inputs:
    - '[Left 8,Left 1,Right "",Right "",Right ""]'
    output: Left 1
  - inputs:
    - '[Left 8]'
    output: Left 8
  - inputs:
    - '[Right "bd",Right "db",Right "bac",Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "aab",Left -2,Left 6,Right ""]'
    output: Left 6
  - inputs:
    - '[Left 8,Left 0,Right "aacdd"]'
    output: Left 0
  - inputs:
    - '[Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "dadd",Right "cbdc",Left 8,Left 7]'
    output: Left 7
  - inputs:
    - '[Left 4,Right "bbb",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "cd",Left 0,Right ""]'
    output: Left 0
  unsorted_examples:
  - inputs:
    - '[Right "cdcac",Right "aaabc",Left 5,Left 4,Left -1]'
    output: Left -1
  - inputs:
    - '[Left 8,Left 0,Right "aacdd"]'
    output: Left 0
  - inputs:
    - '[Left 8]'
    output: Left 8
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "dadd",Right "cbdc",Left 8,Left 7]'
    output: Left 7
  - inputs:
    - '[Left 2,Right "dba",Right ""]'
    output: Left 2
  - inputs:
    - '[Left 4,Right "bbb",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "aab",Left -2,Left 6,Right ""]'
    output: Left 6
  - inputs:
    - '[Right "bd",Right "db",Right "bac",Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 8,Left 1,Right "",Right "",Right ""]'
    output: Left 1
  - inputs:
    - '[Right "bc",Left 7,Left 1]'
    output: Left 1
  - inputs:
    - '[Left 1,Right "cb"]'
    output: Left 1
  - inputs:
    - '[Left -2,Left 0,Left 4,Left 6]'
    output: Left 6
  - inputs:
    - '[Right "d",Right "ddc"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "cd",Left 0,Right ""]'
    output: Left 0
  - inputs:
    - '[Left -1,Right "ada",Right "cddcbd",Right "",Left -2,Right "acaddd"]'
    output: Left -2
  - inputs:
    - '[Right "cdb",Right "bccd",Right "bcbb",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "caccca",Left 10,Right "dd",Left -1,Right "db"]'
    output: Left -1
  - inputs:
    - '[Left 10,Right "ddac",Right "ccac",Right "cc"]'
    output: Left 10
  - inputs:
    - '[Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "acc",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "a",Right "",Right ""]'
    output: 'Prelude.last: empty list'
  control_examples:
  - inputs:
    - '[Right "cdcac",Right "aaabc",Left 5,Left 4,Left -1]'
    output: Left -1
  - inputs:
    - '[Left 8,Left 0,Right "aacdd"]'
    output: Left 0
  - inputs:
    - '[Left 8]'
    output: Left 8
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "dadd",Right "cbdc",Left 8,Left 7]'
    output: Left 7
  - inputs:
    - '[Left 2,Right "dba",Right ""]'
    output: Left 2
  - inputs:
    - '[Left 4,Right "bbb",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "aab",Left -2,Left 6,Right ""]'
    output: Left 6
  - inputs:
    - '[Right "bd",Right "db",Right "bac",Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 8,Left 1,Right "",Right "",Right ""]'
    output: Left 1
  - inputs:
    - '[Right "bc",Left 7,Left 1]'
    output: Left 1
  - inputs:
    - '[Left 1,Right "cb"]'
    output: Left 1
  - inputs:
    - '[Right "b",Left -2,Left 7,Left 5]'
    output: Left 5
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (init (rights es))
  sorted_examples:
  - inputs:
    - '[Left 2,Left 1,Left 0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "",Left 6,Left 7,Right "acb",Left 0,Left -1]'
    output: Right [""]
  - inputs:
    - '[Right "cbb",Right "da",Right "b",Right "c",Right "b"]'
    output: Right ["cbb", "da", "b", "c"]
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Left -1,Right "bc",Right "",Right ""]'
    output: Right ["bc", ""]
  - inputs:
    - '[Right "",Right "bc",Left 8]'
    output: Right [""]
  - inputs:
    - '[Right "dadc",Left 8,Left 3,Left 7]'
    output: Right []
  - inputs:
    - '[Left 7,Left -2,Left 4,Right "bdbcbb",Right "cabdcc"]'
    output: Right ["bdbcbb"]
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "a",Left -1,Left 7,Right "da"]'
    output: Right ["a"]
  - inputs:
    - '[Left 5,Left 4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "aba",Left 10,Right "ad",Right "ccb",Left 9,Left 8]'
    output: Right ["aba", "ad"]
  - inputs:
    - '[Left 2,Right "dba",Right ""]'
    output: Right ["dba"]
  - inputs:
    - '[Right "bc",Right "cc"]'
    output: Right ["bc"]
  - inputs:
    - '[Left 0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 2,Left -1,Left 9,Left 9]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "dadd",Right "cbdc",Left 8,Left 7]'
    output: Right ["dadd"]
  - inputs:
    - '[Right "cbdac",Left 5,Right ""]'
    output: Right ["cbdac"]
  - inputs:
    - '[Right "cbaad",Left 9,Left 5]'
    output: Right []
  - inputs:
    - '[Left 7,Right "d"]'
    output: Right []
  unsorted_examples:
  - inputs:
    - '[Right "dadd",Right "cbdc",Left 8,Left 7]'
    output: Right ["dadd"]
  - inputs:
    - '[Left 2,Right "dba",Right ""]'
    output: Right ["dba"]
  - inputs:
    - '[Right "a",Left -1,Left 7,Right "da"]'
    output: Right ["a"]
  - inputs:
    - '[Left 2,Left 1,Left 0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "",Right "bc",Left 8]'
    output: Right [""]
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "",Left 6,Left 7,Right "acb",Left 0,Left -1]'
    output: Right [""]
  - inputs:
    - '[Left 5,Left 4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "cbaad",Left 9,Left 5]'
    output: Right []
  - inputs:
    - '[Left 2,Left -1,Left 9,Left 9]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "cbdac",Left 5,Right ""]'
    output: Right ["cbdac"]
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Left 7,Left -2,Left 4,Right "bdbcbb",Right "cabdcc"]'
    output: Right ["bdbcbb"]
  - inputs:
    - '[Right "aba",Left 10,Right "ad",Right "ccb",Left 9,Left 8]'
    output: Right ["aba", "ad"]
  - inputs:
    - '[Right "dadc",Left 8,Left 3,Left 7]'
    output: Right []
  - inputs:
    - '[Right "bc",Right "cc"]'
    output: Right ["bc"]
  - inputs:
    - '[Left -1,Right "bc",Right "",Right ""]'
    output: Right ["bc", ""]
  - inputs:
    - '[Right "cbb",Right "da",Right "b",Right "c",Right "b"]'
    output: Right ["cbb", "da", "b", "c"]
  - inputs:
    - '[Left 7,Right "d"]'
    output: Right []
  - inputs:
    - '[Left 0]'
    output: 'Prelude.init: empty list'
  control_examples:
  - inputs:
    - '[Right "dadd",Right "cbdc",Left 8,Left 7]'
    output: Right ["dadd"]
  - inputs:
    - '[Left 2,Right "dba",Right ""]'
    output: Right ["dba"]
  - inputs:
    - '[Right "a",Left -1,Left 7,Right "da"]'
    output: Right ["a"]
  - inputs:
    - '[Left 2,Left 1,Left 0]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "",Right "bc",Left 8]'
    output: Right [""]
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "",Left 6,Left 7,Right "acb",Left 0,Left -1]'
    output: Right [""]
  - inputs:
    - '[Left 5,Left 4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "cbaad",Left 9,Left 5]'
    output: Right []
  - inputs:
    - '[Left 2,Left -1,Left 9,Left 9]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "cbdac",Left 5,Right ""]'
    output: Right ["cbdac"]
  - inputs:
    - '[Right ""]'
    output: Right []
  - inputs:
    - '[Left 4]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "dadc",Left 8,Left 3,Left 7]'
    output: Right []
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (reverse (rights es))
  sorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 8,Left 4,Right "baa",Right "bcbb",Left 6,Right "cac"]'
    output: Right ["cac", "bcbb", "baa"]
  - inputs:
    - '[Right "c",Right "da",Left 2]'
    output: Right ["da", "c"]
  - inputs:
    - '[Left 2,Left -1,Left 0,Left 6,Left 8]'
    output: Right []
  - inputs:
    - '[Left 10,Left -2,Left 1,Right "bc",Right "aadbc"]'
    output: Right ["aadbc", "bc"]
  - inputs:
    - '[Left 9,Left -2,Left 0]'
    output: Right []
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "dccc",Left 5,Right "",Left 7,Left 7]'
    output: Right ["", "dccc"]
  - inputs:
    - '[Left 6,Left 8,Left 0,Right "dbb"]'
    output: Right ["dbb"]
  - inputs:
    - '[Right "ad",Right "bbcbaa",Right "bdddb",Left 4]'
    output: Right ["bdddb", "bbcbaa", "ad"]
  - inputs:
    - '[Right "acda",Left 2,Right "",Left 10,Right "c"]'
    output: Right ["c", "", "acda"]
  - inputs:
    - '[Left 4,Right "bbb",Left 1]'
    output: Right ["bbb"]
  - inputs:
    - '[Right "ddda",Left 3,Left -2]'
    output: Right ["ddda"]
  - inputs:
    - '[Left 7,Left 6,Right "b",Left 10,Right "dbd"]'
    output: Right ["dbd", "b"]
  - inputs:
    - '[Right "",Right "",Left 8,Left 3,Left 6]'
    output: Right ["", ""]
  - inputs:
    - '[Left 8,Right "",Right "bb"]'
    output: Right ["bb", ""]
  - inputs:
    - '[Left 7]'
    output: Right []
  - inputs:
    - '[Right "a",Right "bd"]'
    output: Right ["bd", "a"]
  unsorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 4,Right "bbb",Left 1]'
    output: Right ["bbb"]
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "a",Right "bd"]'
    output: Right ["bd", "a"]
  - inputs:
    - '[Right "dccc",Left 5,Right "",Left 7,Left 7]'
    output: Right ["", "dccc"]
  - inputs:
    - '[Right "c",Right "da",Left 2]'
    output: Right ["da", "c"]
  - inputs:
    - '[Left 7,Left 6,Right "b",Left 10,Right "dbd"]'
    output: Right ["dbd", "b"]
  - inputs:
    - '[Left 10,Left -2,Left 1,Right "bc",Right "aadbc"]'
    output: Right ["aadbc", "bc"]
  - inputs:
    - '[Right "ad",Right "bbcbaa",Right "bdddb",Left 4]'
    output: Right ["bdddb", "bbcbaa", "ad"]
  - inputs:
    - '[Left 7]'
    output: Right []
  - inputs:
    - '[Left 8,Left 4,Right "baa",Right "bcbb",Left 6,Right "cac"]'
    output: Right ["cac", "bcbb", "baa"]
  - inputs:
    - '[Left 2,Left -1,Left 0,Left 6,Left 8]'
    output: Right []
  - inputs:
    - '[Left 8,Right "",Right "bb"]'
    output: Right ["bb", ""]
  - inputs:
    - '[Right "",Right "",Left 8,Left 3,Left 6]'
    output: Right ["", ""]
  - inputs:
    - '[Right "ddda",Left 3,Left -2]'
    output: Right ["ddda"]
  - inputs:
    - '[Left 6,Left 8,Left 0,Right "dbb"]'
    output: Right ["dbb"]
  - inputs:
    - '[Right "acda",Left 2,Right "",Left 10,Right "c"]'
    output: Right ["c", "", "acda"]
  - inputs:
    - '[Left 9,Left -2,Left 0]'
    output: Right []
  control_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 4,Right "bbb",Left 1]'
    output: Right ["bbb"]
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "a",Right "bd"]'
    output: Right ["bd", "a"]
  - inputs:
    - '[Right "dccc",Left 5,Right "",Left 7,Left 7]'
    output: Right ["", "dccc"]
  - inputs:
    - '[Right "c",Right "da",Left 2]'
    output: Right ["da", "c"]
  - inputs:
    - '[Left 7,Left 6,Right "b",Left 10,Right "dbd"]'
    output: Right ["dbd", "b"]
  - inputs:
    - '[Left 10,Left -2,Left 1,Right "bc",Right "aadbc"]'
    output: Right ["aadbc", "bc"]
  - inputs:
    - '[Right "ad",Right "bbcbaa",Right "bdddb",Left 4]'
    output: Right ["bdddb", "bbcbaa", "ad"]
  - inputs:
    - '[Left 7]'
    output: Right []
  - inputs:
    - '[Left 5,Left -2]'
    output: Right []
  - inputs:
    - '[Left 2,Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 9,Left -2,Left 0]'
    output: Right []
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (tail (rights es))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "cadccd",Right "caaad",Right "cc",Right "dccdcd",Left 0,Right "dd"]'
    output: Right ["caaad", "cc", "dccdcd", "dd"]
  - inputs:
    - '[Right "c",Right "da",Left 2]'
    output: Right ["da"]
  - inputs:
    - '[Left 1,Right "ddac",Right "cddbd",Left 9,Right "bc",Left 5]'
    output: Right ["cddbd", "bc"]
  - inputs:
    - '[Right "",Left 6,Left 7,Right "acb",Left 0,Left -1]'
    output: Right ["acb"]
  - inputs:
    - '[Right "",Right "",Right "babcd",Right "bc"]'
    output: Right ["", "babcd", "bc"]
  - inputs:
    - '[Left 4,Left 8,Right "bcdb",Right "dbcc",Right "a"]'
    output: Right ["dbcc", "a"]
  - inputs:
    - '[Left 4,Right "b"]'
    output: Right []
  - inputs:
    - '[Left 10,Left 5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "caccd",Left 2,Right "b",Right "b"]'
    output: Right ["b", "b"]
  - inputs:
    - '[Right "b",Left 5,Left 2]'
    output: Right []
  - inputs:
    - '[Left 6,Right "",Right "cdba"]'
    output: Right ["cdba"]
  - inputs:
    - '[Right "c"]'
    output: Right []
  - inputs:
    - '[Right "aab",Left -2,Left 6,Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 1,Left 5,Right "cbbbc"]'
    output: Right []
  - inputs:
    - '[Left 8]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "acb",Right "bd"]'
    output: Right ["bd"]
  - inputs:
    - '[Right "d",Left 2]'
    output: Right []
  unsorted_examples:
  - inputs:
    - '[Right "c",Right "da",Left 2]'
    output: Right ["da"]
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "",Left 6,Left 7,Right "acb",Left 0,Left -1]'
    output: Right ["acb"]
  - inputs:
    - '[Left 6,Right "",Right "cdba"]'
    output: Right ["cdba"]
  - inputs:
    - '[Left 8]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "aab",Left -2,Left 6,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "cadccd",Right "caaad",Right "cc",Right "dccdcd",Left 0,Right "dd"]'
    output: Right ["caaad", "cc", "dccdcd", "dd"]
  - inputs:
    - '[Right "caccd",Left 2,Right "b",Right "b"]'
    output: Right ["b", "b"]
  - inputs:
    - '[Right "d",Left 2]'
    output: Right []
  - inputs:
    - '[Right "acb",Right "bd"]'
    output: Right ["bd"]
  - inputs:
    - '[Right "",Right "",Right "babcd",Right "bc"]'
    output: Right ["", "babcd", "bc"]
  - inputs:
    - '[Left 1,Left 5,Right "cbbbc"]'
    output: Right []
  - inputs:
    - '[Left 4,Left 8,Right "bcdb",Right "dbcc",Right "a"]'
    output: Right ["dbcc", "a"]
  - inputs:
    - '[Left 10,Left 5]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 1,Right "ddac",Right "cddbd",Left 9,Right "bc",Left 5]'
    output: Right ["cddbd", "bc"]
  - inputs:
    - '[Right "c"]'
    output: Right []
  - inputs:
    - '[Right "b",Left 5,Left 2]'
    output: Right []
  - inputs:
    - '[Left 4,Right "b"]'
    output: Right []
  control_examples:
  - inputs:
    - '[Right "c",Right "da",Left 2]'
    output: Right ["da"]
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "",Left 6,Left 7,Right "acb",Left 0,Left -1]'
    output: Right ["acb"]
  - inputs:
    - '[Left 6,Right "",Right "cdba"]'
    output: Right ["cdba"]
  - inputs:
    - '[Left 8]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "aab",Left -2,Left 6,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "cadccd",Right "caaad",Right "cc",Right "dccdcd",Left 0,Right "dd"]'
    output: Right ["caaad", "cc", "dccdcd", "dd"]
  - inputs:
    - '[Right "caccd",Left 2,Right "b",Right "b"]'
    output: Right ["b", "b"]
  - inputs:
    - '[Right "d",Left 2]'
    output: Right []
  - inputs:
    - '[Right "acb",Right "bd"]'
    output: Right ["bd"]
  - inputs:
    - '[Left 4,Left 8,Right "bcdb",Right "dbcc",Right "a"]'
    output: Right ["dbcc", "a"]
  - inputs:
    - '[Right ""]'
    output: Right []
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (rights (init es))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 0,Right "d",Left 0,Left 7,Right "",Left 6]'
    output: Right ["d", ""]
  - inputs:
    - '[Left 8,Left 2,Right "cdcb"]'
    output: Right []
  - inputs:
    - '[Right "bd",Right "db",Right "bac",Right ""]'
    output: Right ["bd", "db", "bac"]
  - inputs:
    - '[Right "cbb",Left 3,Left 7,Left 10,Right "dad"]'
    output: Right ["cbb"]
  - inputs:
    - '[Left 9,Right "bb",Left 8]'
    output: Right ["bb"]
  - inputs:
    - '[Right "a",Left 0,Left 1,Right "cccbd",Left 9,Left 4]'
    output: Right ["a", "cccbd"]
  - inputs:
    - '[Right "dca"]'
    output: Right []
  - inputs:
    - '[Left -1,Left -1,Right "bd",Right ""]'
    output: Right ["bd"]
  - inputs:
    - '[Right "",Right "db"]'
    output: Right [""]
  - inputs:
    - '[Right "ccc",Right "da",Right "db"]'
    output: Right ["ccc", "da"]
  - inputs:
    - '[Left 6,Right "cc",Right "a",Left 9]'
    output: Right ["cc", "a"]
  - inputs:
    - '[Right "",Left 3,Left 5,Right "",Right "dca"]'
    output: Right ["", ""]
  - inputs:
    - '[Right "cbaad",Left 9,Left 5]'
    output: Right ["cbaad"]
  - inputs:
    - '[Left 0,Left 10,Left 3]'
    output: Right []
  - inputs:
    - '[Left 5,Left 4]'
    output: Right []
  - inputs:
    - '[Right "b",Right "d",Left 8,Right "ccdad"]'
    output: Right ["b", "d"]
  - inputs:
    - '[Left 5]'
    output: Right []
  - inputs:
    - '[Right "d",Left 2]'
    output: Right ["d"]
  unsorted_examples:
  - inputs:
    - '[Left 5]'
    output: Right []
  - inputs:
    - '[Right "d",Left 2]'
    output: Right ["d"]
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 5,Left 4]'
    output: Right []
  - inputs:
    - '[Right "cbaad",Left 9,Left 5]'
    output: Right ["cbaad"]
  - inputs:
    - '[Left 8,Left 2,Right "cdcb"]'
    output: Right []
  - inputs:
    - '[Right "bd",Right "db",Right "bac",Right ""]'
    output: Right ["bd", "db", "bac"]
  - inputs:
    - '[Right "a",Left 0,Left 1,Right "cccbd",Left 9,Left 4]'
    output: Right ["a", "cccbd"]
  - inputs:
    - '[Right "ccc",Right "da",Right "db"]'
    output: Right ["ccc", "da"]
  - inputs:
    - '[Left 9,Right "bb",Left 8]'
    output: Right ["bb"]
  - inputs:
    - '[Left 0,Right "d",Left 0,Left 7,Right "",Left 6]'
    output: Right ["d", ""]
  - inputs:
    - '[Right "",Right "db"]'
    output: Right [""]
  - inputs:
    - '[Left 0,Left 10,Left 3]'
    output: Right []
  - inputs:
    - '[Right "b",Right "d",Left 8,Right "ccdad"]'
    output: Right ["b", "d"]
  - inputs:
    - '[Right "cbb",Left 3,Left 7,Left 10,Right "dad"]'
    output: Right ["cbb"]
  - inputs:
    - '[Right "dca"]'
    output: Right []
  - inputs:
    - '[Left 6,Right "cc",Right "a",Left 9]'
    output: Right ["cc", "a"]
  - inputs:
    - '[Right "",Left 3,Left 5,Right "",Right "dca"]'
    output: Right ["", ""]
  - inputs:
    - '[Left -1,Left -1,Right "bd",Right ""]'
    output: Right ["bd"]
  control_examples:
  - inputs:
    - '[Left 5]'
    output: Right []
  - inputs:
    - '[Right "d",Left 2]'
    output: Right ["d"]
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 5,Left 4]'
    output: Right []
  - inputs:
    - '[Right "cbaad",Left 9,Left 5]'
    output: Right ["cbaad"]
  - inputs:
    - '[Left 8,Left 2,Right "cdcb"]'
    output: Right []
  - inputs:
    - '[Right "bd",Right "db",Right "bac",Right ""]'
    output: Right ["bd", "db", "bac"]
  - inputs:
    - '[Right "a",Left 0,Left 1,Right "cccbd",Left 9,Left 4]'
    output: Right ["a", "cccbd"]
  - inputs:
    - '[Right "ccc",Right "da",Right "db"]'
    output: Right ["ccc", "da"]
  - inputs:
    - '[Left 9,Right "bb",Left 8]'
    output: Right ["bb"]
  - inputs:
    - '[Left 0,Left 10,Left 3]'
    output: Right []
  - inputs:
    - '[Right "b",Right "d",Left 8,Right "ccdad"]'
    output: Right ["b", "d"]
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (rights (tail es))
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 8,Left 1,Right "",Right "",Right ""]'
    output: Right ["", "", ""]
  - inputs:
    - '[Right "abcc",Right "cda",Left 5,Left 4,Left 10]'
    output: Right ["cda"]
  - inputs:
    - '[Right "bc",Left 7,Left 1]'
    output: Right []
  - inputs:
    - '[Left 0]'
    output: Right []
  - inputs:
    - '[Left 7,Left 5,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "a",Left 0,Left 1,Right "cccbd",Left 9,Left 4]'
    output: Right ["cccbd"]
  - inputs:
    - '[Right "b",Right "ccb",Right "cd"]'
    output: Right ["ccb", "cd"]
  - inputs:
    - '[Left 2,Left -1,Left 9,Left 9]'
    output: Right []
  - inputs:
    - '[Right "adc",Right "",Right "cb",Right "aab"]'
    output: Right ["", "cb", "aab"]
  - inputs:
    - '[Right "ddda",Left 7]'
    output: Right []
  - inputs:
    - '[Left -2,Left -1,Right "adca",Left 7,Left 5,Left -1]'
    output: Right ["adca"]
  - inputs:
    - '[Right "",Right "",Left 7]'
    output: Right [""]
  - inputs:
    - '[Right "dbbc",Left -2,Left -1,Right "a"]'
    output: Right ["a"]
  - inputs:
    - '[Right "cbdac",Left 5,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "c"]'
    output: Right []
  unsorted_examples:
  - inputs:
    - '[Right "a",Left 0,Left 1,Right "cccbd",Left 9,Left 4]'
    output: Right ["cccbd"]
  - inputs:
    - '[Right "ddda",Left 7]'
    output: Right []
  - inputs:
    - '[Left 0]'
    output: Right []
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 2,Left -1,Left 9,Left 9]'
    output: Right []
  - inputs:
    - '[Right "cbdac",Left 5,Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 8,Left 1,Right "",Right "",Right ""]'
    output: Right ["", "", ""]
  - inputs:
    - '[Right "bc",Left 7,Left 1]'
    output: Right []
  - inputs:
    - '[Left 7,Left 5,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "",Right "",Left 7]'
    output: Right [""]
  - inputs:
    - '[Right "b",Right "ccb",Right "cd"]'
    output: Right ["ccb", "cd"]
  - inputs:
    - '[Left -2,Left -1,Right "adca",Left 7,Left 5,Left -1]'
    output: Right ["adca"]
  - inputs:
    - '[Right "c"]'
    output: Right []
  - inputs:
    - '[Right "adc",Right "",Right "cb",Right "aab"]'
    output: Right ["", "cb", "aab"]
  - inputs:
    - '[Right "abcc",Right "cda",Left 5,Left 4,Left 10]'
    output: Right ["cda"]
  - inputs:
    - '[Right "dbbc",Left -2,Left -1,Right "a"]'
    output: Right ["a"]
  control_examples:
  - inputs:
    - '[Right "a",Left 0,Left 1,Right "cccbd",Left 9,Left 4]'
    output: Right ["cccbd"]
  - inputs:
    - '[Right "ddda",Left 7]'
    output: Right []
  - inputs:
    - '[Left 0]'
    output: Right []
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 2,Left -1,Left 9,Left 9]'
    output: Right []
  - inputs:
    - '[Right "cbdac",Left 5,Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 8,Left 1,Right "",Right "",Right ""]'
    output: Right ["", "", ""]
  - inputs:
    - '[Right "bc",Left 7,Left 1]'
    output: Right []
  - inputs:
    - '[Left 7,Left 5,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "",Right "",Left 7]'
    output: Right [""]
  - inputs:
    - '[Right "b",Right "ccb",Right "cd"]'
    output: Right ["ccb", "cd"]
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (drop (length es) [])
  sorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "",Left -2,Right "babcc",Left 6,Left 7,Left -2]'
    output: Right []
  - inputs:
    - '[Right "bddbba",Right "ccdcb",Right "dba",Right ""]'
    output: Right []
  - inputs:
    - '[Left 8,Right "b",Left 5]'
    output: Right []
  - inputs:
    - '[Left 7,Left 6,Right "b",Left 10,Right "dbd"]'
    output: Right []
  - inputs:
    - '[Right "b",Right "bad"]'
    output: Right []
  - inputs:
    - '[Left 1,Left 6,Right "da"]'
    output: Right []
  - inputs:
    - '[Right "bbda",Right "aba",Left -2,Left 10]'
    output: Right []
  - inputs:
    - '[Left 2]'
    output: Right []
  - inputs:
    - '[Left 2,Left -2,Right "cac",Right "ccbb",Left 5,Right "acb"]'
    output: Right []
  - inputs:
    - '[Left 10,Left -2,Left 1,Right "bc",Right "aadbc"]'
    output: Right []
  - inputs:
    - '[Left 6,Left 10,Left 0,Right "abbdd"]'
    output: Right []
  - inputs:
    - '[Left 8,Left 10]'
    output: Right []
  - inputs:
    - '[Left 1,Right "cb"]'
    output: Right []
  - inputs:
    - '[Right "bc",Left 7,Right "d",Right "dc"]'
    output: Right []
  - inputs:
    - '[Right "ba",Left 10]'
    output: Right []
  - inputs:
    - '[Left 1,Right "dbbccb",Left -2,Left 7]'
    output: Right []
  unsorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "ba",Left 10]'
    output: Right []
  - inputs:
    - '[Left 7,Left 6,Right "b",Left 10,Right "dbd"]'
    output: Right []
  - inputs:
    - '[Left 10,Left -2,Left 1,Right "bc",Right "aadbc"]'
    output: Right []
  - inputs:
    - '[Left 1,Right "cb"]'
    output: Right []
  - inputs:
    - '[Left 8,Right "b",Left 5]'
    output: Right []
  - inputs:
    - '[Right "bbda",Right "aba",Left -2,Left 10]'
    output: Right []
  - inputs:
    - '[Left 1,Left 6,Right "da"]'
    output: Right []
  - inputs:
    - '[Right "b",Right "bad"]'
    output: Right []
  - inputs:
    - '[Right "bc",Left 7,Right "d",Right "dc"]'
    output: Right []
  - inputs:
    - '[Left 2,Left -2,Right "cac",Right "ccbb",Left 5,Right "acb"]'
    output: Right []
  - inputs:
    - '[Right "bddbba",Right "ccdcb",Right "dba",Right ""]'
    output: Right []
  - inputs:
    - '[Left 2]'
    output: Right []
  - inputs:
    - '[Left 6,Left 10,Left 0,Right "abbdd"]'
    output: Right []
  - inputs:
    - '[Left 8,Left 10]'
    output: Right []
  - inputs:
    - '[Right "",Left -2,Right "babcc",Left 6,Left 7,Left -2]'
    output: Right []
  - inputs:
    - '[Left 1,Right "dbbccb",Left -2,Left 7]'
    output: Right []
  control_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "ba",Left 10]'
    output: Right []
  - inputs:
    - '[Left 7,Left 6,Right "b",Left 10,Right "dbd"]'
    output: Right []
  - inputs:
    - '[Left 10,Left -2,Left 1,Right "bc",Right "aadbc"]'
    output: Right []
  - inputs:
    - '[Left 1,Right "cb"]'
    output: Right []
  - inputs:
    - '[Left 8,Right "b",Left 5]'
    output: Right []
  - inputs:
    - '[Right "bbda",Right "aba",Left -2,Left 10]'
    output: Right []
  - inputs:
    - '[Left 1,Left 6,Right "da"]'
    output: Right []
  - inputs:
    - '[Right "b",Right "bad"]'
    output: Right []
  - inputs:
    - '[Right "bc",Left 7,Right "d",Right "dc"]'
    output: Right []
  - inputs:
    - '[Left 2]'
    output: Right []
  - inputs:
    - '[Right "bddbba",Right "ccdcb",Right "dba",Right ""]'
    output: Right []
  - inputs:
    - '[Left 4,Left 4,Left 5]'
    output: Right []
  - inputs:
    - '[Right "addab"]'
    output: Right []
  - inputs:
    - '[Left 6,Right "c",Right "cccac",Right "dddbd"]'
    output: Right []
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (maybeToList (listToMaybe (rights es)))
  sorted_examples:
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 8,Left 0,Right "aabda",Right "db",Left -2,Left 1]'
    output: Right ["aabda"]
  - inputs:
    - '[Right "bbc",Right "b",Left 6]'
    output: Right ["bbc"]
  - inputs:
    - '[Right "acac",Left 2,Left 5,Right "b",Right "ba"]'
    output: Right ["acac"]
  - inputs:
    - '[Left -2,Left 2,Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 1,Right "daaad",Right "",Right "daacc"]'
    output: Right ["daaad"]
  - inputs:
    - '[Left -1,Left 3,Left 4]'
    output: Right []
  - inputs:
    - '[Left 8,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "",Left 4]'
    output: Right [""]
  - inputs:
    - '[Right "cac",Left 1,Left 2,Left 5]'
    output: Right ["cac"]
  - inputs:
    - '[Left 10,Left 8]'
    output: Right []
  - inputs:
    - '[Right "ad",Right "bbcbaa",Right "bdddb",Left 4]'
    output: Right ["ad"]
  - inputs:
    - '[Left 8]'
    output: Right []
  - inputs:
    - '[Right "b",Right "bad"]'
    output: Right ["b"]
  - inputs:
    - '[Right "acacaa",Right "d",Left 7,Left 10]'
    output: Right ["acacaa"]
  - inputs:
    - '[Right "ccc",Right "da",Right "db"]'
    output: Right ["ccc"]
  unsorted_examples:
  - inputs:
    - '[Right "acacaa",Right "d",Left 7,Left 10]'
    output: Right ["acacaa"]
  - inputs:
    - '[Right "b",Right "bad"]'
    output: Right ["b"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "ccc",Right "da",Right "db"]'
    output: Right ["ccc"]
  - inputs:
    - '[Right "",Left 4]'
    output: Right [""]
  - inputs:
    - '[Right "bbc",Right "b",Left 6]'
    output: Right ["bbc"]
  - inputs:
    - '[Right "ad",Right "bbcbaa",Right "bdddb",Left 4]'
    output: Right ["ad"]
  - inputs:
    - '[Left 8]'
    output: Right []
  - inputs:
    - '[Left 8,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "cac",Left 1,Left 2,Left 5]'
    output: Right ["cac"]
  - inputs:
    - '[Left 1,Right "daaad",Right "",Right "daacc"]'
    output: Right ["daaad"]
  - inputs:
    - '[Left 10,Left 8]'
    output: Right []
  - inputs:
    - '[Left 8,Left 0,Right "aabda",Right "db",Left -2,Left 1]'
    output: Right ["aabda"]
  - inputs:
    - '[Left -2,Left 2,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "acac",Left 2,Left 5,Right "b",Right "ba"]'
    output: Right ["acac"]
  - inputs:
    - '[Left -1,Left 3,Left 4]'
    output: Right []
  control_examples:
  - inputs:
    - '[Right "acacaa",Right "d",Left 7,Left 10]'
    output: Right ["acacaa"]
  - inputs:
    - '[Right "b",Right "bad"]'
    output: Right ["b"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "ccc",Right "da",Right "db"]'
    output: Right ["ccc"]
  - inputs:
    - '[Right "",Left 4]'
    output: Right [""]
  - inputs:
    - '[Right "bbc",Right "b",Left 6]'
    output: Right ["bbc"]
  - inputs:
    - '[Right "ad",Right "bbcbaa",Right "bdddb",Left 4]'
    output: Right ["ad"]
  - inputs:
    - '[Left 8]'
    output: Right []
  - inputs:
    - '[Left 8,Right ""]'
    output: Right [""]
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "",Left 8,Left 1]'
    output: Right [""]
- name: rights
  query: 'es: [Either a b] -> Either a [b]'
  candidate: \es -> Right (rights (maybeToList (listToMaybe es)))
  sorted_examples:
  - inputs:
    - '[Left 8,Right ""]'
    output: Right []
  - inputs:
    - '[Right "",Right "ccd",Left 6,Left 0,Right "dcdcb",Right "cddcd"]'
    output: Right [""]
  - inputs:
    - '[Right "a",Left -1,Left 9,Left 5]'
    output: Right ["a"]
  - inputs:
    - '[Left 5,Right "adbca",Left 7,Left 9,Right ""]'
    output: Right []
  - inputs:
    - '[Left 3,Left -2,Right "cdb",Right "daa",Left 5]'
    output: Right []
  - inputs:
    - '[Right "dcacac",Left -2]'
    output: Right ["dcacac"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Right "b",Right "ccb",Right "cd"]'
    output: Right ["b"]
  - inputs:
    - '[Right "",Right "",Left 4,Right "cc",Left 3]'
    output: Right [""]
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Right "a",Right "d",Right "caa",Left 7,Right "ac"]'
    output: Right ["a"]
  - inputs:
    - '[Left 9,Right "bb",Left 8]'
    output: Right []
  - inputs:
    - '[Right "bc",Left 7,Right "d",Right "dc"]'
    output: Right ["bc"]
  - inputs:
    - '[Left -2,Left 8,Right ""]'
    output: Right []
  - inputs:
    - '[Right "",Left 4,Right "cab"]'
    output: Right [""]
  - inputs:
    - '[Right "acb",Right "bd"]'
    output: Right ["acb"]
  - inputs:
    - '[Right "aa",Right "",Left -2]'
    output: Right ["aa"]
  - inputs:
    - '[Left 7,Right "cdb",Right "ada"]'
    output: Right []
  unsorted_examples:
  - inputs:
    - '[Left 8,Right ""]'
    output: Right []
  - inputs:
    - '[Right "dcacac",Left -2]'
    output: Right ["dcacac"]
  - inputs:
    - '[Right "bc",Left 7,Right "d",Right "dc"]'
    output: Right ["bc"]
  - inputs:
    - '[Right "b",Right "ccb",Right "cd"]'
    output: Right ["b"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 9,Right "bb",Left 8]'
    output: Right []
  - inputs:
    - '[Right "acb",Right "bd"]'
    output: Right ["acb"]
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 7,Right "cdb",Right "ada"]'
    output: Right []
  - inputs:
    - '[Right "",Right "ccd",Left 6,Left 0,Right "dcdcb",Right "cddcd"]'
    output: Right [""]
  - inputs:
    - '[Left -2,Left 8,Right ""]'
    output: Right []
  - inputs:
    - '[Right "a",Right "d",Right "caa",Left 7,Right "ac"]'
    output: Right ["a"]
  - inputs:
    - '[Left 3,Left -2,Right "cdb",Right "daa",Left 5]'
    output: Right []
  - inputs:
    - '[Right "",Right "",Left 4,Right "cc",Left 3]'
    output: Right [""]
  - inputs:
    - '[Right "aa",Right "",Left -2]'
    output: Right ["aa"]
  - inputs:
    - '[Right "",Left 4,Right "cab"]'
    output: Right [""]
  - inputs:
    - '[Left 5,Right "adbca",Left 7,Left 9,Right ""]'
    output: Right []
  - inputs:
    - '[Right "a",Left -1,Left 9,Left 5]'
    output: Right ["a"]
  control_examples:
  - inputs:
    - '[Left 8,Right ""]'
    output: Right []
  - inputs:
    - '[Right "dcacac",Left -2]'
    output: Right ["dcacac"]
  - inputs:
    - '[Right "bc",Left 7,Right "d",Right "dc"]'
    output: Right ["bc"]
  - inputs:
    - '[Right "b",Right "ccb",Right "cd"]'
    output: Right ["b"]
  - inputs:
    - '[]'
    output: Right []
  - inputs:
    - '[Left 9,Right "bb",Left 8]'
    output: Right []
  - inputs:
    - '[Right "acb",Right "bd"]'
    output: Right ["acb"]
  - inputs:
    - '[Right ""]'
    output: Right [""]
  - inputs:
    - '[Left 7,Right "cdb",Right "ada"]'
    output: Right []
  - inputs:
    - '[Right "",Right "ccd",Left 6,Left 0,Right "dcdcb",Right "cddcd"]'
    output: Right [""]
  - inputs:
    - '[Left -2,Left 8,Right ""]'
    output: Right []
  - inputs:
    - '[Right "",Right "",Left 4,Right "cc",Left 3]'
    output: Right [""]
  - inputs:
    - '[Right "cbac",Right "aadbaa",Left 10]'
    output: Right ["cbac"]
  - inputs:
    - '[Left 4]'
    output: Right []
  - inputs:
    - '[Right "",Left 4,Right "cab"]'
    output: Right [""]
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> head es
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Right "abdab",Left 5,Left 4,Right "bdabdb",Left 4]'
    output: Left -1
  - inputs:
    - '[Right "",Right "aabac",Right "da",Right "bbd"]'
    output: Right ""
  - inputs:
    - '[Left 6,Left 0]'
    output: Left 6
  - inputs:
    - '[Right "aab",Right "bb"]'
    output: Right "aab"
  - inputs:
    - '[Left 4,Left 2,Left 2,Right "db"]'
    output: Left 4
  - inputs:
    - '[Left 6,Right "a",Right "",Right "bacbd",Right ""]'
    output: Left 6
  - inputs:
    - '[Left 10,Left 9,Left 10,Right "ab",Left 9,Right "cacd"]'
    output: Left 10
  - inputs:
    - '[Right "b",Left -2,Left 3]'
    output: Right "b"
  - inputs:
    - '[Left 6]'
    output: Left 6
  - inputs:
    - '[Right "ddcab",Right "cbcbcb",Left 7,Right "bcdacd",Left -2]'
    output: Right "ddcab"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "cb",Left 0,Left 9,Right "adbbaa"]'
    output: Right "cb"
  - inputs:
    - '[Left -1,Right "",Right "",Right "dbaa"]'
    output: Left -1
  - inputs:
    - '[Right "",Right "cbaa",Right "cbc"]'
    output: Right ""
  - inputs:
    - '[Left -1,Right "bcdcdb",Left 3]'
    output: Left -1
  - inputs:
    - '[Left 1,Right "acd",Left -1,Right "ab",Left 2]'
    output: Left 1
  - inputs:
    - '[Right "",Left 5,Right "bbbcd",Right "bdcbb"]'
    output: Right ""
  - inputs:
    - '[Right "",Left 3,Left 7,Left 9,Right ""]'
    output: Right ""
  - inputs:
    - '[Right "d",Right "a",Right "dc",Left 7]'
    output: Right "d"
  - inputs:
    - '[Left 0,Right ""]'
    output: Left 0
  - inputs:
    - '[Right "cdda",Right "",Right "",Right "",Left 7]'
    output: Right "cdda"
  - inputs:
    - '[Right "cb",Left -2]'
    output: Right "cb"
  - inputs:
    - '[Right "cdddd",Left 0,Right "bcdc"]'
    output: Right "cdddd"
  unsorted_examples:
  - inputs:
    - '[Left 0,Right ""]'
    output: Left 0
  - inputs:
    - '[Left -1,Right "bcdcdb",Left 3]'
    output: Left -1
  - inputs:
    - '[Left 6]'
    output: Left 6
  - inputs:
    - '[Right "cdddd",Left 0,Right "bcdc"]'
    output: Right "cdddd"
  - inputs:
    - '[Left 6,Left 0]'
    output: Left 6
  - inputs:
    - '[Left 1,Right "acd",Left -1,Right "ab",Left 2]'
    output: Left 1
  - inputs:
    - '[Right "",Right "cbaa",Right "cbc"]'
    output: Right ""
  - inputs:
    - '[Left 6,Right "a",Right "",Right "bacbd",Right ""]'
    output: Left 6
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "",Left 3,Left 7,Left 9,Right ""]'
    output: Right ""
  - inputs:
    - '[Right "aab",Right "bb"]'
    output: Right "aab"
  - inputs:
    - '[Left 4,Left 2,Left 2,Right "db"]'
    output: Left 4
  - inputs:
    - '[Right "cdda",Right "",Right "",Right "",Left 7]'
    output: Right "cdda"
  - inputs:
    - '[Left -1,Right "",Right "",Right "dbaa"]'
    output: Left -1
  - inputs:
    - '[Right "cb",Left -2]'
    output: Right "cb"
  - inputs:
    - '[Right "b",Left -2,Left 3]'
    output: Right "b"
  - inputs:
    - '[Right "ddcab",Right "cbcbcb",Left 7,Right "bcdacd",Left -2]'
    output: Right "ddcab"
  - inputs:
    - '[Right "",Right "aabac",Right "da",Right "bbd"]'
    output: Right ""
  - inputs:
    - '[Right "",Left 5,Right "bbbcd",Right "bdcbb"]'
    output: Right ""
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Right "abdab",Left 5,Left 4,Right "bdabdb",Left 4]'
    output: Left -1
  - inputs:
    - '[Right "d",Right "a",Right "dc",Left 7]'
    output: Right "d"
  - inputs:
    - '[Right "cb",Left 0,Left 9,Right "adbbaa"]'
    output: Right "cb"
  - inputs:
    - '[Left 10,Left 9,Left 10,Right "ab",Left 9,Right "cacd"]'
    output: Left 10
  control_examples:
  - inputs:
    - '[Left 0,Right ""]'
    output: Left 0
  - inputs:
    - '[Left -1,Right "bcdcdb",Left 3]'
    output: Left -1
  - inputs:
    - '[Left 6]'
    output: Left 6
  - inputs:
    - '[Right "cdddd",Left 0,Right "bcdc"]'
    output: Right "cdddd"
  - inputs:
    - '[Left 6,Left 0]'
    output: Left 6
  - inputs:
    - '[Left 1,Right "acd",Left -1,Right "ab",Left 2]'
    output: Left 1
  - inputs:
    - '[Right "",Right "cbaa",Right "cbc"]'
    output: Right ""
  - inputs:
    - '[Left 6,Right "a",Right "",Right "bacbd",Right ""]'
    output: Left 6
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "",Left 3,Left 7,Left 9,Right ""]'
    output: Right ""
  - inputs:
    - '[Right "aab",Right "bb"]'
    output: Right "aab"
  - inputs:
    - '[Left 4,Left 2,Left 2,Right "db"]'
    output: Left 4
  - inputs:
    - '[Right "cdda",Right "",Right "",Right "",Left 7]'
    output: Right "cdda"
  - inputs:
    - '[Left -1,Right "",Right "",Right "dbaa"]'
    output: Left -1
  - inputs:
    - '[Right "cb",Left -2]'
    output: Right "cb"
  - inputs:
    - '[Right "b",Left -2,Left 3]'
    output: Right "b"
  - inputs:
    - '[Right "ddcab",Right "cbcbcb",Left 7,Right "bcdacd",Left -2]'
    output: Right "ddcab"
  - inputs:
    - '[Right "",Right "aabac",Right "da",Right "bbd"]'
    output: Right ""
  - inputs:
    - '[Right "",Left 5,Right "bbbcd",Right "bdcbb"]'
    output: Right ""
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last es
  sorted_examples:
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "babcdb",Left 3,Right "aadadb",Right "",Left 9,Right "dca"]'
    output: Right "dca"
  - inputs:
    - '[Left -1,Right "bcdcdb",Left 3]'
    output: Left 3
  - inputs:
    - '[Right "babab",Right "b",Left 4,Left 6,Left 3,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "bacbb",Right "bad"]'
    output: Right "bad"
  - inputs:
    - '[Left 3]'
    output: Left 3
  - inputs:
    - '[Left 9,Left 0,Left 9,Right "aaab",Left 0]'
    output: Left 0
  - inputs:
    - '[Left 6,Left 7,Right "ccdc",Right "cdc"]'
    output: Right "cdc"
  - inputs:
    - '[Right "caadb",Right "",Left 4,Right "baccb"]'
    output: Right "baccb"
  - inputs:
    - '[Left 0,Right "ccbbda",Right "addbbb",Right "ada",Right "ccca",Right "bc"]'
    output: Right "bc"
  - inputs:
    - '[Right "adbccb",Left 1,Left 1,Left -2,Right "dcabda"]'
    output: Right "dcabda"
  - inputs:
    - '[Left 6,Right "cacd",Right "cdbda",Left 7,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "c",Right "cdda",Right "dadbca",Left 2,Left -1,Right "ccbc"]'
    output: Right "ccbc"
  - inputs:
    - '[Right "bba",Left -2,Left 9]'
    output: Left 9
  - inputs:
    - '[Right "",Right "bbdd",Right "",Left -1,Right "b"]'
    output: Right "b"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "cb",Right "aaddb",Left 4,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 9,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "d",Left -2,Right "ccdca"]'
    output: Right "ccdca"
  - inputs:
    - '[Right "",Left -2,Left 0,Left 9,Left 7]'
    output: Left 7
  - inputs:
    - '[Left -1,Left 1,Left 9]'
    output: Left 9
  - inputs:
    - '[Left 0,Right ""]'
    output: Right ""
  - inputs:
    - '[Right "dd",Left -2]'
    output: Left -2
  - inputs:
    - '[Right "ddbba",Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[Right "cadc",Right "ac",Right "",Right "c",Right ""]'
    output: Right ""
  - inputs:
    - '[Left 7,Right "cdbddd",Left 10,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 10,Right "aacbd",Right "cbbc",Right "cbd",Left 3]'
    output: Left 3
  unsorted_examples:
  - inputs:
    - '[Left 0,Right ""]'
    output: Right ""
  - inputs:
    - '[Left -1,Right "bcdcdb",Left 3]'
    output: Left 3
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "cb",Right "aaddb",Left 4,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "caadb",Right "",Left 4,Right "baccb"]'
    output: Right "baccb"
  - inputs:
    - '[Right "bacbb",Right "bad"]'
    output: Right "bad"
  - inputs:
    - '[Left 3]'
    output: Left 3
  - inputs:
    - '[Right "babcdb",Left 3,Right "aadadb",Right "",Left 9,Right "dca"]'
    output: Right "dca"
  - inputs:
    - '[Right "bba",Left -2,Left 9]'
    output: Left 9
  - inputs:
    - '[Left 6,Right "cacd",Right "cdbda",Left 7,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "ddbba",Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[Right "dd",Left -2]'
    output: Left -2
  - inputs:
    - '[Left 10,Right "aacbd",Right "cbbc",Right "cbd",Left 3]'
    output: Left 3
  - inputs:
    - '[Left 9,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "c",Right "cdda",Right "dadbca",Left 2,Left -1,Right "ccbc"]'
    output: Right "ccbc"
  - inputs:
    - '[Left 9,Left 0,Left 9,Right "aaab",Left 0]'
    output: Left 0
  - inputs:
    - '[Right "adbccb",Left 1,Left 1,Left -2,Right "dcabda"]'
    output: Right "dcabda"
  - inputs:
    - '[Right "cadc",Right "ac",Right "",Right "c",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "babab",Right "b",Left 4,Left 6,Left 3,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "d",Left -2,Right "ccdca"]'
    output: Right "ccdca"
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Right "bbdd",Right "",Left -1,Right "b"]'
    output: Right "b"
  - inputs:
    - '[Left 6,Left 7,Right "ccdc",Right "cdc"]'
    output: Right "cdc"
  - inputs:
    - '[Left 7,Right "cdbddd",Left 10,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "",Left -2,Left 0,Left 9,Left 7]'
    output: Left 7
  - inputs:
    - '[Left 0,Right "ccbbda",Right "addbbb",Right "ada",Right "ccca",Right "bc"]'
    output: Right "bc"
  - inputs:
    - '[Left -1,Left 1,Left 9]'
    output: Left 9
  control_examples:
  - inputs:
    - '[Left 0,Right ""]'
    output: Right ""
  - inputs:
    - '[Left -1,Right "bcdcdb",Left 3]'
    output: Left 3
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "cb",Right "aaddb",Left 4,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "caadb",Right "",Left 4,Right "baccb"]'
    output: Right "baccb"
  - inputs:
    - '[Right "bacbb",Right "bad"]'
    output: Right "bad"
  - inputs:
    - '[Left 3]'
    output: Left 3
  - inputs:
    - '[Right "babcdb",Left 3,Right "aadadb",Right "",Left 9,Right "dca"]'
    output: Right "dca"
  - inputs:
    - '[Right "bba",Left -2,Left 9]'
    output: Left 9
  - inputs:
    - '[Left 6,Right "cacd",Right "cdbda",Left 7,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "ddbba",Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[Right "dd",Left -2]'
    output: Left -2
  - inputs:
    - '[Left 10,Right "aacbd",Right "cbbc",Right "cbd",Left 3]'
    output: Left 3
  - inputs:
    - '[Left 9,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "c",Right "cdda",Right "dadbca",Left 2,Left -1,Right "ccbc"]'
    output: Right "ccbc"
  - inputs:
    - '[Left 9,Left 0,Left 9,Right "aaab",Left 0]'
    output: Left 0
  - inputs:
    - '[Right "adbccb",Left 1,Left 1,Left -2,Right "dcabda"]'
    output: Right "dcabda"
  - inputs:
    - '[Right "cadc",Right "ac",Right "",Right "c",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "babab",Right "b",Left 4,Left 6,Left 3,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "d",Left -2,Right "ccdca"]'
    output: Right "ccdca"
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Left -2,Left 0,Left 9,Left 7]'
    output: Left 7
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> head (init es)
  sorted_examples:
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "add",Right "",Left -2,Right "c",Left 8]'
    output: Right "add"
  - inputs:
    - '[Left 3,Left 4,Left 6,Left 1,Right ""]'
    output: Left 3
  - inputs:
    - '[Left 7,Right "cbdc",Right "baaaa",Right "bdba"]'
    output: Left 7
  - inputs:
    - '[Left 1,Left 10]'
    output: Left 1
  - inputs:
    - '[Right "dc",Right "adca",Left 5]'
    output: Right "dc"
  - inputs:
    - '[Left -1,Left 2,Right "daac",Left 8]'
    output: Left -1
  - inputs:
    - '[Right "dbadbc",Right "dddb",Right "accb",Right "ad",Right "dbccdc"]'
    output: Right "dbadbc"
  - inputs:
    - '[Right "cd",Left 5,Left 9,Right "acaa"]'
    output: Right "cd"
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 5,Left -1,Left -1]'
    output: Left 5
  - inputs:
    - '[Right "",Right "dbabbc"]'
    output: Right ""
  - inputs:
    - '[Right "",Right "",Right "bba",Left 5]'
    output: Right ""
  - inputs:
    - '[Right "dab",Left 2,Right "cbacd",Left 5,Right "acdcdb"]'
    output: Right "dab"
  - inputs:
    - '[Left 5,Right "",Right "acabdd",Left 3,Right ""]'
    output: Left 5
  - inputs:
    - '[Right "",Left 6,Left 9]'
    output: Right ""
  - inputs:
    - '[Right "cb",Right "aaddb",Left 4,Left 0]'
    output: Right "cb"
  - inputs:
    - '[Right "a",Right "bd",Right "ac"]'
    output: Right "a"
  - inputs:
    - '[Left 6,Right "ca"]'
    output: Left 6
  - inputs:
    - '[Left 2,Left 6,Right "bbbcda"]'
    output: Left 2
  - inputs:
    - '[Right "",Left 7,Right "adabd",Left 8]'
    output: Right ""
  - inputs:
    - '[Left 6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dc",Left 0]'
    output: Right "dc"
  - inputs:
    - '[Right "db",Right "c",Left 0,Right "a"]'
    output: Right "db"
  unsorted_examples:
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cb",Right "aaddb",Left 4,Left 0]'
    output: Right "cb"
  - inputs:
    - '[Left 6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 5,Right "",Right "acabdd",Left 3,Right ""]'
    output: Left 5
  - inputs:
    - '[Right "add",Right "",Left -2,Right "c",Left 8]'
    output: Right "add"
  - inputs:
    - '[Right "",Left 7,Right "adabd",Left 8]'
    output: Right ""
  - inputs:
    - '[Left 6,Right "ca"]'
    output: Left 6
  - inputs:
    - '[Right "dc",Left 0]'
    output: Right "dc"
  - inputs:
    - '[Right "",Right "dbabbc"]'
    output: Right ""
  - inputs:
    - '[Right "dab",Left 2,Right "cbacd",Left 5,Right "acdcdb"]'
    output: Right "dab"
  - inputs:
    - '[Left 1,Left 10]'
    output: Left 1
  - inputs:
    - '[Left 3,Left 4,Left 6,Left 1,Right ""]'
    output: Left 3
  - inputs:
    - '[Right "a",Right "bd",Right "ac"]'
    output: Right "a"
  - inputs:
    - '[Left -1,Left 2,Right "daac",Left 8]'
    output: Left -1
  - inputs:
    - '[Left 5,Left -1,Left -1]'
    output: Left 5
  - inputs:
    - '[Right "dbadbc",Right "dddb",Right "accb",Right "ad",Right "dbccdc"]'
    output: Right "dbadbc"
  - inputs:
    - '[Right "db",Right "c",Left 0,Right "a"]'
    output: Right "db"
  - inputs:
    - '[Right "dc",Right "adca",Left 5]'
    output: Right "dc"
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "",Right "",Right "bba",Left 5]'
    output: Right ""
  - inputs:
    - '[Left 7,Right "cbdc",Right "baaaa",Right "bdba"]'
    output: Left 7
  - inputs:
    - '[Right "cd",Left 5,Left 9,Right "acaa"]'
    output: Right "cd"
  - inputs:
    - '[Left 2,Left 6,Right "bbbcda"]'
    output: Left 2
  - inputs:
    - '[Right "",Left 6,Left 9]'
    output: Right ""
  control_examples:
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cb",Right "aaddb",Left 4,Left 0]'
    output: Right "cb"
  - inputs:
    - '[Left 6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 5,Right "",Right "acabdd",Left 3,Right ""]'
    output: Left 5
  - inputs:
    - '[Right "add",Right "",Left -2,Right "c",Left 8]'
    output: Right "add"
  - inputs:
    - '[Right "",Left 7,Right "adabd",Left 8]'
    output: Right ""
  - inputs:
    - '[Left 6,Right "ca"]'
    output: Left 6
  - inputs:
    - '[Right "dc",Left 0]'
    output: Right "dc"
  - inputs:
    - '[Right "",Right "dbabbc"]'
    output: Right ""
  - inputs:
    - '[Right "dab",Left 2,Right "cbacd",Left 5,Right "acdcdb"]'
    output: Right "dab"
  - inputs:
    - '[Left 1,Left 10]'
    output: Left 1
  - inputs:
    - '[Left 3,Left 4,Left 6,Left 1,Right ""]'
    output: Left 3
  - inputs:
    - '[Right "a",Right "bd",Right "ac"]'
    output: Right "a"
  - inputs:
    - '[Left -1,Left 2,Right "daac",Left 8]'
    output: Left -1
  - inputs:
    - '[Left 5,Left -1,Left -1]'
    output: Left 5
  - inputs:
    - '[Right "dbadbc",Right "dddb",Right "accb",Right "ad",Right "dbccdc"]'
    output: Right "dbadbc"
  - inputs:
    - '[Right "db",Right "c",Left 0,Right "a"]'
    output: Right "db"
  - inputs:
    - '[Right "dc",Right "adca",Left 5]'
    output: Right "dc"
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last (init es)
  sorted_examples:
  - inputs:
    - '[Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "dcaa",Right "dba",Left 2,Left -2,Left 2,Left -1]'
    output: Left 2
  - inputs:
    - '[Left 8,Right "bab",Right "abdbc",Right "c"]'
    output: Right "abdbc"
  - inputs:
    - '[Right "cad",Right "bdddc",Right "aadbc",Left 3,Right "cbad",Right ""]'
    output: Right "cbad"
  - inputs:
    - '[Left 6,Left 2]'
    output: Left 6
  - inputs:
    - '[Right "caadb",Right "",Left 4,Right "baccb"]'
    output: Left 4
  - inputs:
    - '[Left -1,Left 2,Right "dddcab",Left 4,Left 9,Right "acbdcd"]'
    output: Left 9
  - inputs:
    - '[Left 8,Left 5,Right "da",Right "dbdba",Left 7]'
    output: Right "dbdba"
  - inputs:
    - '[Left 3,Right "a",Left 2]'
    output: Right "a"
  - inputs:
    - '[Right "add",Right "",Left -2,Right "c",Left 8]'
    output: Right "c"
  - inputs:
    - '[Right "",Left 1,Left 10]'
    output: Left 1
  - inputs:
    - '[Right "bacbb",Right "bad"]'
    output: Right "bacbb"
  - inputs:
    - '[Right "aadc",Left 9,Right "",Right "bcd"]'
    output: Right ""
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "ccbda",Left 1,Left 8,Left 5,Left 4,Right "bdbaad"]'
    output: Left 4
  - inputs:
    - '[Right "cd",Right "bbdd",Left 6,Left 7,Left 4]'
    output: Left 7
  - inputs:
    - '[Left -2,Right "",Right "abca",Right "cba",Right "a"]'
    output: Right "cba"
  - inputs:
    - '[Left 5,Right "",Right "acabdd",Left 3,Right ""]'
    output: Left 3
  - inputs:
    - '[Left 2,Left 8,Left 5,Right "d",Left 6]'
    output: Right "d"
  - inputs:
    - '[Left 9,Right ""]'
    output: Left 9
  - inputs:
    - '[Left 5,Left 8,Right "bd",Right "bb"]'
    output: Right "bd"
  - inputs:
    - '[Right "cdddd",Left 0,Right "bcdc"]'
    output: Left 0
  - inputs:
    - '[Left -2,Right "",Left 2,Right "daa"]'
    output: Left 2
  - inputs:
    - '[Right "c",Left 7]'
    output: Right "c"
  - inputs:
    - '[Left -1,Right "dbcc",Right "b"]'
    output: Right "dbcc"
  - inputs:
    - '[Left 2,Right "cbcbba",Right "da",Left 1]'
    output: Right "da"
  - inputs:
    - '[Right "bc",Right "dd",Left 10]'
    output: Right "dd"
  unsorted_examples:
  - inputs:
    - '[Left 5,Right "",Right "acabdd",Left 3,Right ""]'
    output: Left 3
  - inputs:
    - '[Right "add",Right "",Left -2,Right "c",Left 8]'
    output: Right "c"
  - inputs:
    - '[Right "caadb",Right "",Left 4,Right "baccb"]'
    output: Left 4
  - inputs:
    - '[Right "bacbb",Right "bad"]'
    output: Right "bacbb"
  - inputs:
    - '[Right "cdddd",Left 0,Right "bcdc"]'
    output: Left 0
  - inputs:
    - '[Left 3,Right "a",Left 2]'
    output: Right "a"
  - inputs:
    - '[Left 6,Left 2]'
    output: Left 6
  - inputs:
    - '[Right "c",Left 7]'
    output: Right "c"
  - inputs:
    - '[Left -2,Right "",Left 2,Right "daa"]'
    output: Left 2
  - inputs:
    - '[Right "bc",Right "dd",Left 10]'
    output: Right "dd"
  - inputs:
    - '[Left 2,Right "cbcbba",Right "da",Left 1]'
    output: Right "da"
  - inputs:
    - '[Right "dcaa",Right "dba",Left 2,Left -2,Left 2,Left -1]'
    output: Left 2
  - inputs:
    - '[Right "cad",Right "bdddc",Right "aadbc",Left 3,Right "cbad",Right ""]'
    output: Right "cbad"
  - inputs:
    - '[Left 2,Left 8,Left 5,Right "d",Left 6]'
    output: Right "d"
  - inputs:
    - '[Left -2,Right "",Right "abca",Right "cba",Right "a"]'
    output: Right "cba"
  - inputs:
    - '[Left -1,Left 2,Right "dddcab",Left 4,Left 9,Right "acbdcd"]'
    output: Left 9
  - inputs:
    - '[Left -1,Right "dbcc",Right "b"]'
    output: Right "dbcc"
  - inputs:
    - '[Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Left 1,Left 10]'
    output: Left 1
  - inputs:
    - '[Right "cd",Right "bbdd",Left 6,Left 7,Left 4]'
    output: Left 7
  - inputs:
    - '[Left 8,Right "bab",Right "abdbc",Right "c"]'
    output: Right "abdbc"
  - inputs:
    - '[Right "aadc",Left 9,Right "",Right "bcd"]'
    output: Right ""
  - inputs:
    - '[Left 8,Left 5,Right "da",Right "dbdba",Left 7]'
    output: Right "dbdba"
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 5,Left 8,Right "bd",Right "bb"]'
    output: Right "bd"
  - inputs:
    - '[Right "ccbda",Left 1,Left 8,Left 5,Left 4,Right "bdbaad"]'
    output: Left 4
  - inputs:
    - '[Left 9,Right ""]'
    output: Left 9
  control_examples:
  - inputs:
    - '[Left 5,Right "",Right "acabdd",Left 3,Right ""]'
    output: Left 3
  - inputs:
    - '[Right "add",Right "",Left -2,Right "c",Left 8]'
    output: Right "c"
  - inputs:
    - '[Right "caadb",Right "",Left 4,Right "baccb"]'
    output: Left 4
  - inputs:
    - '[Right "bacbb",Right "bad"]'
    output: Right "bacbb"
  - inputs:
    - '[Right "cdddd",Left 0,Right "bcdc"]'
    output: Left 0
  - inputs:
    - '[Left 3,Right "a",Left 2]'
    output: Right "a"
  - inputs:
    - '[Left 6,Left 2]'
    output: Left 6
  - inputs:
    - '[Right "c",Left 7]'
    output: Right "c"
  - inputs:
    - '[Left -2,Right "",Left 2,Right "daa"]'
    output: Left 2
  - inputs:
    - '[Right "bc",Right "dd",Left 10]'
    output: Right "dd"
  - inputs:
    - '[Left 2,Right "cbcbba",Right "da",Left 1]'
    output: Right "da"
  - inputs:
    - '[Right "dcaa",Right "dba",Left 2,Left -2,Left 2,Left -1]'
    output: Left 2
  - inputs:
    - '[Right "cad",Right "bdddc",Right "aadbc",Left 3,Right "cbad",Right ""]'
    output: Right "cbad"
  - inputs:
    - '[Left 2,Left 8,Left 5,Right "d",Left 6]'
    output: Right "d"
  - inputs:
    - '[Left -2,Right "",Right "abca",Right "cba",Right "a"]'
    output: Right "cba"
  - inputs:
    - '[Left -1,Left 2,Right "dddcab",Left 4,Left 9,Right "acbdcd"]'
    output: Left 9
  - inputs:
    - '[Left -1,Right "dbcc",Right "b"]'
    output: Right "dbcc"
  - inputs:
    - '[Right ""]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Left 1,Left 10]'
    output: Left 1
  - inputs:
    - '[Right "cd",Right "bbdd",Left 6,Left 7,Left 4]'
    output: Left 7
  - inputs:
    - '[Left 8,Right "bab",Right "abdbc",Right "c"]'
    output: Right "abdbc"
  - inputs:
    - '[Right "aadc",Left 9,Right "",Right "bcd"]'
    output: Right ""
  - inputs:
    - '[Left 8,Left 5,Right "da",Right "dbdba",Left 7]'
    output: Right "dbdba"
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> head (tail es)
  sorted_examples:
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "aadb",Right "cbcd",Left 6,Left 10,Left 10,Right "cccacb"]'
    output: Right "cbcd"
  - inputs:
    - '[Right "ac",Left 0,Right "bbad",Right "dc",Left 3]'
    output: Left 0
  - inputs:
    - '[Right "c",Right "ba",Left 1]'
    output: Right "ba"
  - inputs:
    - '[Left -1,Left 2,Left 6,Left 8]'
    output: Left 2
  - inputs:
    - '[Right "b",Left 5,Right "cababc"]'
    output: Left 5
  - inputs:
    - '[Left 3,Right "cdcdd",Left 1,Left 2,Right "aaad",Left 1]'
    output: Right "cdcdd"
  - inputs:
    - '[Left 6,Left 2]'
    output: Left 2
  - inputs:
    - '[Left 3,Right "",Right "bd",Left -2]'
    output: Right ""
  - inputs:
    - '[Right "bbca",Right "accab",Left 9,Right "c",Left 10]'
    output: Right "accab"
  - inputs:
    - '[Left 8,Right "aa",Right "bccb"]'
    output: Right "aa"
  - inputs:
    - '[Left 3,Right "a"]'
    output: Right "a"
  - inputs:
    - '[Right "",Left 7,Right "adabd",Left 8]'
    output: Left 7
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "dc",Left 7,Left -2,Left 1,Left 4]'
    output: Left 7
  - inputs:
    - '[Left 1,Right "acd",Left -1,Right "ab",Left 2]'
    output: Right "acd"
  - inputs:
    - '[Right "",Left 8,Left 3]'
    output: Left 8
  - inputs:
    - '[Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 8,Left 8,Right "adda",Left 4]'
    output: Left 8
  - inputs:
    - '[Left 8,Left 10,Left 6,Left 7,Left 4]'
    output: Left 10
  - inputs:
    - '[Right "",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "bb",Left 2]'
    output: Left 2
  unsorted_examples:
  - inputs:
    - '[Left 6,Left 2]'
    output: Left 2
  - inputs:
    - '[Right "",Left 7,Right "adabd",Left 8]'
    output: Left 7
  - inputs:
    - '[Right "bbca",Right "accab",Left 9,Right "c",Left 10]'
    output: Right "accab"
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 1,Right "acd",Left -1,Right "ab",Left 2]'
    output: Right "acd"
  - inputs:
    - '[Left -1,Left 2,Left 6,Left 8]'
    output: Left 2
  - inputs:
    - '[Right "c",Right "ba",Left 1]'
    output: Right "ba"
  - inputs:
    - '[Right "",Left 8,Left 3]'
    output: Left 8
  - inputs:
    - '[Right "dc",Left 7,Left -2,Left 1,Left 4]'
    output: Left 7
  - inputs:
    - '[Left 3,Right "a"]'
    output: Right "a"
  - inputs:
    - '[Left 3,Right "cdcdd",Left 1,Left 2,Right "aaad",Left 1]'
    output: Right "cdcdd"
  - inputs:
    - '[Right "",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "b",Left 5,Right "cababc"]'
    output: Left 5
  - inputs:
    - '[Right "ac",Left 0,Right "bbad",Right "dc",Left 3]'
    output: Left 0
  - inputs:
    - '[Right "aadb",Right "cbcd",Left 6,Left 10,Left 10,Right "cccacb"]'
    output: Right "cbcd"
  - inputs:
    - '[Right "bb",Left 2]'
    output: Left 2
  - inputs:
    - '[Left 3,Right "",Right "bd",Left -2]'
    output: Right ""
  - inputs:
    - '[Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 8,Left 10,Left 6,Left 7,Left 4]'
    output: Left 10
  - inputs:
    - '[Left 8,Left 8,Right "adda",Left 4]'
    output: Left 8
  - inputs:
    - '[Left 8,Right "aa",Right "bccb"]'
    output: Right "aa"
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  control_examples:
  - inputs:
    - '[Left 6,Left 2]'
    output: Left 2
  - inputs:
    - '[Right "",Left 7,Right "adabd",Left 8]'
    output: Left 7
  - inputs:
    - '[Right "bbca",Right "accab",Left 9,Right "c",Left 10]'
    output: Right "accab"
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 1,Right "acd",Left -1,Right "ab",Left 2]'
    output: Right "acd"
  - inputs:
    - '[Left -1,Left 2,Left 6,Left 8]'
    output: Left 2
  - inputs:
    - '[Right "c",Right "ba",Left 1]'
    output: Right "ba"
  - inputs:
    - '[Right "",Left 8,Left 3]'
    output: Left 8
  - inputs:
    - '[Right "dc",Left 7,Left -2,Left 1,Left 4]'
    output: Left 7
  - inputs:
    - '[Left 3,Right "a"]'
    output: Right "a"
  - inputs:
    - '[Left 3,Right "cdcdd",Left 1,Left 2,Right "aaad",Left 1]'
    output: Right "cdcdd"
  - inputs:
    - '[Right "",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "b",Left 5,Right "cababc"]'
    output: Left 5
  - inputs:
    - '[Right "ac",Left 0,Right "bbad",Right "dc",Left 3]'
    output: Left 0
  - inputs:
    - '[Right "aadb",Right "cbcd",Left 6,Left 10,Left 10,Right "cccacb"]'
    output: Right "cbcd"
  - inputs:
    - '[Right "bb",Left 2]'
    output: Left 2
  - inputs:
    - '[Left 3,Right "",Right "bd",Left -2]'
    output: Right ""
  - inputs:
    - '[Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 8,Left 10,Left 6,Left 7,Left 4]'
    output: Left 10
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last (tail es)
  sorted_examples:
  - inputs:
    - '[Right "aa"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 6,Right "a",Right "",Right "bacbd",Right ""]'
    output: Right ""
  - inputs:
    - '[Right "addcc",Left 6,Right "aaacca",Left 3,Left 7]'
    output: Left 7
  - inputs:
    - '[Left 2,Left 7]'
    output: Left 7
  - inputs:
    - '[Right "dbdcaa",Left -1,Right ""]'
    output: Right ""
  - inputs:
    - '[Left 5,Left 9,Left 4,Right "",Left 10]'
    output: Left 10
  - inputs:
    - '[Left 1,Left 6,Right "",Right "adddd"]'
    output: Right "adddd"
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "c",Right "ba",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "dac",Right "ddd"]'
    output: Right "ddd"
  - inputs:
    - '[Right "acc",Left 3,Left -1,Right "a"]'
    output: Right "a"
  - inputs:
    - '[Left 2,Right "",Left 8,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "",Right "bcba",Right "dc",Right "cdcbc"]'
    output: Right "cdcbc"
  - inputs:
    - '[Left 6,Right "ca"]'
    output: Right "ca"
  - inputs:
    - '[Right "c",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Right "cbcbba",Right "",Left 6,Left -1]'
    output: Left -1
  - inputs:
    - '[Right "bbc",Left 4,Left 5]'
    output: Left 5
  - inputs:
    - '[Left 4,Left 10,Right "bcb"]'
    output: Right "bcb"
  - inputs:
    - '[Right "",Right "cbaa",Right "cbc"]'
    output: Right "cbc"
  - inputs:
    - '[Left -1,Left 2,Left 6,Left 8]'
    output: Left 8
  unsorted_examples:
  - inputs:
    - '[Left -1,Left 2,Left 6,Left 8]'
    output: Left 8
  - inputs:
    - '[Right "c",Right "ba",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "c",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "dbdcaa",Left -1,Right ""]'
    output: Right ""
  - inputs:
    - '[Left 6,Right "ca"]'
    output: Right "ca"
  - inputs:
    - '[Right "aa"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Right "cbaa",Right "cbc"]'
    output: Right "cbc"
  - inputs:
    - '[Left 6,Right "a",Right "",Right "bacbd",Right ""]'
    output: Right ""
  - inputs:
    - '[Left 2,Left 7]'
    output: Left 7
  - inputs:
    - '[Right "addcc",Left 6,Right "aaacca",Left 3,Left 7]'
    output: Left 7
  - inputs:
    - '[Left 5,Left 9,Left 4,Right "",Left 10]'
    output: Left 10
  - inputs:
    - '[Right "dac",Right "ddd"]'
    output: Right "ddd"
  - inputs:
    - '[Right "",Right "cbcbba",Right "",Left 6,Left -1]'
    output: Left -1
  - inputs:
    - '[Left 1,Left 6,Right "",Right "adddd"]'
    output: Right "adddd"
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "",Right "bcba",Right "dc",Right "cdcbc"]'
    output: Right "cdcbc"
  - inputs:
    - '[Left 4,Left 10,Right "bcb"]'
    output: Right "bcb"
  - inputs:
    - '[Left 2,Right "",Left 8,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "bbc",Left 4,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "acc",Left 3,Left -1,Right "a"]'
    output: Right "a"
  control_examples:
  - inputs:
    - '[Left -1,Left 2,Left 6,Left 8]'
    output: Left 8
  - inputs:
    - '[Right "c",Right "ba",Left 1]'
    output: Left 1
  - inputs:
    - '[Right "c",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "dbdcaa",Left -1,Right ""]'
    output: Right ""
  - inputs:
    - '[Left 6,Right "ca"]'
    output: Right "ca"
  - inputs:
    - '[Right "aa"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Right "cbaa",Right "cbc"]'
    output: Right "cbc"
  - inputs:
    - '[Left 6,Right "a",Right "",Right "bacbd",Right ""]'
    output: Right ""
  - inputs:
    - '[Left 2,Left 7]'
    output: Left 7
  - inputs:
    - '[Right "addcc",Left 6,Right "aaacca",Left 3,Left 7]'
    output: Left 7
  - inputs:
    - '[Left 5,Left 9,Left 4,Right "",Left 10]'
    output: Left 10
  - inputs:
    - '[Right "dac",Right "ddd"]'
    output: Right "ddd"
  - inputs:
    - '[Right "",Right "cbcbba",Right "",Left 6,Left -1]'
    output: Left -1
  - inputs:
    - '[Left 1,Left 6,Right "",Right "adddd"]'
    output: Right "adddd"
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "b",Left 7,Left 6]'
    output: Left 6
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> head (init (init es))
  sorted_examples:
  - inputs:
    - '[Left 2,Left 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "babcdb",Left 3,Right "aadadb",Right "",Left 9,Right "dca"]'
    output: Right "babcdb"
  - inputs:
    - '[Left -2,Right "",Left 2,Right "daa"]'
    output: Left -2
  - inputs:
    - '[Right "acdd",Left 1,Left 6,Left 3]'
    output: Right "acdd"
  - inputs:
    - '[Right "baca",Left 5,Right "aaaa"]'
    output: Right "baca"
  - inputs:
    - '[Right ""]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "bc",Right "dd",Left 10]'
    output: Right "bc"
  - inputs:
    - '[Left 4,Left 0,Left 0]'
    output: Left 4
  - inputs:
    - '[Left 7,Left 6,Left 10,Right "",Left 10,Left 5]'
    output: Left 7
  - inputs:
    - '[Right "",Right "d",Right "da",Right "accd"]'
    output: Right ""
  - inputs:
    - '[Left 7,Right "da",Right "",Left 4]'
    output: Left 7
  - inputs:
    - '[Left -2,Left 3,Right "bcca",Right "ab"]'
    output: Left -2
  - inputs:
    - '[Left 1,Left 7,Right "",Left -2,Right "bdddad"]'
    output: Left 1
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "",Right "dbabbc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dc",Left 7,Left -2,Left 1,Left 4]'
    output: Right "dc"
  - inputs:
    - '[Left 1,Right "",Left -1,Left 8]'
    output: Left 1
  - inputs:
    - '[Left 4,Right "ccc",Right ""]'
    output: Left 4
  - inputs:
    - '[Right "ccdb",Right "dcd",Left 5,Left 7,Left 10]'
    output: Right "ccdb"
  - inputs:
    - '[Right "bd",Left 2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "addcc",Left 6,Right "aaacca",Left 3,Left 7]'
    output: Right "addcc"
  - inputs:
    - '[Left 3,Right "abcaa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Left 8,Left 3]'
    output: Right ""
  - inputs:
    - '[Left 7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "cbcb",Right "cd",Right "bba",Left 9]'
    output: Right "cbcb"
  - inputs:
    - '[Right "cd",Right "bcc",Left 2,Right "cabda"]'
    output: Right "cd"
  unsorted_examples:
  - inputs:
    - '[Left 2,Left 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "addcc",Left 6,Right "aaacca",Left 3,Left 7]'
    output: Right "addcc"
  - inputs:
    - '[Right "",Left 8,Left 3]'
    output: Right ""
  - inputs:
    - '[Right "dc",Left 7,Left -2,Left 1,Left 4]'
    output: Right "dc"
  - inputs:
    - '[Left -2,Right "",Left 2,Right "daa"]'
    output: Left -2
  - inputs:
    - '[Right "bc",Right "dd",Left 10]'
    output: Right "bc"
  - inputs:
    - '[Right "",Right "dbabbc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "babcdb",Left 3,Right "aadadb",Right "",Left 9,Right "dca"]'
    output: Right "babcdb"
  - inputs:
    - '[Right ""]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "cbcb",Right "cd",Right "bba",Left 9]'
    output: Right "cbcb"
  - inputs:
    - '[Left 1,Right "",Left -1,Left 8]'
    output: Left 1
  - inputs:
    - '[Right "ccdb",Right "dcd",Left 5,Left 7,Left 10]'
    output: Right "ccdb"
  - inputs:
    - '[Right "",Right "d",Right "da",Right "accd"]'
    output: Right ""
  - inputs:
    - '[Right "cd",Right "bcc",Left 2,Right "cabda"]'
    output: Right "cd"
  - inputs:
    - '[Left 7,Left 6,Left 10,Right "",Left 10,Left 5]'
    output: Left 7
  - inputs:
    - '[Right "acdd",Left 1,Left 6,Left 3]'
    output: Right "acdd"
  - inputs:
    - '[Left 7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 1,Left 7,Right "",Left -2,Right "bdddad"]'
    output: Left 1
  - inputs:
    - '[Left -2,Left 3,Right "bcca",Right "ab"]'
    output: Left -2
  - inputs:
    - '[Left 3,Right "abcaa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "baca",Left 5,Right "aaaa"]'
    output: Right "baca"
  - inputs:
    - '[Left 4,Left 0,Left 0]'
    output: Left 4
  - inputs:
    - '[Left 7,Right "da",Right "",Left 4]'
    output: Left 7
  - inputs:
    - '[Right "bd",Left 2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 4,Right "ccc",Right ""]'
    output: Left 4
  control_examples:
  - inputs:
    - '[Left 2,Left 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "addcc",Left 6,Right "aaacca",Left 3,Left 7]'
    output: Right "addcc"
  - inputs:
    - '[Right "",Left 8,Left 3]'
    output: Right ""
  - inputs:
    - '[Right "dc",Left 7,Left -2,Left 1,Left 4]'
    output: Right "dc"
  - inputs:
    - '[Left -2,Right "",Left 2,Right "daa"]'
    output: Left -2
  - inputs:
    - '[Right "bc",Right "dd",Left 10]'
    output: Right "bc"
  - inputs:
    - '[Right "",Right "dbabbc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "babcdb",Left 3,Right "aadadb",Right "",Left 9,Right "dca"]'
    output: Right "babcdb"
  - inputs:
    - '[Right ""]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "cbcb",Right "cd",Right "bba",Left 9]'
    output: Right "cbcb"
  - inputs:
    - '[Left 1,Right "",Left -1,Left 8]'
    output: Left 1
  - inputs:
    - '[Right "ccdb",Right "dcd",Left 5,Left 7,Left 10]'
    output: Right "ccdb"
  - inputs:
    - '[Right "",Right "d",Right "da",Right "accd"]'
    output: Right ""
  - inputs:
    - '[Right "cd",Right "bcc",Left 2,Right "cabda"]'
    output: Right "cd"
  - inputs:
    - '[Left 7,Left 6,Left 10,Right "",Left 10,Left 5]'
    output: Left 7
  - inputs:
    - '[Right "acdd",Left 1,Left 6,Left 3]'
    output: Right "acdd"
  - inputs:
    - '[Left 7]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 1,Left 7,Right "",Left -2,Right "bdddad"]'
    output: Left 1
  - inputs:
    - '[Left -2,Left 3,Right "bcca",Right "ab"]'
    output: Left -2
  - inputs:
    - '[Left 3,Right "abcaa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "baca",Left 5,Right "aaaa"]'
    output: Right "baca"
  - inputs:
    - '[Left 4,Left 0,Left 0]'
    output: Left 4
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last (init (init es))
  sorted_examples:
  - inputs:
    - '[Left 2,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left -1,Left 0,Left -1,Right "",Left 9,Right "ddc"]'
    output: Right ""
  - inputs:
    - '[Right "b",Right "da",Right "cbac",Right "daa"]'
    output: Right "da"
  - inputs:
    - '[Right "ccbaba",Right "d",Left 2,Left 8,Right "acbb"]'
    output: Left 2
  - inputs:
    - '[Right "aabbd",Left 0,Left 0]'
    output: Right "aabbd"
  - inputs:
    - '[Left -1,Right "daac",Left 6,Right "aaddb",Left 9]'
    output: Left 6
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 8,Right "bb",Left 3]'
    output: Left 8
  - inputs:
    - '[Left 6,Right "cacd",Right "cdbda",Left 7,Left 10]'
    output: Right "cdbda"
  - inputs:
    - '[Right "cdac",Left 10,Right "ac",Left 2,Right "d"]'
    output: Right "ac"
  - inputs:
    - '[Right "cabd",Left 2,Right "b",Left -1]'
    output: Left 2
  - inputs:
    - '[Left 5,Left 1,Right ""]'
    output: Left 5
  - inputs:
    - '[Right "bddc",Right "c"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "bd",Right "a",Right "bab"]'
    output: Right "bd"
  - inputs:
    - '[Left 1,Right "",Left -1,Left 8]'
    output: Right ""
  - inputs:
    - '[Right ""]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 3,Right "cdcdd",Left 1,Left 2,Right "aaad",Left 1]'
    output: Left 2
  - inputs:
    - '[Left 3,Right "a"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Left 3,Left 7,Left 9,Right ""]'
    output: Left 7
  - inputs:
    - '[Left -2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 8,Right "ddc",Right "dcbcda"]'
    output: Left 8
  - inputs:
    - '[Right "cbcb",Right "cd",Right "bba",Left 9]'
    output: Right "cd"
  - inputs:
    - '[Left 5,Left 9,Left 4,Right "",Left 10]'
    output: Left 4
  - inputs:
    - '[Left 10,Left 4,Left 10]'
    output: Left 10
  - inputs:
    - '[Left 2,Right "cbcbba",Right "da",Left 1]'
    output: Right "cbcbba"
  - inputs:
    - '[Right "aaaab",Left 2,Right "ccbcca"]'
    output: Right "aaaab"
  - inputs:
    - '[Right "ca",Left 5]'
    output: 'Prelude.last: empty list'
  unsorted_examples:
  - inputs:
    - '[Right "cbcb",Right "cd",Right "bba",Left 9]'
    output: Right "cd"
  - inputs:
    - '[Left 1,Right "",Left -1,Left 8]'
    output: Right ""
  - inputs:
    - '[Left 2,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 5,Left 9,Left 4,Right "",Left 10]'
    output: Left 4
  - inputs:
    - '[Left 3,Right "a"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 3,Right "cdcdd",Left 1,Left 2,Right "aaad",Left 1]'
    output: Left 2
  - inputs:
    - '[Right "ca",Left 5]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 2,Right "cbcbba",Right "da",Left 1]'
    output: Right "cbcbba"
  - inputs:
    - '[Right "bddc",Right "c"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 6,Right "cacd",Right "cdbda",Left 7,Left 10]'
    output: Right "cdbda"
  - inputs:
    - '[Right "aabbd",Left 0,Left 0]'
    output: Right "aabbd"
  - inputs:
    - '[Right "",Left 3,Left 7,Left 9,Right ""]'
    output: Left 7
  - inputs:
    - '[Left -1,Right "daac",Left 6,Right "aaddb",Left 9]'
    output: Left 6
  - inputs:
    - '[Right "aaaab",Left 2,Right "ccbcca"]'
    output: Right "aaaab"
  - inputs:
    - '[Left 10,Left 4,Left 10]'
    output: Left 10
  - inputs:
    - '[Left -1,Left 0,Left -1,Right "",Left 9,Right "ddc"]'
    output: Right ""
  - inputs:
    - '[Right "cabd",Left 2,Right "b",Left -1]'
    output: Left 2
  - inputs:
    - '[Right "bd",Right "a",Right "bab"]'
    output: Right "bd"
  - inputs:
    - '[Right "cdac",Left 10,Right "ac",Left 2,Right "d"]'
    output: Right "ac"
  - inputs:
    - '[Left 8,Right "bb",Left 3]'
    output: Left 8
  - inputs:
    - '[Right ""]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 8,Right "ddc",Right "dcbcda"]'
    output: Left 8
  - inputs:
    - '[Right "ccbaba",Right "d",Left 2,Left 8,Right "acbb"]'
    output: Left 2
  - inputs:
    - '[Right "b",Right "da",Right "cbac",Right "daa"]'
    output: Right "da"
  - inputs:
    - '[Left -2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 5,Left 1,Right ""]'
    output: Left 5
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  control_examples:
  - inputs:
    - '[Right "cbcb",Right "cd",Right "bba",Left 9]'
    output: Right "cd"
  - inputs:
    - '[Left 1,Right "",Left -1,Left 8]'
    output: Right ""
  - inputs:
    - '[Left 2,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 5,Left 9,Left 4,Right "",Left 10]'
    output: Left 4
  - inputs:
    - '[Left 3,Right "a"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 3,Right "cdcdd",Left 1,Left 2,Right "aaad",Left 1]'
    output: Left 2
  - inputs:
    - '[Right "ca",Left 5]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 2,Right "cbcbba",Right "da",Left 1]'
    output: Right "cbcbba"
  - inputs:
    - '[Right "bddc",Right "c"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 6,Right "cacd",Right "cdbda",Left 7,Left 10]'
    output: Right "cdbda"
  - inputs:
    - '[Right "aabbd",Left 0,Left 0]'
    output: Right "aabbd"
  - inputs:
    - '[Right "",Left 3,Left 7,Left 9,Right ""]'
    output: Left 7
  - inputs:
    - '[Left -1,Right "daac",Left 6,Right "aaddb",Left 9]'
    output: Left 6
  - inputs:
    - '[Right "aaaab",Left 2,Right "ccbcca"]'
    output: Right "aaaab"
  - inputs:
    - '[Left 10,Left 4,Left 10]'
    output: Left 10
  - inputs:
    - '[Left -1,Left 0,Left -1,Right "",Left 9,Right "ddc"]'
    output: Right ""
  - inputs:
    - '[Right "cabd",Left 2,Right "b",Left -1]'
    output: Left 2
  - inputs:
    - '[Right "bd",Right "a",Right "bab"]'
    output: Right "bd"
  - inputs:
    - '[Right "cdac",Left 10,Right "ac",Left 2,Right "d"]'
    output: Right "ac"
  - inputs:
    - '[Left 8,Right "bb",Left 3]'
    output: Left 8
  - inputs:
    - '[Right ""]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 8,Right "ddc",Right "dcbcda"]'
    output: Left 8
  - inputs:
    - '[Right "ccbaba",Right "d",Left 2,Left 8,Right "acbb"]'
    output: Left 2
  - inputs:
    - '[Right "b",Right "da",Right "cbac",Right "daa"]'
    output: Right "da"
  - inputs:
    - '[Left -2]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 9,Left 1,Right ""]'
    output: Left 9
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> head (tail (init es))
  sorted_examples:
  - inputs:
    - '[Left 5,Right "aa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dcaa",Right "dba",Left 2,Left -2,Left 2,Left -1]'
    output: Right "dba"
  - inputs:
    - '[Left 2,Left 2,Right "bb",Left -1]'
    output: Left 2
  - inputs:
    - '[Left 3,Left 9,Left 4,Left 1,Left 10,Right "c"]'
    output: Left 9
  - inputs:
    - '[Right "",Right "acc",Left 3,Right "bd"]'
    output: Right "acc"
  - inputs:
    - '[Right "dd",Right "babc",Right "abbd",Left 4,Left 3]'
    output: Right "babc"
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "aaaab",Left 2,Right "ccbcca"]'
    output: Left 2
  - inputs:
    - '[Right "caabbd",Left 7,Left 10,Left 2,Left 5]'
    output: Left 7
  - inputs:
    - '[Left 2,Right "ccaad",Left 9,Left 0]'
    output: Right "ccaad"
  - inputs:
    - '[Left -1,Right "bbbb",Right "ca"]'
    output: Right "bbbb"
  - inputs:
    - '[Right "dbca",Left 1,Right "cdbadc",Right "dbdc",Left 0]'
    output: Left 1
  - inputs:
    - '[Left 3]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "dab",Left 2,Right "cbacd",Left 5,Right "acdcdb"]'
    output: Left 2
  - inputs:
    - '[Right "",Left 3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "ddbba",Right "",Left 3]'
    output: Right ""
  - inputs:
    - '[Left 10,Left 4,Left 10]'
    output: Left 4
  - inputs:
    - '[Right "bcd",Left 10,Left -1,Right "bccdd"]'
    output: Left 10
  - inputs:
    - '[Right "bacba",Right "",Right "babcd",Left 6]'
    output: Right ""
  - inputs:
    - '[Left -1,Left 0,Right "cd",Right ""]'
    output: Left 0
  - inputs:
    - '[Left 9,Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dbc",Right "",Right "b"]'
    output: Right ""
  - inputs:
    - '[Right "ccdb",Right "dcd",Left 5,Left 7,Left 10]'
    output: Right "dcd"
  - inputs:
    - '[Right "",Left 6,Left 3]'
    output: Left 6
  - inputs:
    - '[Right "",Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right ""]'
    output: 'Prelude.tail: empty list'
  unsorted_examples:
  - inputs:
    - '[Right "aaaab",Left 2,Right "ccbcca"]'
    output: Left 2
  - inputs:
    - '[Left 10,Left 4,Left 10]'
    output: Left 4
  - inputs:
    - '[Right "caabbd",Left 7,Left 10,Left 2,Left 5]'
    output: Left 7
  - inputs:
    - '[Right "ccdb",Right "dcd",Left 5,Left 7,Left 10]'
    output: Right "dcd"
  - inputs:
    - '[Left 5,Right "aa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 9,Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dcaa",Right "dba",Left 2,Left -2,Left 2,Left -1]'
    output: Right "dba"
  - inputs:
    - '[Right "",Left 3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dab",Left 2,Right "cbacd",Left 5,Right "acdcdb"]'
    output: Left 2
  - inputs:
    - '[Right ""]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "ddbba",Right "",Left 3]'
    output: Right ""
  - inputs:
    - '[Left 2,Left 2,Right "bb",Left -1]'
    output: Left 2
  - inputs:
    - '[Right "",Right "acc",Left 3,Right "bd"]'
    output: Right "acc"
  - inputs:
    - '[Left 3,Left 9,Left 4,Left 1,Left 10,Right "c"]'
    output: Left 9
  - inputs:
    - '[Right "dd",Right "babc",Right "abbd",Left 4,Left 3]'
    output: Right "babc"
  - inputs:
    - '[Right "dbca",Left 1,Right "cdbadc",Right "dbdc",Left 0]'
    output: Left 1
  - inputs:
    - '[Left 2,Right "ccaad",Left 9,Left 0]'
    output: Right "ccaad"
  - inputs:
    - '[Right "bcd",Left 10,Left -1,Right "bccdd"]'
    output: Left 10
  - inputs:
    - '[Left 3]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "bacba",Right "",Right "babcd",Left 6]'
    output: Right ""
  - inputs:
    - '[Right "",Left 6,Left 3]'
    output: Left 6
  - inputs:
    - '[Left -1,Right "bbbb",Right "ca"]'
    output: Right "bbbb"
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "dbc",Right "",Right "b"]'
    output: Right ""
  - inputs:
    - '[Left -1,Left 0,Right "cd",Right ""]'
    output: Left 0
  control_examples:
  - inputs:
    - '[Right "aaaab",Left 2,Right "ccbcca"]'
    output: Left 2
  - inputs:
    - '[Left 10,Left 4,Left 10]'
    output: Left 4
  - inputs:
    - '[Right "caabbd",Left 7,Left 10,Left 2,Left 5]'
    output: Left 7
  - inputs:
    - '[Right "ccdb",Right "dcd",Left 5,Left 7,Left 10]'
    output: Right "dcd"
  - inputs:
    - '[Left 5,Right "aa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 9,Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dcaa",Right "dba",Left 2,Left -2,Left 2,Left -1]'
    output: Right "dba"
  - inputs:
    - '[Right "",Left 3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dab",Left 2,Right "cbacd",Left 5,Right "acdcdb"]'
    output: Left 2
  - inputs:
    - '[Right ""]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "ddbba",Right "",Left 3]'
    output: Right ""
  - inputs:
    - '[Left 2,Left 2,Right "bb",Left -1]'
    output: Left 2
  - inputs:
    - '[Right "",Right "acc",Left 3,Right "bd"]'
    output: Right "acc"
  - inputs:
    - '[Left 3,Left 9,Left 4,Left 1,Left 10,Right "c"]'
    output: Left 9
  - inputs:
    - '[Right "dd",Right "babc",Right "abbd",Left 4,Left 3]'
    output: Right "babc"
  - inputs:
    - '[Right "dbca",Left 1,Right "cdbadc",Right "dbdc",Left 0]'
    output: Left 1
  - inputs:
    - '[Left 2,Right "ccaad",Left 9,Left 0]'
    output: Right "ccaad"
  - inputs:
    - '[Right "bcd",Left 10,Left -1,Right "bccdd"]'
    output: Left 10
  - inputs:
    - '[Left 3]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "bacba",Right "",Right "babcd",Left 6]'
    output: Right ""
  - inputs:
    - '[Right "",Left 6,Left 3]'
    output: Left 6
  - inputs:
    - '[Left -1,Right "bbbb",Right "ca"]'
    output: Right "bbbb"
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last (tail (init es))
  sorted_examples:
  - inputs:
    - '[Right "dac",Right "ddd"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Right "",Right "accaa",Left 10,Right "accaa"]'
    output: Left 10
  - inputs:
    - '[Left 3,Left 8,Right ""]'
    output: Left 8
  - inputs:
    - '[Left 3,Left -1,Right "cba",Right "b",Right "acd"]'
    output: Right "b"
  - inputs:
    - '[Right "",Left 4,Left 7,Left 6,Right "bcb",Left 7]'
    output: Right "bcb"
  - inputs:
    - '[Left -1,Left 0,Left -1,Right "",Left 9,Right "ddc"]'
    output: Left 9
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "cdda",Right "",Right "",Right "",Left 7]'
    output: Right ""
  - inputs:
    - '[Left 2,Left 2,Right "bb",Left -1]'
    output: Right "bb"
  - inputs:
    - '[Left 9,Right "ad",Right "bcb",Right "ddab",Left 6,Left 10]'
    output: Left 6
  - inputs:
    - '[Right "aacd",Right "a",Right "acdd"]'
    output: Right "a"
  - inputs:
    - '[Right "dddaac",Left 0,Right "db",Left 6,Left 10]'
    output: Left 6
  - inputs:
    - '[Left 8,Left 4,Right "dbac",Left -2,Right "babb"]'
    output: Left -2
  - inputs:
    - '[Left 6,Right "abacd",Left 8]'
    output: Right "abacd"
  - inputs:
    - '[Right "",Right "d",Right "da",Right "accd"]'
    output: Right "da"
  - inputs:
    - '[Right "dccbb",Right "",Left 0,Left -2,Left 7]'
    output: Left -2
  - inputs:
    - '[Left 4,Left 2,Left 2,Right "db"]'
    output: Left 2
  - inputs:
    - '[Left 9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left -2,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Right "acc",Left 3,Right "bd"]'
    output: Left 3
  - inputs:
    - '[Left 6,Left 1,Left 3,Right "bbc",Right "c",Right "bca"]'
    output: Right "c"
  - inputs:
    - '[Right "bbdddd",Left 5,Right "da"]'
    output: Left 5
  - inputs:
    - '[Right "",Left 6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "cabd",Left 2,Right "b",Left -1]'
    output: Right "b"
  - inputs:
    - '[Right "c"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "",Right "cb",Left -2]'
    output: Right "cb"
  - inputs:
    - '[Left 7,Right "d"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 3,Right "bbcad",Right "bdcca"]'
    output: Right "bbcad"
  unsorted_examples:
  - inputs:
    - '[Left 2,Left 2,Right "bb",Left -1]'
    output: Right "bb"
  - inputs:
    - '[Right "",Right "acc",Left 3,Right "bd"]'
    output: Left 3
  - inputs:
    - '[Left -1,Left 0,Left -1,Right "",Left 9,Right "ddc"]'
    output: Left 9
  - inputs:
    - '[Right "cabd",Left 2,Right "b",Left -1]'
    output: Right "b"
  - inputs:
    - '[Right "dccbb",Right "",Left 0,Left -2,Left 7]'
    output: Left -2
  - inputs:
    - '[Right "",Right "d",Right "da",Right "accd"]'
    output: Right "da"
  - inputs:
    - '[Right "bbdddd",Left 5,Right "da"]'
    output: Left 5
  - inputs:
    - '[Right "dac",Right "ddd"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 7,Right "d"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left -2,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Left 6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "c"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 4,Left 2,Left 2,Right "db"]'
    output: Left 2
  - inputs:
    - '[Right "cdda",Right "",Right "",Right "",Left 7]'
    output: Right ""
  - inputs:
    - '[Right "aacd",Right "a",Right "acdd"]'
    output: Right "a"
  - inputs:
    - '[Left 3,Right "bbcad",Right "bdcca"]'
    output: Right "bbcad"
  - inputs:
    - '[Left 9,Right "ad",Right "bcb",Right "ddab",Left 6,Left 10]'
    output: Left 6
  - inputs:
    - '[Right "",Right "",Right "accaa",Left 10,Right "accaa"]'
    output: Left 10
  - inputs:
    - '[Right "",Left 4,Left 7,Left 6,Right "bcb",Left 7]'
    output: Right "bcb"
  - inputs:
    - '[Left 3,Left 8,Right ""]'
    output: Left 8
  - inputs:
    - '[Right "dddaac",Left 0,Right "db",Left 6,Left 10]'
    output: Left 6
  - inputs:
    - '[Left 6,Right "abacd",Left 8]'
    output: Right "abacd"
  - inputs:
    - '[Left 3,Left -1,Right "cba",Right "b",Right "acd"]'
    output: Right "b"
  - inputs:
    - '[Left 9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Left 6,Left 1,Left 3,Right "bbc",Right "c",Right "bca"]'
    output: Right "c"
  - inputs:
    - '[Right "",Right "cb",Left -2]'
    output: Right "cb"
  - inputs:
    - '[Left 8,Left 4,Right "dbac",Left -2,Right "babb"]'
    output: Left -2
  control_examples:
  - inputs:
    - '[Left 2,Left 2,Right "bb",Left -1]'
    output: Right "bb"
  - inputs:
    - '[Right "",Right "acc",Left 3,Right "bd"]'
    output: Left 3
  - inputs:
    - '[Left -1,Left 0,Left -1,Right "",Left 9,Right "ddc"]'
    output: Left 9
  - inputs:
    - '[Right "cabd",Left 2,Right "b",Left -1]'
    output: Right "b"
  - inputs:
    - '[Right "dccbb",Right "",Left 0,Left -2,Left 7]'
    output: Left -2
  - inputs:
    - '[Right "",Right "d",Right "da",Right "accd"]'
    output: Right "da"
  - inputs:
    - '[Right "bbdddd",Left 5,Right "da"]'
    output: Left 5
  - inputs:
    - '[Right "dac",Right "ddd"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 7,Right "d"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left -2,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Left 6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "c"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 4,Left 2,Left 2,Right "db"]'
    output: Left 2
  - inputs:
    - '[Right "cdda",Right "",Right "",Right "",Left 7]'
    output: Right ""
  - inputs:
    - '[Right "aacd",Right "a",Right "acdd"]'
    output: Right "a"
  - inputs:
    - '[Left 3,Right "bbcad",Right "bdcca"]'
    output: Right "bbcad"
  - inputs:
    - '[Left 9,Right "ad",Right "bcb",Right "ddab",Left 6,Left 10]'
    output: Left 6
  - inputs:
    - '[Right "",Right "",Right "accaa",Left 10,Right "accaa"]'
    output: Left 10
  - inputs:
    - '[Right "",Left 4,Left 7,Left 6,Right "bcb",Left 7]'
    output: Right "bcb"
  - inputs:
    - '[Left 3,Left 8,Right ""]'
    output: Left 8
  - inputs:
    - '[Right "dddaac",Left 0,Right "db",Left 6,Left 10]'
    output: Left 6
  - inputs:
    - '[Left 6,Right "abacd",Left 8]'
    output: Right "abacd"
  - inputs:
    - '[Left 3,Left -1,Right "cba",Right "b",Right "acd"]'
    output: Right "b"
  - inputs:
    - '[Left 9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.init: empty list'
  - inputs:
    - '[Right "",Right "cb",Left -2]'
    output: Right "cb"
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> head (tail (tail es))
  sorted_examples:
  - inputs:
    - '[Right "c",Right "bb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 3,Left 4,Left 6,Left 1,Right ""]'
    output: Left 6
  - inputs:
    - '[Left 10,Right "aacbd",Right "cbbc",Right "cbd",Left 3]'
    output: Right "cbbc"
  - inputs:
    - '[Right "b",Left 7,Left 10]'
    output: Left 10
  - inputs:
    - '[Left 3,Right "b",Left 9,Right "aa"]'
    output: Left 9
  - inputs:
    - '[Right "aacd",Right "a",Right "acdd"]'
    output: Right "acdd"
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "ccbaba",Left 1,Left -1,Right "dcc",Left 3,Left 4]'
    output: Left -1
  - inputs:
    - '[Right "cad",Right "bdddc",Right "aadbc",Left 3,Right "cbad",Right ""]'
    output: Right "aadbc"
  - inputs:
    - '[Right "ca",Left 7,Left 10,Left 1]'
    output: Left 10
  - inputs:
    - '[Right "b",Left 8,Right "acdccc",Right "d",Right "cbb"]'
    output: Right "acdccc"
  - inputs:
    - '[Right "dd",Right "babc",Right "abbd",Left 4,Left 3]'
    output: Right "abbd"
  - inputs:
    - '[Left 6,Left 4]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bb",Left 5,Right "abcdc",Left 3]'
    output: Right "abcdc"
  - inputs:
    - '[Left 9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 3,Left 9,Left 4,Left 1,Left 10,Right "c"]'
    output: Left 4
  - inputs:
    - '[Left 2,Left 8,Left 5,Right "d",Left 6]'
    output: Left 5
  - inputs:
    - '[Left -1,Left 8,Left 8,Left 4]'
    output: Left 8
  - inputs:
    - '[Left 7,Right "acacc",Right "cdd",Left -1,Left 2,Right "acdcaa"]'
    output: Right "cdd"
  - inputs:
    - '[Right "b",Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Left 6,Left 10,Left 0,Left 9]'
    output: Left 10
  - inputs:
    - '[Right "bdc"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "cd",Right "bcc",Left 2,Right "cabda"]'
    output: Left 2
  - inputs:
    - '[Left 9,Right "daacc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "a",Left 1,Right "babc",Right "bdd"]'
    output: Right "babc"
  - inputs:
    - '[Right "aa",Right "bc",Left 5,Left 6]'
    output: Left 5
  - inputs:
    - '[Left 9,Right "dccac",Right "abbbb",Left 0,Left 0]'
    output: Right "abbbb"
  - inputs:
    - '[Right "b",Left 5,Right "cababc"]'
    output: Right "cababc"
  - inputs:
    - '[Left 3,Right "bbcad",Right "bdcca"]'
    output: Right "bdcca"
  - inputs:
    - '[Left 0,Right "dc",Right "abd",Right "",Right ""]'
    output: Right "abd"
  unsorted_examples:
  - inputs:
    - '[Right "aacd",Right "a",Right "acdd"]'
    output: Right "acdd"
  - inputs:
    - '[Left 3,Right "bbcad",Right "bdcca"]'
    output: Right "bdcca"
  - inputs:
    - '[Left 3,Left 9,Left 4,Left 1,Left 10,Right "c"]'
    output: Left 4
  - inputs:
    - '[Right "dd",Right "babc",Right "abbd",Left 4,Left 3]'
    output: Right "abbd"
  - inputs:
    - '[Right "bb",Left 5,Right "abcdc",Left 3]'
    output: Right "abcdc"
  - inputs:
    - '[Left 3,Right "b",Left 9,Right "aa"]'
    output: Left 9
  - inputs:
    - '[Right "cd",Right "bcc",Left 2,Right "cabda"]'
    output: Left 2
  - inputs:
    - '[Right "c",Right "bb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left 8,Left 8,Left 4]'
    output: Left 8
  - inputs:
    - '[Left 6,Left 4]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Left 5,Right "cababc"]'
    output: Right "cababc"
  - inputs:
    - '[Right "cad",Right "bdddc",Right "aadbc",Left 3,Right "cbad",Right ""]'
    output: Right "aadbc"
  - inputs:
    - '[Left 2,Left 8,Left 5,Right "d",Left 6]'
    output: Left 5
  - inputs:
    - '[Left 3,Left 4,Left 6,Left 1,Right ""]'
    output: Left 6
  - inputs:
    - '[Left 10,Right "aacbd",Right "cbbc",Right "cbd",Left 3]'
    output: Right "cbbc"
  - inputs:
    - '[Left 9,Right "daacc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bdc"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "ca",Left 7,Left 10,Left 1]'
    output: Left 10
  - inputs:
    - '[Right "a",Left 1,Right "babc",Right "bdd"]'
    output: Right "babc"
  - inputs:
    - '[Left 0,Right "dc",Right "abd",Right "",Right ""]'
    output: Right "abd"
  - inputs:
    - '[Right "",Left 6,Left 10,Left 0,Left 9]'
    output: Left 10
  - inputs:
    - '[Right "ccbaba",Left 1,Left -1,Right "dcc",Left 3,Left 4]'
    output: Left -1
  - inputs:
    - '[Left 7,Right "acacc",Right "cdd",Left -1,Left 2,Right "acdcaa"]'
    output: Right "cdd"
  - inputs:
    - '[Left 9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 9,Right "dccac",Right "abbbb",Left 0,Left 0]'
    output: Right "abbbb"
  - inputs:
    - '[Right "b",Left 8,Right "acdccc",Right "d",Right "cbb"]'
    output: Right "acdccc"
  - inputs:
    - '[Right "b",Left 7,Left 10]'
    output: Left 10
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "aa",Right "bc",Left 5,Left 6]'
    output: Left 5
  - inputs:
    - '[Right "b",Left -2]'
    output: 'Prelude.head: empty list'
  control_examples:
  - inputs:
    - '[Right "aacd",Right "a",Right "acdd"]'
    output: Right "acdd"
  - inputs:
    - '[Left 3,Right "bbcad",Right "bdcca"]'
    output: Right "bdcca"
  - inputs:
    - '[Left 3,Left 9,Left 4,Left 1,Left 10,Right "c"]'
    output: Left 4
  - inputs:
    - '[Right "dd",Right "babc",Right "abbd",Left 4,Left 3]'
    output: Right "abbd"
  - inputs:
    - '[Right "bb",Left 5,Right "abcdc",Left 3]'
    output: Right "abcdc"
  - inputs:
    - '[Left 3,Right "b",Left 9,Right "aa"]'
    output: Left 9
  - inputs:
    - '[Right "cd",Right "bcc",Left 2,Right "cabda"]'
    output: Left 2
  - inputs:
    - '[Right "c",Right "bb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left 8,Left 8,Left 4]'
    output: Left 8
  - inputs:
    - '[Left 6,Left 4]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Left 5,Right "cababc"]'
    output: Right "cababc"
  - inputs:
    - '[Right "cad",Right "bdddc",Right "aadbc",Left 3,Right "cbad",Right ""]'
    output: Right "aadbc"
  - inputs:
    - '[Left 2,Left 8,Left 5,Right "d",Left 6]'
    output: Left 5
  - inputs:
    - '[Left 3,Left 4,Left 6,Left 1,Right ""]'
    output: Left 6
  - inputs:
    - '[Left 10,Right "aacbd",Right "cbbc",Right "cbd",Left 3]'
    output: Right "cbbc"
  - inputs:
    - '[Left 9,Right "daacc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bdc"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "ca",Left 7,Left 10,Left 1]'
    output: Left 10
  - inputs:
    - '[Right "a",Left 1,Right "babc",Right "bdd"]'
    output: Right "babc"
  - inputs:
    - '[Left 0,Right "dc",Right "abd",Right "",Right ""]'
    output: Right "abd"
  - inputs:
    - '[Right "",Left 6,Left 10,Left 0,Left 9]'
    output: Left 10
  - inputs:
    - '[Right "ccbaba",Left 1,Left -1,Right "dcc",Left 3,Left 4]'
    output: Left -1
  - inputs:
    - '[Left 7,Right "acacc",Right "cdd",Left -1,Left 2,Right "acdcaa"]'
    output: Right "cdd"
  - inputs:
    - '[Left 9]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 9,Right "dccac",Right "abbbb",Left 0,Left 0]'
    output: Right "abbbb"
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 6,Left 6,Left 6]'
    output: Left 6
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> last (tail (tail es))
  sorted_examples:
  - inputs:
    - '[Left 6,Right "dddb"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 3,Right "adccc",Left 7,Left 5,Right "a",Left 10]'
    output: Left 10
  - inputs:
    - '[Right "cdac",Left 10,Right "ac",Left 2,Right "d"]'
    output: Right "d"
  - inputs:
    - '[Left 6,Left 6,Left 10]'
    output: Left 10
  - inputs:
    - '[Left -2,Right "",Right "abca",Right "cba",Right "a"]'
    output: Right "a"
  - inputs:
    - '[Left 1,Right "",Right "bc"]'
    output: Right "bc"
  - inputs:
    - '[Left 9,Right "ad",Right "bcb",Right "ddab",Left 6,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "dbca",Left 1,Right "cdbadc",Right "dbdc",Left 0]'
    output: Left 0
  - inputs:
    - '[Right "aa",Left 6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Right "d",Left 2]'
    output: Left 2
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 7,Left 6,Left 10,Right "",Left 10,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "dab",Right "bdbacc",Left 0,Left 1,Right "bbbcdd"]'
    output: Right "bbbcdd"
  - inputs:
    - '[Right "bddb",Left -1,Right "dcaba"]'
    output: Right "dcaba"
  - inputs:
    - '[Right "d"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "a",Left 1,Right "babc",Right "bdd"]'
    output: Right "bdd"
  - inputs:
    - '[Left 2,Right "ccaad",Left 9,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "bccd",Left 0,Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[Left -1,Right "",Right "",Right "dbaa"]'
    output: Right "dbaa"
  - inputs:
    - '[Left 6,Left 2,Right "abd"]'
    output: Right "abd"
  - inputs:
    - '[Right "a",Right "ba"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "ca",Left 7,Left 10,Left 1]'
    output: Left 1
  - inputs:
    - '[Right "bda",Right "cdb",Right "ba"]'
    output: Right "ba"
  - inputs:
    - '[Right "",Right "",Right "accaa",Left 10,Right "accaa"]'
    output: Right "accaa"
  - inputs:
    - '[Left -1,Left 2,Right "daac",Left 8]'
    output: Left 8
  - inputs:
    - '[Left 4]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 6,Left 2]'
    output: 'Prelude.last: empty list'
  unsorted_examples:
  - inputs:
    - '[Right "ca",Left 7,Left 10,Left 1]'
    output: Left 1
  - inputs:
    - '[Right "a",Left 1,Right "babc",Right "bdd"]'
    output: Right "bdd"
  - inputs:
    - '[Left 9,Right "ad",Right "bcb",Right "ddab",Left 6,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "",Right "",Right "accaa",Left 10,Right "accaa"]'
    output: Right "accaa"
  - inputs:
    - '[Right "dbca",Left 1,Right "cdbadc",Right "dbdc",Left 0]'
    output: Left 0
  - inputs:
    - '[Left 2,Right "ccaad",Left 9,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "bccd",Left 0,Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[Right "cdac",Left 10,Right "ac",Left 2,Right "d"]'
    output: Right "d"
  - inputs:
    - '[Left 7,Left 6,Left 10,Right "",Left 10,Left 5]'
    output: Left 5
  - inputs:
    - '[Left 6,Right "dddb"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "aa",Left 6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 6,Left 2]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left -2,Right "",Right "abca",Right "cba",Right "a"]'
    output: Right "a"
  - inputs:
    - '[Left -1,Left 2,Right "daac",Left 8]'
    output: Left 8
  - inputs:
    - '[Left 4]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left -1,Right "",Right "",Right "dbaa"]'
    output: Right "dbaa"
  - inputs:
    - '[Right "bddb",Left -1,Right "dcaba"]'
    output: Right "dcaba"
  - inputs:
    - '[Right "dab",Right "bdbacc",Left 0,Left 1,Right "bbbcdd"]'
    output: Right "bbbcdd"
  - inputs:
    - '[Left 1,Right "",Right "bc"]'
    output: Right "bc"
  - inputs:
    - '[Right "d"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "bda",Right "cdb",Right "ba"]'
    output: Right "ba"
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left 6,Left 6,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "a",Right "ba"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 3,Right "adccc",Left 7,Left 5,Right "a",Left 10]'
    output: Left 10
  - inputs:
    - '[Right "",Right "d",Left 2]'
    output: Left 2
  - inputs:
    - '[Left 6,Left 2,Right "abd"]'
    output: Right "abd"
  control_examples:
  - inputs:
    - '[Right "ca",Left 7,Left 10,Left 1]'
    output: Left 1
  - inputs:
    - '[Right "a",Left 1,Right "babc",Right "bdd"]'
    output: Right "bdd"
  - inputs:
    - '[Left 9,Right "ad",Right "bcb",Right "ddab",Left 6,Left 10]'
    output: Left 10
  - inputs:
    - '[Right "",Right "",Right "accaa",Left 10,Right "accaa"]'
    output: Right "accaa"
  - inputs:
    - '[Right "dbca",Left 1,Right "cdbadc",Right "dbdc",Left 0]'
    output: Left 0
  - inputs:
    - '[Left 2,Right "ccaad",Left 9,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "bccd",Left 0,Right "",Left 3]'
    output: Left 3
  - inputs:
    - '[Right "cdac",Left 10,Right "ac",Left 2,Right "d"]'
    output: Right "d"
  - inputs:
    - '[Left 7,Left 6,Left 10,Right "",Left 10,Left 5]'
    output: Left 5
  - inputs:
    - '[Left 6,Right "dddb"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "aa",Left 6]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 6,Left 2]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left -2,Right "",Right "abca",Right "cba",Right "a"]'
    output: Right "a"
  - inputs:
    - '[Left -1,Left 2,Right "daac",Left 8]'
    output: Left 8
  - inputs:
    - '[Left 4]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Left -1,Right "",Right "",Right "dbaa"]'
    output: Right "dbaa"
  - inputs:
    - '[Right "bddb",Left -1,Right "dcaba"]'
    output: Right "dcaba"
  - inputs:
    - '[Right "dab",Right "bdbacc",Left 0,Left 1,Right "bbbcdd"]'
    output: Right "bbbcdd"
  - inputs:
    - '[Left 1,Right "",Right "bc"]'
    output: Right "bc"
  - inputs:
    - '[Right "d"]'
    output: 'Prelude.tail: empty list'
  - inputs:
    - '[Right "bda",Right "cdb",Right "ba"]'
    output: Right "ba"
  - inputs:
    - '[]'
    output: 'Prelude.tail: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> foldl1 (head []) es
  sorted_examples:
  - inputs:
    - '[Right "dab",Right "bdbacc",Left 0,Left 1,Right "bbbcdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 6,Right "acbb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 9,Left 0,Left 9,Right "aaab",Left 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bcadac",Right "bdcda",Right "ddda",Right "baabcd",Left 8,Left 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 3]'
    output: Left 3
  - inputs:
    - '[Left 0,Right "dc",Right "abd",Right "",Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dccb",Left -2,Right "bdaac",Left 8,Left 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.foldl1: empty list'
  - inputs:
    - '[Right "ad",Right "",Left 8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b"]'
    output: Right "b"
  - inputs:
    - '[Left -1,Right "bc",Left 10,Left 0,Left 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left 3,Right "bbdd",Left 10,Right "cb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 3,Left 5,Left 10]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left 2,Right "dddcab",Left 4,Left 9,Right "acbdcd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Right "daacda",Left 9,Left -1,Right "cd",Left 6]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cb",Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dddc",Left 4,Right "",Left 10]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 1,Right "",Right "bc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "c",Right "cdda",Right "dadbca",Left 2,Left -1,Right "ccbc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bcd",Left 10,Left -1,Right "bccdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Right "",Left 8,Right "",Right "cc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "abcac",Right "ddbdabc",Right "b",Right "ba"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 8,Right "bb",Left 3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Left 4,Left 7,Left 6,Right "bcb",Left 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "aadb",Right "cbcd",Left 6,Left 10,Left 10,Right "cccacb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left -2,Left 7,Right "dda",Right "c"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 3,Left 8,Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Left -2,Left 3]'
    output: 'Prelude.head: empty list'
  unsorted_examples:
  - inputs:
    - '[Right "dab",Right "bdbacc",Left 0,Left 1,Right "bbbcdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 1,Right "",Right "bc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b"]'
    output: Right "b"
  - inputs:
    - '[Left 0,Right "dc",Right "abd",Right "",Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Left 4,Left 7,Left 6,Right "bcb",Left 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 3,Left 8,Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bcd",Left 10,Left -1,Right "bccdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 3]'
    output: Left 3
  - inputs:
    - '[Left 8,Right "bb",Left 3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dddc",Left 4,Right "",Left 10]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dccb",Left -2,Right "bdaac",Left 8,Left 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "aadb",Right "cbcd",Left 6,Left 10,Left 10,Right "cccacb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left 2,Right "dddcab",Left 4,Left 9,Right "acbdcd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 6,Right "acbb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "c",Right "cdda",Right "dadbca",Left 2,Left -1,Right "ccbc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 9,Left 0,Left 9,Right "aaab",Left 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cb",Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Left -2,Left 3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Right "",Left 8,Right "",Right "cc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "ad",Right "",Left 8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left -2,Left 7,Right "dda",Right "c"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bcadac",Right "bdcda",Right "ddda",Right "baabcd",Left 8,Left 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Right "bc",Left 10,Left 0,Left 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "abcac",Right "ddbdabc",Right "b",Right "ba"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left 3,Right "bbdd",Left 10,Right "cb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.foldl1: empty list'
  - inputs:
    - '[Left 3,Left 5,Left 10]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Right "daacda",Left 9,Left -1,Right "cd",Left 6]'
    output: 'Prelude.head: empty list'
  control_examples:
  - inputs:
    - '[Right "dab",Right "bdbacc",Left 0,Left 1,Right "bbbcdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 1,Right "",Right "bc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b"]'
    output: Right "b"
  - inputs:
    - '[Left 0,Right "dc",Right "abd",Right "",Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Left 4,Left 7,Left 6,Right "bcb",Left 7]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 3,Left 8,Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bcd",Left 10,Left -1,Right "bccdd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 3]'
    output: Left 3
  - inputs:
    - '[Left 8,Right "bb",Left 3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dddc",Left 4,Right "",Left 10]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "dccb",Left -2,Right "bdaac",Left 8,Left 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "aadb",Right "cbcd",Left 6,Left 10,Left 10,Right "cccacb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left 2,Right "dddcab",Left 4,Left 9,Right "acbdcd"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 6,Right "acbb"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "c",Right "cdda",Right "dadbca",Left 2,Left -1,Right "ccbc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 9,Left 0,Left 9,Right "aaab",Left 0]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cb",Left -2]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Left -2,Left 3]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Right "",Left 8,Right "",Right "cc"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "ad",Right "",Left 8]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -1,Left -2,Left 7,Right "dda",Right "c"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[]'
    output: 'Prelude.foldl1: empty list'
  - inputs:
    - '[Left 7,Left 10]'
    output: 'Prelude.head: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> Right (head (rights es))
  sorted_examples:
  - inputs:
    - '[Left 10]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "acba",Left -2,Right "b",Left 4]'
    output: Right "acba"
  - inputs:
    - '[Right "cadc",Right "ac",Right "",Right "c",Right ""]'
    output: Right "cadc"
  - inputs:
    - '[Left 9,Right "",Left -2,Left 1]'
    output: Right ""
  - inputs:
    - '[Left 5,Left -1,Left -1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -2,Right "bd"]'
    output: Right "bd"
  - inputs:
    - '[Left 1,Left 7,Right "",Left -2,Right "bdddad"]'
    output: Right ""
  - inputs:
    - '[Right "dcbda",Left 4,Left 5,Right "b",Right ""]'
    output: Right "dcbda"
  - inputs:
    - '[Right "abcbd",Right "",Left -2,Left 6,Left 1]'
    output: Right "abcbd"
  - inputs:
    - '[Left 8,Right "",Left 6,Right "a",Right "cbd"]'
    output: Right ""
  - inputs:
    - '[Left 8,Right "ddc",Right "dcbcda"]'
    output: Right "ddc"
  - inputs:
    - '[Right "bd",Right "aaba",Left 0,Right "a"]'
    output: Right "bd"
  - inputs:
    - '[Right "bb",Left 2]'
    output: Right "bb"
  - inputs:
    - '[Left -2,Left 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Left 6,Left 3]'
    output: Right ""
  - inputs:
    - '[Right "d"]'
    output: Right "d"
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -2,Left 3,Right "bcca",Right "ab"]'
    output: Right "bcca"
  - inputs:
    - '[Right "adbccb",Left 1,Left 1,Left -2,Right "dcabda"]'
    output: Right "adbccb"
  - inputs:
    - '[Left 9,Left 4,Right "bca"]'
    output: Right "bca"
  - inputs:
    - '[Right "bacba",Right "",Right "babcd",Left 6]'
    output: Right "bacba"
  - inputs:
    - '[Right "",Left 6,Left 10,Left 0,Left 9]'
    output: Right ""
  - inputs:
    - '[Right "",Right "aa"]'
    output: Right ""
  - inputs:
    - '[Right "d",Left 7,Left 7,Left 5]'
    output: Right "d"
  unsorted_examples:
  - inputs:
    - '[Left 10]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "d"]'
    output: Right "d"
  - inputs:
    - '[Right "",Left 6,Left 10,Left 0,Left 9]'
    output: Right ""
  - inputs:
    - '[Right "bacba",Right "",Right "babcd",Left 6]'
    output: Right "bacba"
  - inputs:
    - '[Right "",Left 6,Left 3]'
    output: Right ""
  - inputs:
    - '[Left 8,Right "ddc",Right "dcbcda"]'
    output: Right "ddc"
  - inputs:
    - '[Left 1,Left 7,Right "",Left -2,Right "bdddad"]'
    output: Right ""
  - inputs:
    - '[Left -2,Left 3,Right "bcca",Right "ab"]'
    output: Right "bcca"
  - inputs:
    - '[Right "bb",Left 2]'
    output: Right "bb"
  - inputs:
    - '[Left 5,Left -1,Left -1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -2,Right "bd"]'
    output: Right "bd"
  - inputs:
    - '[Right "adbccb",Left 1,Left 1,Left -2,Right "dcabda"]'
    output: Right "adbccb"
  - inputs:
    - '[Right "cadc",Right "ac",Right "",Right "c",Right ""]'
    output: Right "cadc"
  - inputs:
    - '[Left -2,Left 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Right "aa"]'
    output: Right ""
  - inputs:
    - '[Right "dcbda",Left 4,Left 5,Right "b",Right ""]'
    output: Right "dcbda"
  - inputs:
    - '[Right "d",Left 7,Left 7,Left 5]'
    output: Right "d"
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 8,Right "",Left 6,Right "a",Right "cbd"]'
    output: Right ""
  - inputs:
    - '[Right "abcbd",Right "",Left -2,Left 6,Left 1]'
    output: Right "abcbd"
  - inputs:
    - '[Left 9,Right "",Left -2,Left 1]'
    output: Right ""
  - inputs:
    - '[Right "acba",Left -2,Right "b",Left 4]'
    output: Right "acba"
  - inputs:
    - '[Left 9,Left 4,Right "bca"]'
    output: Right "bca"
  - inputs:
    - '[Right "bd",Right "aaba",Left 0,Right "a"]'
    output: Right "bd"
  control_examples:
  - inputs:
    - '[Left 10]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "d"]'
    output: Right "d"
  - inputs:
    - '[Right "",Left 6,Left 10,Left 0,Left 9]'
    output: Right ""
  - inputs:
    - '[Right "bacba",Right "",Right "babcd",Left 6]'
    output: Right "bacba"
  - inputs:
    - '[Right "",Left 6,Left 3]'
    output: Right ""
  - inputs:
    - '[Left 8,Right "ddc",Right "dcbcda"]'
    output: Right "ddc"
  - inputs:
    - '[Left 1,Left 7,Right "",Left -2,Right "bdddad"]'
    output: Right ""
  - inputs:
    - '[Left -2,Left 3,Right "bcca",Right "ab"]'
    output: Right "bcca"
  - inputs:
    - '[Right "bb",Left 2]'
    output: Right "bb"
  - inputs:
    - '[Left 5,Left -1,Left -1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left -2,Right "bd"]'
    output: Right "bd"
  - inputs:
    - '[Right "adbccb",Left 1,Left 1,Left -2,Right "dcabda"]'
    output: Right "adbccb"
  - inputs:
    - '[Right "cadc",Right "ac",Right "",Right "c",Right ""]'
    output: Right "cadc"
  - inputs:
    - '[Left -2,Left 1]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Right "aa"]'
    output: Right ""
  - inputs:
    - '[Right "dcbda",Left 4,Left 5,Right "b",Right ""]'
    output: Right "dcbda"
  - inputs:
    - '[Right "d",Left 7,Left 7,Left 5]'
    output: Right "d"
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> Right (last (rights es))
  sorted_examples:
  - inputs:
    - '[Left -2,Left 6,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "dbadbc",Right "dddb",Right "accb",Right "ad",Right "dbccdc"]'
    output: Right "dbccdc"
  - inputs:
    - '[Left -2,Right "da"]'
    output: Right "da"
  - inputs:
    - '[Right "ccbaba",Left 1,Left -1,Right "dcc",Left 3,Left 4]'
    output: Right "dcc"
  - inputs:
    - '[Left 5]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "bb",Left -1,Right "cbbdcb",Left 2]'
    output: Right "cbbdcb"
  - inputs:
    - '[Right "ac",Right "adab",Right "add"]'
    output: Right "add"
  - inputs:
    - '[Right "babab",Right "b",Left 4,Left 6,Left 3,Left 5]'
    output: Right "b"
  - inputs:
    - '[Left 5,Left 3,Left 7,Right "ccd"]'
    output: Right "ccd"
  - inputs:
    - '[Right "ccbaba",Right "d",Left 2,Left 8,Right "acbb"]'
    output: Right "acbb"
  - inputs:
    - '[Right "ddcab",Right "cbcbcb",Left 7,Right "bcdacd",Left -2]'
    output: Right "bcdacd"
  - inputs:
    - '[Right "dddaac",Left 0,Right "db",Left 6,Left 10]'
    output: Right "db"
  - inputs:
    - '[Right "cc",Left -2]'
    output: Right "cc"
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Left -1,Right "aadcdc",Left 0,Left 7]'
    output: Right "aadcdc"
  - inputs:
    - '[Right "",Right "aabac",Right "da",Right "bbd"]'
    output: Right "bbd"
  - inputs:
    - '[Left 3,Right "",Right "bd",Left -2]'
    output: Right "bd"
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "cd",Right "bbdd",Left 6,Left 7,Left 4]'
    output: Right "bbdd"
  - inputs:
    - '[Right "b",Left 9,Left 5,Left 1]'
    output: Right "b"
  - inputs:
    - '[Left 8,Right "bab",Right "abdbc",Right "c"]'
    output: Right "c"
  - inputs:
    - '[Left 8,Left 0,Right "dada",Right "cdbdd"]'
    output: Right "cdbdd"
  - inputs:
    - '[Left 0,Right "babc",Right "dcdba",Right "",Right "cd"]'
    output: Right "cd"
  - inputs:
    - '[Right "b",Right "",Left 8,Right "",Right "cc"]'
    output: Right "cc"
  - inputs:
    - '[Right "b",Left 1,Left 8,Right "dd",Left 3,Right "aabbd"]'
    output: Right "aabbd"
  - inputs:
    - '[Right "d",Left 9,Right "dcda",Right "bba"]'
    output: Right "bba"
  - inputs:
    - '[Right "",Right "aa"]'
    output: Right "aa"
  - inputs:
    - '[Right "ad",Right "",Left 8]'
    output: Right ""
  unsorted_examples:
  - inputs:
    - '[Right "",Right "aa"]'
    output: Right "aa"
  - inputs:
    - '[Left 8,Left 0,Right "dada",Right "cdbdd"]'
    output: Right "cdbdd"
  - inputs:
    - '[Right "b",Right "",Left 8,Right "",Right "cc"]'
    output: Right "cc"
  - inputs:
    - '[Right "ad",Right "",Left 8]'
    output: Right ""
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "bb",Left -1,Right "cbbdcb",Left 2]'
    output: Right "cbbdcb"
  - inputs:
    - '[Right "ccbaba",Left 1,Left -1,Right "dcc",Left 3,Left 4]'
    output: Right "dcc"
  - inputs:
    - '[Left 0,Right "babc",Right "dcdba",Right "",Right "cd"]'
    output: Right "cd"
  - inputs:
    - '[Right "dddaac",Left 0,Right "db",Left 6,Left 10]'
    output: Right "db"
  - inputs:
    - '[Right "ac",Right "adab",Right "add"]'
    output: Right "add"
  - inputs:
    - '[Left -2,Left 6,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "ccbaba",Right "d",Left 2,Left 8,Right "acbb"]'
    output: Right "acbb"
  - inputs:
    - '[Left 3,Right "",Right "bd",Left -2]'
    output: Right "bd"
  - inputs:
    - '[Right "cd",Right "bbdd",Left 6,Left 7,Left 4]'
    output: Right "bbdd"
  - inputs:
    - '[Left 8,Right "bab",Right "abdbc",Right "c"]'
    output: Right "c"
  - inputs:
    - '[Right "dbadbc",Right "dddb",Right "accb",Right "ad",Right "dbccdc"]'
    output: Right "dbccdc"
  - inputs:
    - '[Right "babab",Right "b",Left 4,Left 6,Left 3,Left 5]'
    output: Right "b"
  - inputs:
    - '[Left 5]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "ddcab",Right "cbcbcb",Left 7,Right "bcdacd",Left -2]'
    output: Right "bcdacd"
  - inputs:
    - '[Right "",Right "aabac",Right "da",Right "bbd"]'
    output: Right "bbd"
  - inputs:
    - '[Right "b",Left 9,Left 5,Left 1]'
    output: Right "b"
  - inputs:
    - '[Right "b",Left 1,Left 8,Right "dd",Left 3,Right "aabbd"]'
    output: Right "aabbd"
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "d",Left 9,Right "dcda",Right "bba"]'
    output: Right "bba"
  - inputs:
    - '[Right "cc",Left -2]'
    output: Right "cc"
  - inputs:
    - '[Left -1,Right "aadcdc",Left 0,Left 7]'
    output: Right "aadcdc"
  - inputs:
    - '[Left 5,Left 3,Left 7,Right "ccd"]'
    output: Right "ccd"
  - inputs:
    - '[Left -2,Right "da"]'
    output: Right "da"
  control_examples:
  - inputs:
    - '[Right "",Right "aa"]'
    output: Right "aa"
  - inputs:
    - '[Left 8,Left 0,Right "dada",Right "cdbdd"]'
    output: Right "cdbdd"
  - inputs:
    - '[Right "b",Right "",Left 8,Right "",Right "cc"]'
    output: Right "cc"
  - inputs:
    - '[Right "ad",Right "",Left 8]'
    output: Right ""
  - inputs:
    - '[Right ""]'
    output: Right ""
  - inputs:
    - '[Right "bb",Left -1,Right "cbbdcb",Left 2]'
    output: Right "cbbdcb"
  - inputs:
    - '[Right "ccbaba",Left 1,Left -1,Right "dcc",Left 3,Left 4]'
    output: Right "dcc"
  - inputs:
    - '[Left 0,Right "babc",Right "dcdba",Right "",Right "cd"]'
    output: Right "cd"
  - inputs:
    - '[Right "dddaac",Left 0,Right "db",Left 6,Left 10]'
    output: Right "db"
  - inputs:
    - '[Right "ac",Right "adab",Right "add"]'
    output: Right "add"
  - inputs:
    - '[Left -2,Left 6,Left 3]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "ccbaba",Right "d",Left 2,Left 8,Right "acbb"]'
    output: Right "acbb"
  - inputs:
    - '[Left 3,Right "",Right "bd",Left -2]'
    output: Right "bd"
  - inputs:
    - '[Right "cd",Right "bbdd",Left 6,Left 7,Left 4]'
    output: Right "bbdd"
  - inputs:
    - '[Left 8,Right "bab",Right "abdbc",Right "c"]'
    output: Right "c"
  - inputs:
    - '[Right "dbadbc",Right "dddb",Right "accb",Right "ad",Right "dbccdc"]'
    output: Right "dbccdc"
  - inputs:
    - '[Right "babab",Right "b",Left 4,Left 6,Left 3,Left 5]'
    output: Right "b"
  - inputs:
    - '[Left 5]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "ddcab",Right "cbcbcb",Left 7,Right "bcdacd",Left -2]'
    output: Right "bcdacd"
  - inputs:
    - '[Right "",Right "aabac",Right "da",Right "bbd"]'
    output: Right "bbd"
  - inputs:
    - '[Right "b",Left 9,Left 5,Left 1]'
    output: Right "b"
  - inputs:
    - '[Right "b",Left 1,Left 8,Right "dd",Left 3,Right "aabbd"]'
    output: Right "aabbd"
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> Left (head (lefts es))
  sorted_examples:
  - inputs:
    - '[Right "b",Right "da",Right "cbac",Right "daa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 10,Left 8]'
    output: Left 10
  - inputs:
    - '[Left 2,Left 6,Left 9,Left 2,Right "b",Left 8]'
    output: Left 2
  - inputs:
    - '[Right "dcbda",Left 4,Left 5,Right "b",Right ""]'
    output: Left 4
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "b",Right "a",Left 5]'
    output: Left 5
  - inputs:
    - '[Right "bbdb",Right "dc",Right "cc",Right "bcda",Left 9]'
    output: Left 9
  - inputs:
    - '[Left 7,Right "acacc",Right "cdd",Left -1,Left 2,Right "acdcaa"]'
    output: Left 7
  - inputs:
    - '[Right "b",Left 9,Left 5,Left 1]'
    output: Left 9
  - inputs:
    - '[Right "d",Left -2,Right "ccdca"]'
    output: Left -2
  - inputs:
    - '[Left 3,Left -1,Right "cba",Right "b",Right "acd"]'
    output: Left 3
  - inputs:
    - '[Left 1,Left 6,Right "",Right "adddd"]'
    output: Left 1
  - inputs:
    - '[Right "aa",Right "aab",Right "da"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "db",Right "c",Left 0,Right "a"]'
    output: Left 0
  - inputs:
    - '[Left 1]'
    output: Left 1
  - inputs:
    - '[Right "cd",Right "dba"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "cda",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "aadc",Left 9,Right "",Right "bcd"]'
    output: Left 9
  - inputs:
    - '[Left 6,Right "abacd",Left 8]'
    output: Left 6
  - inputs:
    - '[Left -1,Left -2,Left 7,Right "dda",Right "c"]'
    output: Left -1
  - inputs:
    - '[Right "",Right "cbcbba",Right "",Left 6,Left -1]'
    output: Left 6
  - inputs:
    - '[Right "daacd",Left 6,Left 0]'
    output: Left 6
  - inputs:
    - '[Left 2,Right "cc",Right "dabcd",Right "cb"]'
    output: Left 2
  - inputs:
    - '[Left 10,Right ""]'
    output: Left 10
  - inputs:
    - '[Left 10,Left 6,Right "bdd",Left 1,Right "adbcc"]'
    output: Left 10
  unsorted_examples:
  - inputs:
    - '[Right "b",Left 9,Left 5,Left 1]'
    output: Left 9
  - inputs:
    - '[Right "b",Right "a",Left 5]'
    output: Left 5
  - inputs:
    - '[Right "daacd",Left 6,Left 0]'
    output: Left 6
  - inputs:
    - '[Right "dcbda",Left 4,Left 5,Right "b",Right ""]'
    output: Left 4
  - inputs:
    - '[Left 10,Right ""]'
    output: Left 10
  - inputs:
    - '[Left -1,Left -2,Left 7,Right "dda",Right "c"]'
    output: Left -1
  - inputs:
    - '[Left 1]'
    output: Left 1
  - inputs:
    - '[Right "cda",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 7,Right "acacc",Right "cdd",Left -1,Left 2,Right "acdcaa"]'
    output: Left 7
  - inputs:
    - '[Left 6,Right "abacd",Left 8]'
    output: Left 6
  - inputs:
    - '[Left 3,Left -1,Right "cba",Right "b",Right "acd"]'
    output: Left 3
  - inputs:
    - '[Right "b",Right "da",Right "cbac",Right "daa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Right "cbcbba",Right "",Left 6,Left -1]'
    output: Left 6
  - inputs:
    - '[Left 1,Left 6,Right "",Right "adddd"]'
    output: Left 1
  - inputs:
    - '[Right "cd",Right "dba"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "aadc",Left 9,Right "",Right "bcd"]'
    output: Left 9
  - inputs:
    - '[Right "db",Right "c",Left 0,Right "a"]'
    output: Left 0
  - inputs:
    - '[Right "d",Left -2,Right "ccdca"]'
    output: Left -2
  - inputs:
    - '[Left 10,Left 8]'
    output: Left 10
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 10,Left 6,Right "bdd",Left 1,Right "adbcc"]'
    output: Left 10
  - inputs:
    - '[Right "bbdb",Right "dc",Right "cc",Right "bcda",Left 9]'
    output: Left 9
  - inputs:
    - '[Right "aa",Right "aab",Right "da"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Left 2,Left 6,Left 9,Left 2,Right "b",Left 8]'
    output: Left 2
  - inputs:
    - '[Left 2,Right "cc",Right "dabcd",Right "cb"]'
    output: Left 2
  control_examples:
  - inputs:
    - '[Right "b",Left 9,Left 5,Left 1]'
    output: Left 9
  - inputs:
    - '[Right "b",Right "a",Left 5]'
    output: Left 5
  - inputs:
    - '[Right "daacd",Left 6,Left 0]'
    output: Left 6
  - inputs:
    - '[Right "dcbda",Left 4,Left 5,Right "b",Right ""]'
    output: Left 4
  - inputs:
    - '[Left 10,Right ""]'
    output: Left 10
  - inputs:
    - '[Left -1,Left -2,Left 7,Right "dda",Right "c"]'
    output: Left -1
  - inputs:
    - '[Left 1]'
    output: Left 1
  - inputs:
    - '[Right "cda",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 7,Right "acacc",Right "cdd",Left -1,Left 2,Right "acdcaa"]'
    output: Left 7
  - inputs:
    - '[Left 6,Right "abacd",Left 8]'
    output: Left 6
  - inputs:
    - '[Left 3,Left -1,Right "cba",Right "b",Right "acd"]'
    output: Left 3
  - inputs:
    - '[Right "b",Right "da",Right "cbac",Right "daa"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "",Right "cbcbba",Right "",Left 6,Left -1]'
    output: Left 6
  - inputs:
    - '[Left 1,Left 6,Right "",Right "adddd"]'
    output: Left 1
  - inputs:
    - '[Right "cd",Right "dba"]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "aadc",Left 9,Right "",Right "bcd"]'
    output: Left 9
  - inputs:
    - '[Right "db",Right "c",Left 0,Right "a"]'
    output: Left 0
  - inputs:
    - '[Right "d",Left -2,Right "ccdca"]'
    output: Left -2
  - inputs:
    - '[Left 10,Left 8]'
    output: Left 10
  - inputs:
    - '[Right ""]'
    output: 'Prelude.head: empty list'
  - inputs:
    - '[Right "bbdb",Right "dc",Right "cc",Right "bcda",Left 9]'
    output: Left 9
  - inputs:
    - '[]'
    output: 'Prelude.head: empty list'
- name: firstRight
  query: 'es: [Either a b] -> Either a b'
  candidate: \es -> Left (last (lefts es))
  sorted_examples:
  - inputs:
    - '[Right "ad"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 8,Left 10,Left 6,Left 7,Left 4]'
    output: Left 4
  - inputs:
    - '[Right "",Right "adbc",Left -2]'
    output: Left -2
  - inputs:
    - '[Left 7,Left 0,Right "aadcdd",Right ""]'
    output: Left 0
  - inputs:
    - '[Right "bda",Right "cdb",Right "ba"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "d",Left 7,Left 7,Left 5]'
    output: Left 5
  - inputs:
    - '[Left 9,Right "dccac",Right "abbbb",Left 0,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 3,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "",Left 2,Right "bcadac"]'
    output: Left 2
  - inputs:
    - '[Right "b",Left 1,Left 8,Right "dd",Left 3,Right "aabbd"]'
    output: Left 3
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 0,Right "",Left 1,Right "dc",Left 6]'
    output: Left 6
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[Right "",Right "cc"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 8,Left 5,Right "da",Right "dbdba",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 5,Right "",Right "",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 4,Left 0,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 10,Right "a",Right "dc"]'
    output: Left 10
  - inputs:
    - '[Right "ba",Left -1,Left 4]'
    output: Left 4
  - inputs:
    - '[Left 0,Right "",Left 2,Left 2,Left 4]'
    output: Left 4
  - inputs:
    - '[Left 9,Right "cddaab"]'
    output: Left 9
  - inputs:
    - '[Right "",Left 5,Right "bbbcd",Right "bdcbb"]'
    output: Left 5
  unsorted_examples:
  - inputs:
    - '[Left 3,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "ba",Left -1,Left 4]'
    output: Left 4
  - inputs:
    - '[Right "b",Left 1,Left 8,Right "dd",Left 3,Right "aabbd"]'
    output: Left 3
  - inputs:
    - '[Right "ad"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 10,Right "a",Right "dc"]'
    output: Left 10
  - inputs:
    - '[Right "d",Left 7,Left 7,Left 5]'
    output: Left 5
  - inputs:
    - '[Left 9,Right "cddaab"]'
    output: Left 9
  - inputs:
    - '[Right "",Left 2,Right "bcadac"]'
    output: Left 2
  - inputs:
    - '[Right "bda",Right "cdb",Right "ba"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[Left 9,Right "dccac",Right "abbbb",Left 0,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 0,Right "",Left 1,Right "dc",Left 6]'
    output: Left 6
  - inputs:
    - '[Left 4,Left 0,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "",Right "adbc",Left -2]'
    output: Left -2
  - inputs:
    - '[Left 8,Left 10,Left 6,Left 7,Left 4]'
    output: Left 4
  - inputs:
    - '[Left 8,Left 5,Right "da",Right "dbdba",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "",Right "cc"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Left 5,Right "bbbcd",Right "bdcbb"]'
    output: Left 5
  - inputs:
    - '[Left 0,Right "",Left 2,Left 2,Left 4]'
    output: Left 4
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 5,Right "",Right "",Left 7]'
    output: Left 7
  - inputs:
    - '[Left 7,Left 0,Right "aadcdd",Right ""]'
    output: Left 0
  control_examples:
  - inputs:
    - '[Left 3,Left 5]'
    output: Left 5
  - inputs:
    - '[Right "ba",Left -1,Left 4]'
    output: Left 4
  - inputs:
    - '[Right "b",Left 1,Left 8,Right "dd",Left 3,Right "aabbd"]'
    output: Left 3
  - inputs:
    - '[Right "ad"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 10,Right "a",Right "dc"]'
    output: Left 10
  - inputs:
    - '[Right "d",Left 7,Left 7,Left 5]'
    output: Left 5
  - inputs:
    - '[Left 9,Right "cddaab"]'
    output: Left 9
  - inputs:
    - '[Right "",Left 2,Right "bcadac"]'
    output: Left 2
  - inputs:
    - '[Right "bda",Right "cdb",Right "ba"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Left 9]'
    output: Left 9
  - inputs:
    - '[Left 9,Right "dccac",Right "abbbb",Left 0,Left 0]'
    output: Left 0
  - inputs:
    - '[Left 0,Right "",Left 1,Right "dc",Left 6]'
    output: Left 6
  - inputs:
    - '[Left 4,Left 0,Left 0]'
    output: Left 0
  - inputs:
    - '[Right "",Right "adbc",Left -2]'
    output: Left -2
  - inputs:
    - '[Left 8,Left 10,Left 6,Left 7,Left 4]'
    output: Left 4
  - inputs:
    - '[Left 8,Left 5,Right "da",Right "dbdba",Left 7]'
    output: Left 7
  - inputs:
    - '[Right "",Right "cc"]'
    output: 'Prelude.last: empty list'
  - inputs:
    - '[Right "",Left 5,Right "bbbcd",Right "bdcbb"]'
    output: Left 5
  - inputs:
    - '[]'
    output: 'Prelude.last: empty list'
