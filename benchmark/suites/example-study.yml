- name: firstJust
  query: "x: a -> xs: [Maybe a] -> a"
  solution: "\\x xs -> Data.Maybe.fromMaybe x (Data.Maybe.listToMaybe (Data.Maybe.catMaybes xs))"
  source: "original"
  example:
    - inputs: ["3", "[Nothing, Just 2, Nothing]"]
      output: "2"
    - inputs: ["3", "[]"]
      output: "3"

- name: dedupe
  query: "Eq a => xs: [a] -> [a]"
  solution: "\\xs -> Data.List.map Data.List.head (Data.List.group xs)"
  source: "original"
  example:
    - inputs: ["\"aaabbbccc\""]
      output: "\"abc\""

- name: mbToEither
  query: "x: a -> mb: Maybe b -> Either a b"
  solution: "\\x mb -> maybe (Left x) Right mb"
  source: "original"
  example:
    - inputs: ["1", Nothing]
      output: Left 1
    - inputs: ["3", Just 2]
      output: Right 2

- name: mapEither
  query: "f: (a -> Either b c) -> xs: [a] -> ([b], [c])"
  solution: "\\f xs -> Data.Either.partitionEithers (Data.List.map f xs)"
  source: "original"
  example:
    - inputs: ["\\x -> if x < 10 then Left x else Right x", "[0,10,20,30]"]
      output: ([0], [10, 20, 30])
    - inputs: ["\\x -> if x < 10 then Left \"error\" else Right (x * 2)", "[1,3,11,20]"]
      output: (["error", "error"], [22, 40])


- name: rights
  query: "es: [Either a b] -> Either a [b]"
  solution: "\\arg0 -> Right (Data.Either.rights arg0)"
  source: "hoogle"
  example:
    - inputs: ["[Left 1, Right 2, Right 3]"]
      output: "Right [2, 3]"